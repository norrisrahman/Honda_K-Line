
K-Line.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000941c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08009528  08009528  00019528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095d8  080095d8  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  080095d8  080095d8  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  080095d8  080095d8  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080095d8  080095d8  000195d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080095dc  080095dc  000195dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  080095e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001288  200001ec  080097cc  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001474  080097cc  00021474  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011cfb  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000322e  00000000  00000000  00031f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc0  00000000  00000000  00035140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c58  00000000  00000000  00035f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a660  00000000  00000000  00036b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012dfe  00000000  00000000  000511b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000878a1  00000000  00000000  00063fb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eb857  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039e4  00000000  00000000  000eb8a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001ec 	.word	0x200001ec
 8000128:	00000000 	.word	0x00000000
 800012c:	08009510 	.word	0x08009510

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001f0 	.word	0x200001f0
 8000148:	08009510 	.word	0x08009510

0800014c <filterData>:
		cksum -= data[i];
	}
	return cksum;
}

uint8_t* filterData(const uint8_t *data, uint8_t len) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	460b      	mov	r3, r1
 8000156:	70fb      	strb	r3, [r7, #3]
	if (len <= data[1]) {
 8000158:	687b      	ldr	r3, [r7, #4]
 800015a:	3301      	adds	r3, #1
 800015c:	781b      	ldrb	r3, [r3, #0]
 800015e:	78fa      	ldrb	r2, [r7, #3]
 8000160:	429a      	cmp	r2, r3
 8000162:	d801      	bhi.n	8000168 <filterData+0x1c>
		return NULL;
 8000164:	2300      	movs	r3, #0
 8000166:	e029      	b.n	80001bc <filterData+0x70>
	}
	uint8_t *filteredData = (uint8_t*) malloc((len - data[1]) * sizeof(uint8_t));
 8000168:	78fb      	ldrb	r3, [r7, #3]
 800016a:	687a      	ldr	r2, [r7, #4]
 800016c:	3201      	adds	r2, #1
 800016e:	7812      	ldrb	r2, [r2, #0]
 8000170:	1a9b      	subs	r3, r3, r2
 8000172:	4618      	mov	r0, r3
 8000174:	f008 fd3a 	bl	8008bec <malloc>
 8000178:	4603      	mov	r3, r0
 800017a:	60bb      	str	r3, [r7, #8]
	if (filteredData == NULL) {
 800017c:	68bb      	ldr	r3, [r7, #8]
 800017e:	2b00      	cmp	r3, #0
 8000180:	d101      	bne.n	8000186 <filterData+0x3a>
		return NULL;
 8000182:	2300      	movs	r3, #0
 8000184:	e01a      	b.n	80001bc <filterData+0x70>
	}
	for (int i = data[1]; i <= len; i++) {
 8000186:	687b      	ldr	r3, [r7, #4]
 8000188:	3301      	adds	r3, #1
 800018a:	781b      	ldrb	r3, [r3, #0]
 800018c:	60fb      	str	r3, [r7, #12]
 800018e:	e010      	b.n	80001b2 <filterData+0x66>
		filteredData[i - data[1]] = data[i];
 8000190:	68fb      	ldr	r3, [r7, #12]
 8000192:	687a      	ldr	r2, [r7, #4]
 8000194:	441a      	add	r2, r3
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	3301      	adds	r3, #1
 800019a:	781b      	ldrb	r3, [r3, #0]
 800019c:	4619      	mov	r1, r3
 800019e:	68fb      	ldr	r3, [r7, #12]
 80001a0:	1a5b      	subs	r3, r3, r1
 80001a2:	4619      	mov	r1, r3
 80001a4:	68bb      	ldr	r3, [r7, #8]
 80001a6:	440b      	add	r3, r1
 80001a8:	7812      	ldrb	r2, [r2, #0]
 80001aa:	701a      	strb	r2, [r3, #0]
	for (int i = data[1]; i <= len; i++) {
 80001ac:	68fb      	ldr	r3, [r7, #12]
 80001ae:	3301      	adds	r3, #1
 80001b0:	60fb      	str	r3, [r7, #12]
 80001b2:	78fb      	ldrb	r3, [r7, #3]
 80001b4:	68fa      	ldr	r2, [r7, #12]
 80001b6:	429a      	cmp	r2, r3
 80001b8:	ddea      	ble.n	8000190 <filterData+0x44>
	}
	return filteredData;
 80001ba:	68bb      	ldr	r3, [r7, #8]
}
 80001bc:	4618      	mov	r0, r3
 80001be:	3710      	adds	r7, #16
 80001c0:	46bd      	mov	sp, r7
 80001c2:	bd80      	pop	{r7, pc}

080001c4 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b082      	sub	sp, #8
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	6078      	str	r0, [r7, #4]
 80001cc:	460b      	mov	r3, r1
 80001ce:	807b      	strh	r3, [r7, #2]
	numDataBytes = Size;
 80001d0:	887b      	ldrh	r3, [r7, #2]
 80001d2:	b2da      	uxtb	r2, r3
 80001d4:	4b0e      	ldr	r3, [pc, #56]	; (8000210 <HAL_UARTEx_RxEventCallback+0x4c>)
 80001d6:	701a      	strb	r2, [r3, #0]
	filteredData = filterData(RxBuffer, numDataBytes);
 80001d8:	4b0d      	ldr	r3, [pc, #52]	; (8000210 <HAL_UARTEx_RxEventCallback+0x4c>)
 80001da:	781b      	ldrb	r3, [r3, #0]
 80001dc:	4619      	mov	r1, r3
 80001de:	480d      	ldr	r0, [pc, #52]	; (8000214 <HAL_UARTEx_RxEventCallback+0x50>)
 80001e0:	f7ff ffb4 	bl	800014c <filterData>
 80001e4:	4603      	mov	r3, r0
 80001e6:	4a0c      	ldr	r2, [pc, #48]	; (8000218 <HAL_UARTEx_RxEventCallback+0x54>)
 80001e8:	6013      	str	r3, [r2, #0]
	needToInit = (filteredData == NULL) ? 1 : 0;
 80001ea:	4b0b      	ldr	r3, [pc, #44]	; (8000218 <HAL_UARTEx_RxEventCallback+0x54>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	bf0c      	ite	eq
 80001f2:	2301      	moveq	r3, #1
 80001f4:	2300      	movne	r3, #0
 80001f6:	b2db      	uxtb	r3, r3
 80001f8:	461a      	mov	r2, r3
 80001fa:	4b08      	ldr	r3, [pc, #32]	; (800021c <HAL_UARTEx_RxEventCallback+0x58>)
 80001fc:	601a      	str	r2, [r3, #0]
	HAL_UARTEx_ReceiveToIdle_IT(&huart2, RxBuffer, sizeof(RxBuffer));
 80001fe:	2220      	movs	r2, #32
 8000200:	4904      	ldr	r1, [pc, #16]	; (8000214 <HAL_UARTEx_RxEventCallback+0x50>)
 8000202:	4807      	ldr	r0, [pc, #28]	; (8000220 <HAL_UARTEx_RxEventCallback+0x5c>)
 8000204:	f003 fb45 	bl	8003892 <HAL_UARTEx_ReceiveToIdle_IT>
}
 8000208:	bf00      	nop
 800020a:	3708      	adds	r7, #8
 800020c:	46bd      	mov	sp, r7
 800020e:	bd80      	pop	{r7, pc}
 8000210:	20000278 	.word	0x20000278
 8000214:	20000258 	.word	0x20000258
 8000218:	2000027c 	.word	0x2000027c
 800021c:	20000280 	.word	0x20000280
 8000220:	20000208 	.word	0x20000208

08000224 <initEcu>:

void initEcu(void) {
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
 8000228:	2200      	movs	r2, #0
 800022a:	2104      	movs	r1, #4
 800022c:	480a      	ldr	r0, [pc, #40]	; (8000258 <initEcu+0x34>)
 800022e:	f000 ffc3 	bl	80011b8 <HAL_GPIO_WritePin>
	HAL_Delay(70);
 8000232:	2046      	movs	r0, #70	; 0x46
 8000234:	f000 fb6a 	bl	800090c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);
 8000238:	2201      	movs	r2, #1
 800023a:	2104      	movs	r1, #4
 800023c:	4806      	ldr	r0, [pc, #24]	; (8000258 <initEcu+0x34>)
 800023e:	f000 ffbb 	bl	80011b8 <HAL_GPIO_WritePin>
	HAL_Delay(130);
 8000242:	2082      	movs	r0, #130	; 0x82
 8000244:	f000 fb62 	bl	800090c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8000248:	2200      	movs	r2, #0
 800024a:	2104      	movs	r1, #4
 800024c:	4802      	ldr	r0, [pc, #8]	; (8000258 <initEcu+0x34>)
 800024e:	f000 ffb3 	bl	80011b8 <HAL_GPIO_WritePin>
}
 8000252:	bf00      	nop
 8000254:	bd80      	pop	{r7, pc}
 8000256:	bf00      	nop
 8000258:	40010800 	.word	0x40010800

0800025c <pingECU>:

void pingECU(void) {
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
	HAL_UART_Transmit_IT(&huart2, ECU_WAKEUP_MESSAGE, sizeof(ECU_WAKEUP_MESSAGE));
 8000260:	2204      	movs	r2, #4
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <pingECU+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <pingECU+0x18>)
 8000266:	f003 fadf 	bl	8003828 <HAL_UART_Transmit_IT>
}
 800026a:	bf00      	nop
 800026c:	bd80      	pop	{r7, pc}
 800026e:	bf00      	nop
 8000270:	20000000 	.word	0x20000000
 8000274:	20000208 	.word	0x20000208

08000278 <UART_TURN_OFF>:

void UART_TURN_OFF(void) {
 8000278:	b580      	push	{r7, lr}
 800027a:	b084      	sub	sp, #16
 800027c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800027e:	463b      	mov	r3, r7
 8000280:	2200      	movs	r2, #0
 8000282:	601a      	str	r2, [r3, #0]
 8000284:	605a      	str	r2, [r3, #4]
 8000286:	609a      	str	r2, [r3, #8]
 8000288:	60da      	str	r2, [r3, #12]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 800028a:	2200      	movs	r2, #0
 800028c:	2104      	movs	r1, #4
 800028e:	480e      	ldr	r0, [pc, #56]	; (80002c8 <UART_TURN_OFF+0x50>)
 8000290:	f000 ff92 	bl	80011b8 <HAL_GPIO_WritePin>
	HAL_UART_MspDeInit(&huart2);
 8000294:	480d      	ldr	r0, [pc, #52]	; (80002cc <UART_TURN_OFF+0x54>)
 8000296:	f000 fa19 	bl	80006cc <HAL_UART_MspDeInit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 800029a:	2200      	movs	r2, #0
 800029c:	2104      	movs	r1, #4
 800029e:	480a      	ldr	r0, [pc, #40]	; (80002c8 <UART_TURN_OFF+0x50>)
 80002a0:	f000 ff8a 	bl	80011b8 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002a4:	2301      	movs	r3, #1
 80002a6:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 80002a8:	2304      	movs	r3, #4
 80002aa:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ac:	2300      	movs	r3, #0
 80002ae:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002b0:	2302      	movs	r3, #2
 80002b2:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002b4:	463b      	mov	r3, r7
 80002b6:	4619      	mov	r1, r3
 80002b8:	4803      	ldr	r0, [pc, #12]	; (80002c8 <UART_TURN_OFF+0x50>)
 80002ba:	f000 fd3d 	bl	8000d38 <HAL_GPIO_Init>
}
 80002be:	bf00      	nop
 80002c0:	3710      	adds	r7, #16
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	40010800 	.word	0x40010800
 80002cc:	20000208 	.word	0x20000208

080002d0 <UART_TURN_ON>:

void UART_TURN_ON(void) {
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 80002d4:	2201      	movs	r2, #1
 80002d6:	2104      	movs	r1, #4
 80002d8:	4806      	ldr	r0, [pc, #24]	; (80002f4 <UART_TURN_ON+0x24>)
 80002da:	f000 ff6d 	bl	80011b8 <HAL_GPIO_WritePin>
	HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2);
 80002de:	2104      	movs	r1, #4
 80002e0:	4804      	ldr	r0, [pc, #16]	; (80002f4 <UART_TURN_ON+0x24>)
 80002e2:	f000 fead 	bl	8001040 <HAL_GPIO_DeInit>
	HAL_UART_MspInit(&huart2);
 80002e6:	4804      	ldr	r0, [pc, #16]	; (80002f8 <UART_TURN_ON+0x28>)
 80002e8:	f000 f99e 	bl	8000628 <HAL_UART_MspInit>
	MX_USART2_UART_Init();
 80002ec:	f000 f900 	bl	80004f0 <MX_USART2_UART_Init>
}
 80002f0:	bf00      	nop
 80002f2:	bd80      	pop	{r7, pc}
 80002f4:	40010800 	.word	0x40010800
 80002f8:	20000208 	.word	0x20000208

080002fc <resetGpio>:

void resetGpio(void) {
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
	UART_TURN_OFF();
 8000300:	f7ff ffba 	bl	8000278 <UART_TURN_OFF>

	initEcu();
 8000304:	f7ff ff8e 	bl	8000224 <initEcu>

	UART_TURN_ON();
 8000308:	f7ff ffe2 	bl	80002d0 <UART_TURN_ON>

	HAL_UARTEx_ReceiveToIdle_IT(&huart2, RxBuffer, RxBuffer_Size);
 800030c:	2220      	movs	r2, #32
 800030e:	4906      	ldr	r1, [pc, #24]	; (8000328 <resetGpio+0x2c>)
 8000310:	4806      	ldr	r0, [pc, #24]	; (800032c <resetGpio+0x30>)
 8000312:	f003 fabe 	bl	8003892 <HAL_UARTEx_ReceiveToIdle_IT>

	pingECU();
 8000316:	f7ff ffa1 	bl	800025c <pingECU>

	NBT_init(&reqData, 300);
 800031a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800031e:	4804      	ldr	r0, [pc, #16]	; (8000330 <resetGpio+0x34>)
 8000320:	f000 f935 	bl	800058e <NBT_init>
}
 8000324:	bf00      	nop
 8000326:	bd80      	pop	{r7, pc}
 8000328:	20000258 	.word	0x20000258
 800032c:	20000208 	.word	0x20000208
 8000330:	20000250 	.word	0x20000250

08000334 <main_loop>:

void main_loop(void) {
 8000334:	b580      	push	{r7, lr}
 8000336:	b082      	sub	sp, #8
 8000338:	af00      	add	r7, sp, #0
	if (needToInit == 1) {
 800033a:	4b30      	ldr	r3, [pc, #192]	; (80003fc <main_loop+0xc8>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	2b01      	cmp	r3, #1
 8000340:	d10f      	bne.n	8000362 <main_loop+0x2e>
		UART_TURN_OFF();
 8000342:	f7ff ff99 	bl	8000278 <UART_TURN_OFF>

		initEcu();
 8000346:	f7ff ff6d 	bl	8000224 <initEcu>

		UART_TURN_ON();
 800034a:	f7ff ffc1 	bl	80002d0 <UART_TURN_ON>

		HAL_UARTEx_ReceiveToIdle_IT(&huart2, RxBuffer, RxBuffer_Size);
 800034e:	2220      	movs	r2, #32
 8000350:	492b      	ldr	r1, [pc, #172]	; (8000400 <main_loop+0xcc>)
 8000352:	482c      	ldr	r0, [pc, #176]	; (8000404 <main_loop+0xd0>)
 8000354:	f003 fa9d 	bl	8003892 <HAL_UARTEx_ReceiveToIdle_IT>

		pingECU();
 8000358:	f7ff ff80 	bl	800025c <pingECU>

		needToInit = 0;
 800035c:	4b27      	ldr	r3, [pc, #156]	; (80003fc <main_loop+0xc8>)
 800035e:	2200      	movs	r2, #0
 8000360:	601a      	str	r2, [r3, #0]
	}

	if (NBT_handler(&reqData)) {
 8000362:	4829      	ldr	r0, [pc, #164]	; (8000408 <main_loop+0xd4>)
 8000364:	f000 f924 	bl	80005b0 <NBT_handler>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d041      	beq.n	80003f2 <main_loop+0xbe>

		HAL_UART_Transmit(&huart2, T17, T17[1], 100);
 800036e:	4b27      	ldr	r3, [pc, #156]	; (800040c <main_loop+0xd8>)
 8000370:	785b      	ldrb	r3, [r3, #1]
 8000372:	b29a      	uxth	r2, r3
 8000374:	2364      	movs	r3, #100	; 0x64
 8000376:	4925      	ldr	r1, [pc, #148]	; (800040c <main_loop+0xd8>)
 8000378:	4822      	ldr	r0, [pc, #136]	; (8000404 <main_loop+0xd0>)
 800037a:	f003 f9d2 	bl	8003722 <HAL_UART_Transmit>

		//			CDC_Transmit_FS(filteredData, filteredData[1]);


		char *string_array = (char*) malloc((filteredData[1] * 2 + 1) * sizeof(char));
 800037e:	4b24      	ldr	r3, [pc, #144]	; (8000410 <main_loop+0xdc>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	3301      	adds	r3, #1
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	005b      	lsls	r3, r3, #1
 8000388:	3301      	adds	r3, #1
 800038a:	4618      	mov	r0, r3
 800038c:	f008 fc2e 	bl	8008bec <malloc>
 8000390:	4603      	mov	r3, r0
 8000392:	603b      	str	r3, [r7, #0]
		//
		for (int i = 0; i < filteredData[1]; i++) {
 8000394:	2300      	movs	r3, #0
 8000396:	607b      	str	r3, [r7, #4]
 8000398:	e010      	b.n	80003bc <main_loop+0x88>
			sprintf(&string_array[i * 2], "%02X", filteredData[i]);
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	005b      	lsls	r3, r3, #1
 800039e:	461a      	mov	r2, r3
 80003a0:	683b      	ldr	r3, [r7, #0]
 80003a2:	1898      	adds	r0, r3, r2
 80003a4:	4b1a      	ldr	r3, [pc, #104]	; (8000410 <main_loop+0xdc>)
 80003a6:	681a      	ldr	r2, [r3, #0]
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	4413      	add	r3, r2
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	461a      	mov	r2, r3
 80003b0:	4918      	ldr	r1, [pc, #96]	; (8000414 <main_loop+0xe0>)
 80003b2:	f008 fd1f 	bl	8008df4 <siprintf>
		for (int i = 0; i < filteredData[1]; i++) {
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	3301      	adds	r3, #1
 80003ba:	607b      	str	r3, [r7, #4]
 80003bc:	4b14      	ldr	r3, [pc, #80]	; (8000410 <main_loop+0xdc>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	3301      	adds	r3, #1
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	461a      	mov	r2, r3
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	4293      	cmp	r3, r2
 80003ca:	dbe6      	blt.n	800039a <main_loop+0x66>
		}

		CDC_Transmit_FS((uint8_t*) string_array, filteredData[1] * 2);
 80003cc:	4b10      	ldr	r3, [pc, #64]	; (8000410 <main_loop+0xdc>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	3301      	adds	r3, #1
 80003d2:	781b      	ldrb	r3, [r3, #0]
 80003d4:	b29b      	uxth	r3, r3
 80003d6:	005b      	lsls	r3, r3, #1
 80003d8:	b29b      	uxth	r3, r3
 80003da:	4619      	mov	r1, r3
 80003dc:	6838      	ldr	r0, [r7, #0]
 80003de:	f007 fffd 	bl	80083dc <CDC_Transmit_FS>

		free(string_array);
 80003e2:	6838      	ldr	r0, [r7, #0]
 80003e4:	f008 fc0a 	bl	8008bfc <free>
		free(filteredData);
 80003e8:	4b09      	ldr	r3, [pc, #36]	; (8000410 <main_loop+0xdc>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	4618      	mov	r0, r3
 80003ee:	f008 fc05 	bl	8008bfc <free>

	}
}
 80003f2:	bf00      	nop
 80003f4:	3708      	adds	r7, #8
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	20000280 	.word	0x20000280
 8000400:	20000258 	.word	0x20000258
 8000404:	20000208 	.word	0x20000208
 8000408:	20000250 	.word	0x20000250
 800040c:	20000004 	.word	0x20000004
 8000410:	2000027c 	.word	0x2000027c
 8000414:	08009528 	.word	0x08009528

08000418 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800041c:	f000 fa14 	bl	8000848 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000420:	f000 f80b 	bl	800043a <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000424:	f000 f88c 	bl	8000540 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000428:	f000 f862 	bl	80004f0 <MX_USART2_UART_Init>
	MX_USB_DEVICE_Init();
 800042c:	f007 ff18 	bl	8008260 <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 2 */

	resetGpio();
 8000430:	f7ff ff64 	bl	80002fc <resetGpio>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		main_loop();
 8000434:	f7ff ff7e 	bl	8000334 <main_loop>
 8000438:	e7fc      	b.n	8000434 <main+0x1c>

0800043a <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800043a:	b580      	push	{r7, lr}
 800043c:	b094      	sub	sp, #80	; 0x50
 800043e:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000440:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000444:	2228      	movs	r2, #40	; 0x28
 8000446:	2100      	movs	r1, #0
 8000448:	4618      	mov	r0, r3
 800044a:	f008 fbdf 	bl	8008c0c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800044e:	f107 0314 	add.w	r3, r7, #20
 8000452:	2200      	movs	r2, #0
 8000454:	601a      	str	r2, [r3, #0]
 8000456:	605a      	str	r2, [r3, #4]
 8000458:	609a      	str	r2, [r3, #8]
 800045a:	60da      	str	r2, [r3, #12]
 800045c:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 800045e:	1d3b      	adds	r3, r7, #4
 8000460:	2200      	movs	r2, #0
 8000462:	601a      	str	r2, [r3, #0]
 8000464:	605a      	str	r2, [r3, #4]
 8000466:	609a      	str	r2, [r3, #8]
 8000468:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800046a:	2301      	movs	r3, #1
 800046c:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800046e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000472:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000474:	2300      	movs	r3, #0
 8000476:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000478:	2301      	movs	r3, #1
 800047a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800047c:	2302      	movs	r3, #2
 800047e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000480:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000484:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000486:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800048a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800048c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000490:	4618      	mov	r0, r3
 8000492:	f002 fc17 	bl	8002cc4 <HAL_RCC_OscConfig>
 8000496:	4603      	mov	r3, r0
 8000498:	2b00      	cmp	r3, #0
 800049a:	d001      	beq.n	80004a0 <SystemClock_Config+0x66>
		Error_Handler();
 800049c:	f000 f872 	bl	8000584 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1
 80004a0:	230f      	movs	r3, #15
 80004a2:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004a4:	2302      	movs	r3, #2
 80004a6:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004a8:	2300      	movs	r3, #0
 80004aa:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004b0:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004b2:	2300      	movs	r3, #0
 80004b4:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80004b6:	f107 0314 	add.w	r3, r7, #20
 80004ba:	2102      	movs	r1, #2
 80004bc:	4618      	mov	r0, r3
 80004be:	f002 fe83 	bl	80031c8 <HAL_RCC_ClockConfig>
 80004c2:	4603      	mov	r3, r0
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d001      	beq.n	80004cc <SystemClock_Config+0x92>
		Error_Handler();
 80004c8:	f000 f85c 	bl	8000584 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80004cc:	2310      	movs	r3, #16
 80004ce:	607b      	str	r3, [r7, #4]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80004d0:	2300      	movs	r3, #0
 80004d2:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80004d4:	1d3b      	adds	r3, r7, #4
 80004d6:	4618      	mov	r0, r3
 80004d8:	f003 f804 	bl	80034e4 <HAL_RCCEx_PeriphCLKConfig>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <SystemClock_Config+0xac>
		Error_Handler();
 80004e2:	f000 f84f 	bl	8000584 <Error_Handler>
	}
}
 80004e6:	bf00      	nop
 80004e8:	3750      	adds	r7, #80	; 0x50
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
	...

080004f0 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
void MX_USART2_UART_Init(void) {
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80004f4:	4b10      	ldr	r3, [pc, #64]	; (8000538 <MX_USART2_UART_Init+0x48>)
 80004f6:	4a11      	ldr	r2, [pc, #68]	; (800053c <MX_USART2_UART_Init+0x4c>)
 80004f8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 10400;
 80004fa:	4b0f      	ldr	r3, [pc, #60]	; (8000538 <MX_USART2_UART_Init+0x48>)
 80004fc:	f642 02a0 	movw	r2, #10400	; 0x28a0
 8000500:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000502:	4b0d      	ldr	r3, [pc, #52]	; (8000538 <MX_USART2_UART_Init+0x48>)
 8000504:	2200      	movs	r2, #0
 8000506:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000508:	4b0b      	ldr	r3, [pc, #44]	; (8000538 <MX_USART2_UART_Init+0x48>)
 800050a:	2200      	movs	r2, #0
 800050c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800050e:	4b0a      	ldr	r3, [pc, #40]	; (8000538 <MX_USART2_UART_Init+0x48>)
 8000510:	2200      	movs	r2, #0
 8000512:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000514:	4b08      	ldr	r3, [pc, #32]	; (8000538 <MX_USART2_UART_Init+0x48>)
 8000516:	220c      	movs	r2, #12
 8000518:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800051a:	4b07      	ldr	r3, [pc, #28]	; (8000538 <MX_USART2_UART_Init+0x48>)
 800051c:	2200      	movs	r2, #0
 800051e:	619a      	str	r2, [r3, #24]
	if (HAL_LIN_Init(&huart2, UART_LINBREAKDETECTLENGTH_10B) != HAL_OK) {
 8000520:	2100      	movs	r1, #0
 8000522:	4805      	ldr	r0, [pc, #20]	; (8000538 <MX_USART2_UART_Init+0x48>)
 8000524:	f003 f894 	bl	8003650 <HAL_LIN_Init>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <MX_USART2_UART_Init+0x42>
		Error_Handler();
 800052e:	f000 f829 	bl	8000584 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000532:	bf00      	nop
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	20000208 	.word	0x20000208
 800053c:	40004400 	.word	0x40004400

08000540 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
void MX_GPIO_Init(void) {
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000546:	4b0e      	ldr	r3, [pc, #56]	; (8000580 <MX_GPIO_Init+0x40>)
 8000548:	699b      	ldr	r3, [r3, #24]
 800054a:	4a0d      	ldr	r2, [pc, #52]	; (8000580 <MX_GPIO_Init+0x40>)
 800054c:	f043 0320 	orr.w	r3, r3, #32
 8000550:	6193      	str	r3, [r2, #24]
 8000552:	4b0b      	ldr	r3, [pc, #44]	; (8000580 <MX_GPIO_Init+0x40>)
 8000554:	699b      	ldr	r3, [r3, #24]
 8000556:	f003 0320 	and.w	r3, r3, #32
 800055a:	607b      	str	r3, [r7, #4]
 800055c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800055e:	4b08      	ldr	r3, [pc, #32]	; (8000580 <MX_GPIO_Init+0x40>)
 8000560:	699b      	ldr	r3, [r3, #24]
 8000562:	4a07      	ldr	r2, [pc, #28]	; (8000580 <MX_GPIO_Init+0x40>)
 8000564:	f043 0304 	orr.w	r3, r3, #4
 8000568:	6193      	str	r3, [r2, #24]
 800056a:	4b05      	ldr	r3, [pc, #20]	; (8000580 <MX_GPIO_Init+0x40>)
 800056c:	699b      	ldr	r3, [r3, #24]
 800056e:	f003 0304 	and.w	r3, r3, #4
 8000572:	603b      	str	r3, [r7, #0]
 8000574:	683b      	ldr	r3, [r7, #0]

}
 8000576:	bf00      	nop
 8000578:	370c      	adds	r7, #12
 800057a:	46bd      	mov	sp, r7
 800057c:	bc80      	pop	{r7}
 800057e:	4770      	bx	lr
 8000580:	40021000 	.word	0x40021000

08000584 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000588:	b672      	cpsid	i
}
 800058a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800058c:	e7fe      	b.n	800058c <Error_Handler+0x8>

0800058e <NBT_init>:
#include "stm32f1xx_hal.h"
#include "nbt.h"

//NBT - Non Blocking Timer
void NBT_init(nbt_t * nbt, uint32_t interval)
{
 800058e:	b580      	push	{r7, lr}
 8000590:	b082      	sub	sp, #8
 8000592:	af00      	add	r7, sp, #0
 8000594:	6078      	str	r0, [r7, #4]
 8000596:	6039      	str	r1, [r7, #0]
	nbt->timeout = interval;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	683a      	ldr	r2, [r7, #0]
 800059c:	601a      	str	r2, [r3, #0]
	nbt->previousMillis = HAL_GetTick();
 800059e:	f000 f9ab 	bl	80008f8 <HAL_GetTick>
 80005a2:	4602      	mov	r2, r0
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	605a      	str	r2, [r3, #4]
}
 80005a8:	bf00      	nop
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}

080005b0 <NBT_handler>:

bool NBT_handler(nbt_t * nbt)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	if(HAL_GetTick()-nbt->previousMillis>nbt->timeout){
 80005b8:	f000 f99e 	bl	80008f8 <HAL_GetTick>
 80005bc:	4602      	mov	r2, r0
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	685b      	ldr	r3, [r3, #4]
 80005c2:	1ad2      	subs	r2, r2, r3
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	429a      	cmp	r2, r3
 80005ca:	d906      	bls.n	80005da <NBT_handler+0x2a>
		nbt->previousMillis = HAL_GetTick();
 80005cc:	f000 f994 	bl	80008f8 <HAL_GetTick>
 80005d0:	4602      	mov	r2, r0
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	605a      	str	r2, [r3, #4]
		return true;
 80005d6:	2301      	movs	r3, #1
 80005d8:	e000      	b.n	80005dc <NBT_handler+0x2c>
	}

	return false;
 80005da:	2300      	movs	r3, #0
}
 80005dc:	4618      	mov	r0, r3
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005ea:	4b0e      	ldr	r3, [pc, #56]	; (8000624 <HAL_MspInit+0x40>)
 80005ec:	699b      	ldr	r3, [r3, #24]
 80005ee:	4a0d      	ldr	r2, [pc, #52]	; (8000624 <HAL_MspInit+0x40>)
 80005f0:	f043 0301 	orr.w	r3, r3, #1
 80005f4:	6193      	str	r3, [r2, #24]
 80005f6:	4b0b      	ldr	r3, [pc, #44]	; (8000624 <HAL_MspInit+0x40>)
 80005f8:	699b      	ldr	r3, [r3, #24]
 80005fa:	f003 0301 	and.w	r3, r3, #1
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000602:	4b08      	ldr	r3, [pc, #32]	; (8000624 <HAL_MspInit+0x40>)
 8000604:	69db      	ldr	r3, [r3, #28]
 8000606:	4a07      	ldr	r2, [pc, #28]	; (8000624 <HAL_MspInit+0x40>)
 8000608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800060c:	61d3      	str	r3, [r2, #28]
 800060e:	4b05      	ldr	r3, [pc, #20]	; (8000624 <HAL_MspInit+0x40>)
 8000610:	69db      	ldr	r3, [r3, #28]
 8000612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000616:	603b      	str	r3, [r7, #0]
 8000618:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800061a:	bf00      	nop
 800061c:	370c      	adds	r7, #12
 800061e:	46bd      	mov	sp, r7
 8000620:	bc80      	pop	{r7}
 8000622:	4770      	bx	lr
 8000624:	40021000 	.word	0x40021000

08000628 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b088      	sub	sp, #32
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000630:	f107 0310 	add.w	r3, r7, #16
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4a1f      	ldr	r2, [pc, #124]	; (80006c0 <HAL_UART_MspInit+0x98>)
 8000644:	4293      	cmp	r3, r2
 8000646:	d137      	bne.n	80006b8 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000648:	4b1e      	ldr	r3, [pc, #120]	; (80006c4 <HAL_UART_MspInit+0x9c>)
 800064a:	69db      	ldr	r3, [r3, #28]
 800064c:	4a1d      	ldr	r2, [pc, #116]	; (80006c4 <HAL_UART_MspInit+0x9c>)
 800064e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000652:	61d3      	str	r3, [r2, #28]
 8000654:	4b1b      	ldr	r3, [pc, #108]	; (80006c4 <HAL_UART_MspInit+0x9c>)
 8000656:	69db      	ldr	r3, [r3, #28]
 8000658:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800065c:	60fb      	str	r3, [r7, #12]
 800065e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000660:	4b18      	ldr	r3, [pc, #96]	; (80006c4 <HAL_UART_MspInit+0x9c>)
 8000662:	699b      	ldr	r3, [r3, #24]
 8000664:	4a17      	ldr	r2, [pc, #92]	; (80006c4 <HAL_UART_MspInit+0x9c>)
 8000666:	f043 0304 	orr.w	r3, r3, #4
 800066a:	6193      	str	r3, [r2, #24]
 800066c:	4b15      	ldr	r3, [pc, #84]	; (80006c4 <HAL_UART_MspInit+0x9c>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	f003 0304 	and.w	r3, r3, #4
 8000674:	60bb      	str	r3, [r7, #8]
 8000676:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000678:	2304      	movs	r3, #4
 800067a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800067c:	2302      	movs	r3, #2
 800067e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000680:	2303      	movs	r3, #3
 8000682:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000684:	f107 0310 	add.w	r3, r7, #16
 8000688:	4619      	mov	r1, r3
 800068a:	480f      	ldr	r0, [pc, #60]	; (80006c8 <HAL_UART_MspInit+0xa0>)
 800068c:	f000 fb54 	bl	8000d38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000690:	2308      	movs	r3, #8
 8000692:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000694:	2300      	movs	r3, #0
 8000696:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000698:	2300      	movs	r3, #0
 800069a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800069c:	f107 0310 	add.w	r3, r7, #16
 80006a0:	4619      	mov	r1, r3
 80006a2:	4809      	ldr	r0, [pc, #36]	; (80006c8 <HAL_UART_MspInit+0xa0>)
 80006a4:	f000 fb48 	bl	8000d38 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80006a8:	2200      	movs	r2, #0
 80006aa:	2100      	movs	r1, #0
 80006ac:	2026      	movs	r0, #38	; 0x26
 80006ae:	f000 fa4c 	bl	8000b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80006b2:	2026      	movs	r0, #38	; 0x26
 80006b4:	f000 fa65 	bl	8000b82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80006b8:	bf00      	nop
 80006ba:	3720      	adds	r7, #32
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40004400 	.word	0x40004400
 80006c4:	40021000 	.word	0x40021000
 80006c8:	40010800 	.word	0x40010800

080006cc <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART2)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a09      	ldr	r2, [pc, #36]	; (8000700 <HAL_UART_MspDeInit+0x34>)
 80006da:	4293      	cmp	r3, r2
 80006dc:	d10c      	bne.n	80006f8 <HAL_UART_MspDeInit+0x2c>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 80006de:	4b09      	ldr	r3, [pc, #36]	; (8000704 <HAL_UART_MspDeInit+0x38>)
 80006e0:	69db      	ldr	r3, [r3, #28]
 80006e2:	4a08      	ldr	r2, [pc, #32]	; (8000704 <HAL_UART_MspDeInit+0x38>)
 80006e4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80006e8:	61d3      	str	r3, [r2, #28]

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 80006ea:	210c      	movs	r1, #12
 80006ec:	4806      	ldr	r0, [pc, #24]	; (8000708 <HAL_UART_MspDeInit+0x3c>)
 80006ee:	f000 fca7 	bl	8001040 <HAL_GPIO_DeInit>

    /* USART2 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80006f2:	2026      	movs	r0, #38	; 0x26
 80006f4:	f000 fa53 	bl	8000b9e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 80006f8:	bf00      	nop
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40004400 	.word	0x40004400
 8000704:	40021000 	.word	0x40021000
 8000708:	40010800 	.word	0x40010800

0800070c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000710:	e7fe      	b.n	8000710 <NMI_Handler+0x4>

08000712 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000712:	b480      	push	{r7}
 8000714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000716:	e7fe      	b.n	8000716 <HardFault_Handler+0x4>

08000718 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800071c:	e7fe      	b.n	800071c <MemManage_Handler+0x4>

0800071e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800071e:	b480      	push	{r7}
 8000720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000722:	e7fe      	b.n	8000722 <BusFault_Handler+0x4>

08000724 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000728:	e7fe      	b.n	8000728 <UsageFault_Handler+0x4>

0800072a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800072a:	b480      	push	{r7}
 800072c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800072e:	bf00      	nop
 8000730:	46bd      	mov	sp, r7
 8000732:	bc80      	pop	{r7}
 8000734:	4770      	bx	lr

08000736 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000736:	b480      	push	{r7}
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800073a:	bf00      	nop
 800073c:	46bd      	mov	sp, r7
 800073e:	bc80      	pop	{r7}
 8000740:	4770      	bx	lr

08000742 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000742:	b480      	push	{r7}
 8000744:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000746:	bf00      	nop
 8000748:	46bd      	mov	sp, r7
 800074a:	bc80      	pop	{r7}
 800074c:	4770      	bx	lr

0800074e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800074e:	b580      	push	{r7, lr}
 8000750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000752:	f000 f8bf 	bl	80008d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
	...

0800075c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000760:	4802      	ldr	r0, [pc, #8]	; (800076c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000762:	f000 fe66 	bl	8001432 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20000f54 	.word	0x20000f54

08000770 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000774:	4802      	ldr	r0, [pc, #8]	; (8000780 <USART2_IRQHandler+0x10>)
 8000776:	f003 f8e9 	bl	800394c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20000208 	.word	0x20000208

08000784 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b086      	sub	sp, #24
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800078c:	4a14      	ldr	r2, [pc, #80]	; (80007e0 <_sbrk+0x5c>)
 800078e:	4b15      	ldr	r3, [pc, #84]	; (80007e4 <_sbrk+0x60>)
 8000790:	1ad3      	subs	r3, r2, r3
 8000792:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000794:	697b      	ldr	r3, [r7, #20]
 8000796:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000798:	4b13      	ldr	r3, [pc, #76]	; (80007e8 <_sbrk+0x64>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d102      	bne.n	80007a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007a0:	4b11      	ldr	r3, [pc, #68]	; (80007e8 <_sbrk+0x64>)
 80007a2:	4a12      	ldr	r2, [pc, #72]	; (80007ec <_sbrk+0x68>)
 80007a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007a6:	4b10      	ldr	r3, [pc, #64]	; (80007e8 <_sbrk+0x64>)
 80007a8:	681a      	ldr	r2, [r3, #0]
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	4413      	add	r3, r2
 80007ae:	693a      	ldr	r2, [r7, #16]
 80007b0:	429a      	cmp	r2, r3
 80007b2:	d207      	bcs.n	80007c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007b4:	f008 f9f0 	bl	8008b98 <__errno>
 80007b8:	4603      	mov	r3, r0
 80007ba:	220c      	movs	r2, #12
 80007bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007be:	f04f 33ff 	mov.w	r3, #4294967295
 80007c2:	e009      	b.n	80007d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007c4:	4b08      	ldr	r3, [pc, #32]	; (80007e8 <_sbrk+0x64>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007ca:	4b07      	ldr	r3, [pc, #28]	; (80007e8 <_sbrk+0x64>)
 80007cc:	681a      	ldr	r2, [r3, #0]
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	4413      	add	r3, r2
 80007d2:	4a05      	ldr	r2, [pc, #20]	; (80007e8 <_sbrk+0x64>)
 80007d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007d6:	68fb      	ldr	r3, [r7, #12]
}
 80007d8:	4618      	mov	r0, r3
 80007da:	3718      	adds	r7, #24
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	20005000 	.word	0x20005000
 80007e4:	00000400 	.word	0x00000400
 80007e8:	20000284 	.word	0x20000284
 80007ec:	20001478 	.word	0x20001478

080007f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007f4:	bf00      	nop
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bc80      	pop	{r7}
 80007fa:	4770      	bx	lr

080007fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007fc:	f7ff fff8 	bl	80007f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000800:	480b      	ldr	r0, [pc, #44]	; (8000830 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000802:	490c      	ldr	r1, [pc, #48]	; (8000834 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000804:	4a0c      	ldr	r2, [pc, #48]	; (8000838 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000806:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000808:	e002      	b.n	8000810 <LoopCopyDataInit>

0800080a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800080a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800080c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800080e:	3304      	adds	r3, #4

08000810 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000810:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000812:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000814:	d3f9      	bcc.n	800080a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000816:	4a09      	ldr	r2, [pc, #36]	; (800083c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000818:	4c09      	ldr	r4, [pc, #36]	; (8000840 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800081a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800081c:	e001      	b.n	8000822 <LoopFillZerobss>

0800081e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800081e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000820:	3204      	adds	r2, #4

08000822 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000822:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000824:	d3fb      	bcc.n	800081e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000826:	f008 f9bd 	bl	8008ba4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800082a:	f7ff fdf5 	bl	8000418 <main>
  bx lr
 800082e:	4770      	bx	lr
  ldr r0, =_sdata
 8000830:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000834:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8000838:	080095e0 	.word	0x080095e0
  ldr r2, =_sbss
 800083c:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8000840:	20001474 	.word	0x20001474

08000844 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000844:	e7fe      	b.n	8000844 <ADC1_2_IRQHandler>
	...

08000848 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800084c:	4b08      	ldr	r3, [pc, #32]	; (8000870 <HAL_Init+0x28>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a07      	ldr	r2, [pc, #28]	; (8000870 <HAL_Init+0x28>)
 8000852:	f043 0310 	orr.w	r3, r3, #16
 8000856:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000858:	2003      	movs	r0, #3
 800085a:	f000 f96b 	bl	8000b34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800085e:	200f      	movs	r0, #15
 8000860:	f000 f808 	bl	8000874 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000864:	f7ff febe 	bl	80005e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000868:	2300      	movs	r3, #0
}
 800086a:	4618      	mov	r0, r3
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40022000 	.word	0x40022000

08000874 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800087c:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <HAL_InitTick+0x54>)
 800087e:	681a      	ldr	r2, [r3, #0]
 8000880:	4b12      	ldr	r3, [pc, #72]	; (80008cc <HAL_InitTick+0x58>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	4619      	mov	r1, r3
 8000886:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800088a:	fbb3 f3f1 	udiv	r3, r3, r1
 800088e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000892:	4618      	mov	r0, r3
 8000894:	f000 f991 	bl	8000bba <HAL_SYSTICK_Config>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800089e:	2301      	movs	r3, #1
 80008a0:	e00e      	b.n	80008c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	2b0f      	cmp	r3, #15
 80008a6:	d80a      	bhi.n	80008be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008a8:	2200      	movs	r2, #0
 80008aa:	6879      	ldr	r1, [r7, #4]
 80008ac:	f04f 30ff 	mov.w	r0, #4294967295
 80008b0:	f000 f94b 	bl	8000b4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008b4:	4a06      	ldr	r2, [pc, #24]	; (80008d0 <HAL_InitTick+0x5c>)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008ba:	2300      	movs	r3, #0
 80008bc:	e000      	b.n	80008c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008be:	2301      	movs	r3, #1
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	3708      	adds	r7, #8
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	2000000c 	.word	0x2000000c
 80008cc:	20000014 	.word	0x20000014
 80008d0:	20000010 	.word	0x20000010

080008d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008d8:	4b05      	ldr	r3, [pc, #20]	; (80008f0 <HAL_IncTick+0x1c>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	461a      	mov	r2, r3
 80008de:	4b05      	ldr	r3, [pc, #20]	; (80008f4 <HAL_IncTick+0x20>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4413      	add	r3, r2
 80008e4:	4a03      	ldr	r2, [pc, #12]	; (80008f4 <HAL_IncTick+0x20>)
 80008e6:	6013      	str	r3, [r2, #0]
}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bc80      	pop	{r7}
 80008ee:	4770      	bx	lr
 80008f0:	20000014 	.word	0x20000014
 80008f4:	20000288 	.word	0x20000288

080008f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  return uwTick;
 80008fc:	4b02      	ldr	r3, [pc, #8]	; (8000908 <HAL_GetTick+0x10>)
 80008fe:	681b      	ldr	r3, [r3, #0]
}
 8000900:	4618      	mov	r0, r3
 8000902:	46bd      	mov	sp, r7
 8000904:	bc80      	pop	{r7}
 8000906:	4770      	bx	lr
 8000908:	20000288 	.word	0x20000288

0800090c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000914:	f7ff fff0 	bl	80008f8 <HAL_GetTick>
 8000918:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000924:	d005      	beq.n	8000932 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000926:	4b0a      	ldr	r3, [pc, #40]	; (8000950 <HAL_Delay+0x44>)
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	461a      	mov	r2, r3
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	4413      	add	r3, r2
 8000930:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000932:	bf00      	nop
 8000934:	f7ff ffe0 	bl	80008f8 <HAL_GetTick>
 8000938:	4602      	mov	r2, r0
 800093a:	68bb      	ldr	r3, [r7, #8]
 800093c:	1ad3      	subs	r3, r2, r3
 800093e:	68fa      	ldr	r2, [r7, #12]
 8000940:	429a      	cmp	r2, r3
 8000942:	d8f7      	bhi.n	8000934 <HAL_Delay+0x28>
  {
  }
}
 8000944:	bf00      	nop
 8000946:	bf00      	nop
 8000948:	3710      	adds	r7, #16
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	20000014 	.word	0x20000014

08000954 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000954:	b480      	push	{r7}
 8000956:	b085      	sub	sp, #20
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	f003 0307 	and.w	r3, r3, #7
 8000962:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000964:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <__NVIC_SetPriorityGrouping+0x44>)
 8000966:	68db      	ldr	r3, [r3, #12]
 8000968:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800096a:	68ba      	ldr	r2, [r7, #8]
 800096c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000970:	4013      	ands	r3, r2
 8000972:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800097c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000980:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000984:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000986:	4a04      	ldr	r2, [pc, #16]	; (8000998 <__NVIC_SetPriorityGrouping+0x44>)
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	60d3      	str	r3, [r2, #12]
}
 800098c:	bf00      	nop
 800098e:	3714      	adds	r7, #20
 8000990:	46bd      	mov	sp, r7
 8000992:	bc80      	pop	{r7}
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	e000ed00 	.word	0xe000ed00

0800099c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009a0:	4b04      	ldr	r3, [pc, #16]	; (80009b4 <__NVIC_GetPriorityGrouping+0x18>)
 80009a2:	68db      	ldr	r3, [r3, #12]
 80009a4:	0a1b      	lsrs	r3, r3, #8
 80009a6:	f003 0307 	and.w	r3, r3, #7
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bc80      	pop	{r7}
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	e000ed00 	.word	0xe000ed00

080009b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	4603      	mov	r3, r0
 80009c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	db0b      	blt.n	80009e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	f003 021f 	and.w	r2, r3, #31
 80009d0:	4906      	ldr	r1, [pc, #24]	; (80009ec <__NVIC_EnableIRQ+0x34>)
 80009d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d6:	095b      	lsrs	r3, r3, #5
 80009d8:	2001      	movs	r0, #1
 80009da:	fa00 f202 	lsl.w	r2, r0, r2
 80009de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009e2:	bf00      	nop
 80009e4:	370c      	adds	r7, #12
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bc80      	pop	{r7}
 80009ea:	4770      	bx	lr
 80009ec:	e000e100 	.word	0xe000e100

080009f0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	4603      	mov	r3, r0
 80009f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	db12      	blt.n	8000a28 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a02:	79fb      	ldrb	r3, [r7, #7]
 8000a04:	f003 021f 	and.w	r2, r3, #31
 8000a08:	490a      	ldr	r1, [pc, #40]	; (8000a34 <__NVIC_DisableIRQ+0x44>)
 8000a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0e:	095b      	lsrs	r3, r3, #5
 8000a10:	2001      	movs	r0, #1
 8000a12:	fa00 f202 	lsl.w	r2, r0, r2
 8000a16:	3320      	adds	r3, #32
 8000a18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000a1c:	f3bf 8f4f 	dsb	sy
}
 8000a20:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a22:	f3bf 8f6f 	isb	sy
}
 8000a26:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000a28:	bf00      	nop
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bc80      	pop	{r7}
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	e000e100 	.word	0xe000e100

08000a38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	6039      	str	r1, [r7, #0]
 8000a42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	db0a      	blt.n	8000a62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	b2da      	uxtb	r2, r3
 8000a50:	490c      	ldr	r1, [pc, #48]	; (8000a84 <__NVIC_SetPriority+0x4c>)
 8000a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a56:	0112      	lsls	r2, r2, #4
 8000a58:	b2d2      	uxtb	r2, r2
 8000a5a:	440b      	add	r3, r1
 8000a5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a60:	e00a      	b.n	8000a78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	b2da      	uxtb	r2, r3
 8000a66:	4908      	ldr	r1, [pc, #32]	; (8000a88 <__NVIC_SetPriority+0x50>)
 8000a68:	79fb      	ldrb	r3, [r7, #7]
 8000a6a:	f003 030f 	and.w	r3, r3, #15
 8000a6e:	3b04      	subs	r3, #4
 8000a70:	0112      	lsls	r2, r2, #4
 8000a72:	b2d2      	uxtb	r2, r2
 8000a74:	440b      	add	r3, r1
 8000a76:	761a      	strb	r2, [r3, #24]
}
 8000a78:	bf00      	nop
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bc80      	pop	{r7}
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	e000e100 	.word	0xe000e100
 8000a88:	e000ed00 	.word	0xe000ed00

08000a8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b089      	sub	sp, #36	; 0x24
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	60f8      	str	r0, [r7, #12]
 8000a94:	60b9      	str	r1, [r7, #8]
 8000a96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	f003 0307 	and.w	r3, r3, #7
 8000a9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aa0:	69fb      	ldr	r3, [r7, #28]
 8000aa2:	f1c3 0307 	rsb	r3, r3, #7
 8000aa6:	2b04      	cmp	r3, #4
 8000aa8:	bf28      	it	cs
 8000aaa:	2304      	movcs	r3, #4
 8000aac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aae:	69fb      	ldr	r3, [r7, #28]
 8000ab0:	3304      	adds	r3, #4
 8000ab2:	2b06      	cmp	r3, #6
 8000ab4:	d902      	bls.n	8000abc <NVIC_EncodePriority+0x30>
 8000ab6:	69fb      	ldr	r3, [r7, #28]
 8000ab8:	3b03      	subs	r3, #3
 8000aba:	e000      	b.n	8000abe <NVIC_EncodePriority+0x32>
 8000abc:	2300      	movs	r3, #0
 8000abe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ac4:	69bb      	ldr	r3, [r7, #24]
 8000ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aca:	43da      	mvns	r2, r3
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	401a      	ands	r2, r3
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ad4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	fa01 f303 	lsl.w	r3, r1, r3
 8000ade:	43d9      	mvns	r1, r3
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae4:	4313      	orrs	r3, r2
         );
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3724      	adds	r7, #36	; 0x24
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bc80      	pop	{r7}
 8000aee:	4770      	bx	lr

08000af0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	3b01      	subs	r3, #1
 8000afc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b00:	d301      	bcc.n	8000b06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b02:	2301      	movs	r3, #1
 8000b04:	e00f      	b.n	8000b26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b06:	4a0a      	ldr	r2, [pc, #40]	; (8000b30 <SysTick_Config+0x40>)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	3b01      	subs	r3, #1
 8000b0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b0e:	210f      	movs	r1, #15
 8000b10:	f04f 30ff 	mov.w	r0, #4294967295
 8000b14:	f7ff ff90 	bl	8000a38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b18:	4b05      	ldr	r3, [pc, #20]	; (8000b30 <SysTick_Config+0x40>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b1e:	4b04      	ldr	r3, [pc, #16]	; (8000b30 <SysTick_Config+0x40>)
 8000b20:	2207      	movs	r2, #7
 8000b22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b24:	2300      	movs	r3, #0
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	e000e010 	.word	0xe000e010

08000b34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b3c:	6878      	ldr	r0, [r7, #4]
 8000b3e:	f7ff ff09 	bl	8000954 <__NVIC_SetPriorityGrouping>
}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b086      	sub	sp, #24
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	4603      	mov	r3, r0
 8000b52:	60b9      	str	r1, [r7, #8]
 8000b54:	607a      	str	r2, [r7, #4]
 8000b56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b5c:	f7ff ff1e 	bl	800099c <__NVIC_GetPriorityGrouping>
 8000b60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b62:	687a      	ldr	r2, [r7, #4]
 8000b64:	68b9      	ldr	r1, [r7, #8]
 8000b66:	6978      	ldr	r0, [r7, #20]
 8000b68:	f7ff ff90 	bl	8000a8c <NVIC_EncodePriority>
 8000b6c:	4602      	mov	r2, r0
 8000b6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b72:	4611      	mov	r1, r2
 8000b74:	4618      	mov	r0, r3
 8000b76:	f7ff ff5f 	bl	8000a38 <__NVIC_SetPriority>
}
 8000b7a:	bf00      	nop
 8000b7c:	3718      	adds	r7, #24
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b82:	b580      	push	{r7, lr}
 8000b84:	b082      	sub	sp, #8
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	4603      	mov	r3, r0
 8000b8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b90:	4618      	mov	r0, r3
 8000b92:	f7ff ff11 	bl	80009b8 <__NVIC_EnableIRQ>
}
 8000b96:	bf00      	nop
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	b082      	sub	sp, #8
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8000ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bac:	4618      	mov	r0, r3
 8000bae:	f7ff ff1f 	bl	80009f0 <__NVIC_DisableIRQ>
}
 8000bb2:	bf00      	nop
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b082      	sub	sp, #8
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bc2:	6878      	ldr	r0, [r7, #4]
 8000bc4:	f7ff ff94 	bl	8000af0 <SysTick_Config>
 8000bc8:	4603      	mov	r3, r0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	b085      	sub	sp, #20
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	2b02      	cmp	r3, #2
 8000be8:	d008      	beq.n	8000bfc <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2204      	movs	r2, #4
 8000bee:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	e020      	b.n	8000c3e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f022 020e 	bic.w	r2, r2, #14
 8000c0a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f022 0201 	bic.w	r2, r2, #1
 8000c1a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c24:	2101      	movs	r1, #1
 8000c26:	fa01 f202 	lsl.w	r2, r1, r2
 8000c2a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2201      	movs	r2, #1
 8000c30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2200      	movs	r2, #0
 8000c38:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3714      	adds	r7, #20
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bc80      	pop	{r7}
 8000c46:	4770      	bx	lr

08000c48 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c50:	2300      	movs	r3, #0
 8000c52:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	2b02      	cmp	r3, #2
 8000c5e:	d005      	beq.n	8000c6c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2204      	movs	r2, #4
 8000c64:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000c66:	2301      	movs	r3, #1
 8000c68:	73fb      	strb	r3, [r7, #15]
 8000c6a:	e051      	b.n	8000d10 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f022 020e 	bic.w	r2, r2, #14
 8000c7a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f022 0201 	bic.w	r2, r2, #1
 8000c8a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a22      	ldr	r2, [pc, #136]	; (8000d1c <HAL_DMA_Abort_IT+0xd4>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d029      	beq.n	8000cea <HAL_DMA_Abort_IT+0xa2>
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4a21      	ldr	r2, [pc, #132]	; (8000d20 <HAL_DMA_Abort_IT+0xd8>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d022      	beq.n	8000ce6 <HAL_DMA_Abort_IT+0x9e>
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a1f      	ldr	r2, [pc, #124]	; (8000d24 <HAL_DMA_Abort_IT+0xdc>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d01a      	beq.n	8000ce0 <HAL_DMA_Abort_IT+0x98>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a1e      	ldr	r2, [pc, #120]	; (8000d28 <HAL_DMA_Abort_IT+0xe0>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d012      	beq.n	8000cda <HAL_DMA_Abort_IT+0x92>
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a1c      	ldr	r2, [pc, #112]	; (8000d2c <HAL_DMA_Abort_IT+0xe4>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d00a      	beq.n	8000cd4 <HAL_DMA_Abort_IT+0x8c>
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a1b      	ldr	r2, [pc, #108]	; (8000d30 <HAL_DMA_Abort_IT+0xe8>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d102      	bne.n	8000cce <HAL_DMA_Abort_IT+0x86>
 8000cc8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000ccc:	e00e      	b.n	8000cec <HAL_DMA_Abort_IT+0xa4>
 8000cce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000cd2:	e00b      	b.n	8000cec <HAL_DMA_Abort_IT+0xa4>
 8000cd4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cd8:	e008      	b.n	8000cec <HAL_DMA_Abort_IT+0xa4>
 8000cda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cde:	e005      	b.n	8000cec <HAL_DMA_Abort_IT+0xa4>
 8000ce0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ce4:	e002      	b.n	8000cec <HAL_DMA_Abort_IT+0xa4>
 8000ce6:	2310      	movs	r3, #16
 8000ce8:	e000      	b.n	8000cec <HAL_DMA_Abort_IT+0xa4>
 8000cea:	2301      	movs	r3, #1
 8000cec:	4a11      	ldr	r2, [pc, #68]	; (8000d34 <HAL_DMA_Abort_IT+0xec>)
 8000cee:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d003      	beq.n	8000d10 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d0c:	6878      	ldr	r0, [r7, #4]
 8000d0e:	4798      	blx	r3
    } 
  }
  return status;
 8000d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3710      	adds	r7, #16
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40020008 	.word	0x40020008
 8000d20:	4002001c 	.word	0x4002001c
 8000d24:	40020030 	.word	0x40020030
 8000d28:	40020044 	.word	0x40020044
 8000d2c:	40020058 	.word	0x40020058
 8000d30:	4002006c 	.word	0x4002006c
 8000d34:	40020000 	.word	0x40020000

08000d38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b08b      	sub	sp, #44	; 0x2c
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d42:	2300      	movs	r3, #0
 8000d44:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d46:	2300      	movs	r3, #0
 8000d48:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d4a:	e169      	b.n	8001020 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	69fa      	ldr	r2, [r7, #28]
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d60:	69ba      	ldr	r2, [r7, #24]
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	f040 8158 	bne.w	800101a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	4a9a      	ldr	r2, [pc, #616]	; (8000fd8 <HAL_GPIO_Init+0x2a0>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d05e      	beq.n	8000e32 <HAL_GPIO_Init+0xfa>
 8000d74:	4a98      	ldr	r2, [pc, #608]	; (8000fd8 <HAL_GPIO_Init+0x2a0>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d875      	bhi.n	8000e66 <HAL_GPIO_Init+0x12e>
 8000d7a:	4a98      	ldr	r2, [pc, #608]	; (8000fdc <HAL_GPIO_Init+0x2a4>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d058      	beq.n	8000e32 <HAL_GPIO_Init+0xfa>
 8000d80:	4a96      	ldr	r2, [pc, #600]	; (8000fdc <HAL_GPIO_Init+0x2a4>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d86f      	bhi.n	8000e66 <HAL_GPIO_Init+0x12e>
 8000d86:	4a96      	ldr	r2, [pc, #600]	; (8000fe0 <HAL_GPIO_Init+0x2a8>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d052      	beq.n	8000e32 <HAL_GPIO_Init+0xfa>
 8000d8c:	4a94      	ldr	r2, [pc, #592]	; (8000fe0 <HAL_GPIO_Init+0x2a8>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d869      	bhi.n	8000e66 <HAL_GPIO_Init+0x12e>
 8000d92:	4a94      	ldr	r2, [pc, #592]	; (8000fe4 <HAL_GPIO_Init+0x2ac>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d04c      	beq.n	8000e32 <HAL_GPIO_Init+0xfa>
 8000d98:	4a92      	ldr	r2, [pc, #584]	; (8000fe4 <HAL_GPIO_Init+0x2ac>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d863      	bhi.n	8000e66 <HAL_GPIO_Init+0x12e>
 8000d9e:	4a92      	ldr	r2, [pc, #584]	; (8000fe8 <HAL_GPIO_Init+0x2b0>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d046      	beq.n	8000e32 <HAL_GPIO_Init+0xfa>
 8000da4:	4a90      	ldr	r2, [pc, #576]	; (8000fe8 <HAL_GPIO_Init+0x2b0>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d85d      	bhi.n	8000e66 <HAL_GPIO_Init+0x12e>
 8000daa:	2b12      	cmp	r3, #18
 8000dac:	d82a      	bhi.n	8000e04 <HAL_GPIO_Init+0xcc>
 8000dae:	2b12      	cmp	r3, #18
 8000db0:	d859      	bhi.n	8000e66 <HAL_GPIO_Init+0x12e>
 8000db2:	a201      	add	r2, pc, #4	; (adr r2, 8000db8 <HAL_GPIO_Init+0x80>)
 8000db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000db8:	08000e33 	.word	0x08000e33
 8000dbc:	08000e0d 	.word	0x08000e0d
 8000dc0:	08000e1f 	.word	0x08000e1f
 8000dc4:	08000e61 	.word	0x08000e61
 8000dc8:	08000e67 	.word	0x08000e67
 8000dcc:	08000e67 	.word	0x08000e67
 8000dd0:	08000e67 	.word	0x08000e67
 8000dd4:	08000e67 	.word	0x08000e67
 8000dd8:	08000e67 	.word	0x08000e67
 8000ddc:	08000e67 	.word	0x08000e67
 8000de0:	08000e67 	.word	0x08000e67
 8000de4:	08000e67 	.word	0x08000e67
 8000de8:	08000e67 	.word	0x08000e67
 8000dec:	08000e67 	.word	0x08000e67
 8000df0:	08000e67 	.word	0x08000e67
 8000df4:	08000e67 	.word	0x08000e67
 8000df8:	08000e67 	.word	0x08000e67
 8000dfc:	08000e15 	.word	0x08000e15
 8000e00:	08000e29 	.word	0x08000e29
 8000e04:	4a79      	ldr	r2, [pc, #484]	; (8000fec <HAL_GPIO_Init+0x2b4>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d013      	beq.n	8000e32 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e0a:	e02c      	b.n	8000e66 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	623b      	str	r3, [r7, #32]
          break;
 8000e12:	e029      	b.n	8000e68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	3304      	adds	r3, #4
 8000e1a:	623b      	str	r3, [r7, #32]
          break;
 8000e1c:	e024      	b.n	8000e68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	68db      	ldr	r3, [r3, #12]
 8000e22:	3308      	adds	r3, #8
 8000e24:	623b      	str	r3, [r7, #32]
          break;
 8000e26:	e01f      	b.n	8000e68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	330c      	adds	r3, #12
 8000e2e:	623b      	str	r3, [r7, #32]
          break;
 8000e30:	e01a      	b.n	8000e68 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	689b      	ldr	r3, [r3, #8]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d102      	bne.n	8000e40 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e3a:	2304      	movs	r3, #4
 8000e3c:	623b      	str	r3, [r7, #32]
          break;
 8000e3e:	e013      	b.n	8000e68 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	689b      	ldr	r3, [r3, #8]
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d105      	bne.n	8000e54 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e48:	2308      	movs	r3, #8
 8000e4a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	69fa      	ldr	r2, [r7, #28]
 8000e50:	611a      	str	r2, [r3, #16]
          break;
 8000e52:	e009      	b.n	8000e68 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e54:	2308      	movs	r3, #8
 8000e56:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	69fa      	ldr	r2, [r7, #28]
 8000e5c:	615a      	str	r2, [r3, #20]
          break;
 8000e5e:	e003      	b.n	8000e68 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e60:	2300      	movs	r3, #0
 8000e62:	623b      	str	r3, [r7, #32]
          break;
 8000e64:	e000      	b.n	8000e68 <HAL_GPIO_Init+0x130>
          break;
 8000e66:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	2bff      	cmp	r3, #255	; 0xff
 8000e6c:	d801      	bhi.n	8000e72 <HAL_GPIO_Init+0x13a>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	e001      	b.n	8000e76 <HAL_GPIO_Init+0x13e>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	3304      	adds	r3, #4
 8000e76:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e78:	69bb      	ldr	r3, [r7, #24]
 8000e7a:	2bff      	cmp	r3, #255	; 0xff
 8000e7c:	d802      	bhi.n	8000e84 <HAL_GPIO_Init+0x14c>
 8000e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	e002      	b.n	8000e8a <HAL_GPIO_Init+0x152>
 8000e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e86:	3b08      	subs	r3, #8
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	210f      	movs	r1, #15
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	fa01 f303 	lsl.w	r3, r1, r3
 8000e98:	43db      	mvns	r3, r3
 8000e9a:	401a      	ands	r2, r3
 8000e9c:	6a39      	ldr	r1, [r7, #32]
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea4:	431a      	orrs	r2, r3
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	f000 80b1 	beq.w	800101a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000eb8:	4b4d      	ldr	r3, [pc, #308]	; (8000ff0 <HAL_GPIO_Init+0x2b8>)
 8000eba:	699b      	ldr	r3, [r3, #24]
 8000ebc:	4a4c      	ldr	r2, [pc, #304]	; (8000ff0 <HAL_GPIO_Init+0x2b8>)
 8000ebe:	f043 0301 	orr.w	r3, r3, #1
 8000ec2:	6193      	str	r3, [r2, #24]
 8000ec4:	4b4a      	ldr	r3, [pc, #296]	; (8000ff0 <HAL_GPIO_Init+0x2b8>)
 8000ec6:	699b      	ldr	r3, [r3, #24]
 8000ec8:	f003 0301 	and.w	r3, r3, #1
 8000ecc:	60bb      	str	r3, [r7, #8]
 8000ece:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ed0:	4a48      	ldr	r2, [pc, #288]	; (8000ff4 <HAL_GPIO_Init+0x2bc>)
 8000ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed4:	089b      	lsrs	r3, r3, #2
 8000ed6:	3302      	adds	r3, #2
 8000ed8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000edc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee0:	f003 0303 	and.w	r3, r3, #3
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	220f      	movs	r2, #15
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	43db      	mvns	r3, r3
 8000eee:	68fa      	ldr	r2, [r7, #12]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	4a40      	ldr	r2, [pc, #256]	; (8000ff8 <HAL_GPIO_Init+0x2c0>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d013      	beq.n	8000f24 <HAL_GPIO_Init+0x1ec>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	4a3f      	ldr	r2, [pc, #252]	; (8000ffc <HAL_GPIO_Init+0x2c4>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d00d      	beq.n	8000f20 <HAL_GPIO_Init+0x1e8>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	4a3e      	ldr	r2, [pc, #248]	; (8001000 <HAL_GPIO_Init+0x2c8>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d007      	beq.n	8000f1c <HAL_GPIO_Init+0x1e4>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	4a3d      	ldr	r2, [pc, #244]	; (8001004 <HAL_GPIO_Init+0x2cc>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d101      	bne.n	8000f18 <HAL_GPIO_Init+0x1e0>
 8000f14:	2303      	movs	r3, #3
 8000f16:	e006      	b.n	8000f26 <HAL_GPIO_Init+0x1ee>
 8000f18:	2304      	movs	r3, #4
 8000f1a:	e004      	b.n	8000f26 <HAL_GPIO_Init+0x1ee>
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	e002      	b.n	8000f26 <HAL_GPIO_Init+0x1ee>
 8000f20:	2301      	movs	r3, #1
 8000f22:	e000      	b.n	8000f26 <HAL_GPIO_Init+0x1ee>
 8000f24:	2300      	movs	r3, #0
 8000f26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f28:	f002 0203 	and.w	r2, r2, #3
 8000f2c:	0092      	lsls	r2, r2, #2
 8000f2e:	4093      	lsls	r3, r2
 8000f30:	68fa      	ldr	r2, [r7, #12]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f36:	492f      	ldr	r1, [pc, #188]	; (8000ff4 <HAL_GPIO_Init+0x2bc>)
 8000f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f3a:	089b      	lsrs	r3, r3, #2
 8000f3c:	3302      	adds	r3, #2
 8000f3e:	68fa      	ldr	r2, [r7, #12]
 8000f40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d006      	beq.n	8000f5e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f50:	4b2d      	ldr	r3, [pc, #180]	; (8001008 <HAL_GPIO_Init+0x2d0>)
 8000f52:	689a      	ldr	r2, [r3, #8]
 8000f54:	492c      	ldr	r1, [pc, #176]	; (8001008 <HAL_GPIO_Init+0x2d0>)
 8000f56:	69bb      	ldr	r3, [r7, #24]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	608b      	str	r3, [r1, #8]
 8000f5c:	e006      	b.n	8000f6c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f5e:	4b2a      	ldr	r3, [pc, #168]	; (8001008 <HAL_GPIO_Init+0x2d0>)
 8000f60:	689a      	ldr	r2, [r3, #8]
 8000f62:	69bb      	ldr	r3, [r7, #24]
 8000f64:	43db      	mvns	r3, r3
 8000f66:	4928      	ldr	r1, [pc, #160]	; (8001008 <HAL_GPIO_Init+0x2d0>)
 8000f68:	4013      	ands	r3, r2
 8000f6a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d006      	beq.n	8000f86 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f78:	4b23      	ldr	r3, [pc, #140]	; (8001008 <HAL_GPIO_Init+0x2d0>)
 8000f7a:	68da      	ldr	r2, [r3, #12]
 8000f7c:	4922      	ldr	r1, [pc, #136]	; (8001008 <HAL_GPIO_Init+0x2d0>)
 8000f7e:	69bb      	ldr	r3, [r7, #24]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	60cb      	str	r3, [r1, #12]
 8000f84:	e006      	b.n	8000f94 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f86:	4b20      	ldr	r3, [pc, #128]	; (8001008 <HAL_GPIO_Init+0x2d0>)
 8000f88:	68da      	ldr	r2, [r3, #12]
 8000f8a:	69bb      	ldr	r3, [r7, #24]
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	491e      	ldr	r1, [pc, #120]	; (8001008 <HAL_GPIO_Init+0x2d0>)
 8000f90:	4013      	ands	r3, r2
 8000f92:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d006      	beq.n	8000fae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000fa0:	4b19      	ldr	r3, [pc, #100]	; (8001008 <HAL_GPIO_Init+0x2d0>)
 8000fa2:	685a      	ldr	r2, [r3, #4]
 8000fa4:	4918      	ldr	r1, [pc, #96]	; (8001008 <HAL_GPIO_Init+0x2d0>)
 8000fa6:	69bb      	ldr	r3, [r7, #24]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	604b      	str	r3, [r1, #4]
 8000fac:	e006      	b.n	8000fbc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000fae:	4b16      	ldr	r3, [pc, #88]	; (8001008 <HAL_GPIO_Init+0x2d0>)
 8000fb0:	685a      	ldr	r2, [r3, #4]
 8000fb2:	69bb      	ldr	r3, [r7, #24]
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	4914      	ldr	r1, [pc, #80]	; (8001008 <HAL_GPIO_Init+0x2d0>)
 8000fb8:	4013      	ands	r3, r2
 8000fba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d021      	beq.n	800100c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000fc8:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <HAL_GPIO_Init+0x2d0>)
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	490e      	ldr	r1, [pc, #56]	; (8001008 <HAL_GPIO_Init+0x2d0>)
 8000fce:	69bb      	ldr	r3, [r7, #24]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	600b      	str	r3, [r1, #0]
 8000fd4:	e021      	b.n	800101a <HAL_GPIO_Init+0x2e2>
 8000fd6:	bf00      	nop
 8000fd8:	10320000 	.word	0x10320000
 8000fdc:	10310000 	.word	0x10310000
 8000fe0:	10220000 	.word	0x10220000
 8000fe4:	10210000 	.word	0x10210000
 8000fe8:	10120000 	.word	0x10120000
 8000fec:	10110000 	.word	0x10110000
 8000ff0:	40021000 	.word	0x40021000
 8000ff4:	40010000 	.word	0x40010000
 8000ff8:	40010800 	.word	0x40010800
 8000ffc:	40010c00 	.word	0x40010c00
 8001000:	40011000 	.word	0x40011000
 8001004:	40011400 	.word	0x40011400
 8001008:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800100c:	4b0b      	ldr	r3, [pc, #44]	; (800103c <HAL_GPIO_Init+0x304>)
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	43db      	mvns	r3, r3
 8001014:	4909      	ldr	r1, [pc, #36]	; (800103c <HAL_GPIO_Init+0x304>)
 8001016:	4013      	ands	r3, r2
 8001018:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800101a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800101c:	3301      	adds	r3, #1
 800101e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001026:	fa22 f303 	lsr.w	r3, r2, r3
 800102a:	2b00      	cmp	r3, #0
 800102c:	f47f ae8e 	bne.w	8000d4c <HAL_GPIO_Init+0x14>
  }
}
 8001030:	bf00      	nop
 8001032:	bf00      	nop
 8001034:	372c      	adds	r7, #44	; 0x2c
 8001036:	46bd      	mov	sp, r7
 8001038:	bc80      	pop	{r7}
 800103a:	4770      	bx	lr
 800103c:	40010400 	.word	0x40010400

08001040 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001040:	b480      	push	{r7}
 8001042:	b089      	sub	sp, #36	; 0x24
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800104a:	2300      	movs	r3, #0
 800104c:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800104e:	e09a      	b.n	8001186 <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001050:	2201      	movs	r2, #1
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	683a      	ldr	r2, [r7, #0]
 800105a:	4013      	ands	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	2b00      	cmp	r3, #0
 8001062:	f000 808d 	beq.w	8001180 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8001066:	4a4e      	ldr	r2, [pc, #312]	; (80011a0 <HAL_GPIO_DeInit+0x160>)
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	089b      	lsrs	r3, r3, #2
 800106c:	3302      	adds	r3, #2
 800106e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001072:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	f003 0303 	and.w	r3, r3, #3
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	220f      	movs	r2, #15
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	697a      	ldr	r2, [r7, #20]
 8001084:	4013      	ands	r3, r2
 8001086:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	4a46      	ldr	r2, [pc, #280]	; (80011a4 <HAL_GPIO_DeInit+0x164>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d013      	beq.n	80010b8 <HAL_GPIO_DeInit+0x78>
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	4a45      	ldr	r2, [pc, #276]	; (80011a8 <HAL_GPIO_DeInit+0x168>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d00d      	beq.n	80010b4 <HAL_GPIO_DeInit+0x74>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	4a44      	ldr	r2, [pc, #272]	; (80011ac <HAL_GPIO_DeInit+0x16c>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d007      	beq.n	80010b0 <HAL_GPIO_DeInit+0x70>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	4a43      	ldr	r2, [pc, #268]	; (80011b0 <HAL_GPIO_DeInit+0x170>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d101      	bne.n	80010ac <HAL_GPIO_DeInit+0x6c>
 80010a8:	2303      	movs	r3, #3
 80010aa:	e006      	b.n	80010ba <HAL_GPIO_DeInit+0x7a>
 80010ac:	2304      	movs	r3, #4
 80010ae:	e004      	b.n	80010ba <HAL_GPIO_DeInit+0x7a>
 80010b0:	2302      	movs	r3, #2
 80010b2:	e002      	b.n	80010ba <HAL_GPIO_DeInit+0x7a>
 80010b4:	2301      	movs	r3, #1
 80010b6:	e000      	b.n	80010ba <HAL_GPIO_DeInit+0x7a>
 80010b8:	2300      	movs	r3, #0
 80010ba:	69fa      	ldr	r2, [r7, #28]
 80010bc:	f002 0203 	and.w	r2, r2, #3
 80010c0:	0092      	lsls	r2, r2, #2
 80010c2:	4093      	lsls	r3, r2
 80010c4:	697a      	ldr	r2, [r7, #20]
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d132      	bne.n	8001130 <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80010ca:	4b3a      	ldr	r3, [pc, #232]	; (80011b4 <HAL_GPIO_DeInit+0x174>)
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	69bb      	ldr	r3, [r7, #24]
 80010d0:	43db      	mvns	r3, r3
 80010d2:	4938      	ldr	r1, [pc, #224]	; (80011b4 <HAL_GPIO_DeInit+0x174>)
 80010d4:	4013      	ands	r3, r2
 80010d6:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80010d8:	4b36      	ldr	r3, [pc, #216]	; (80011b4 <HAL_GPIO_DeInit+0x174>)
 80010da:	685a      	ldr	r2, [r3, #4]
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	43db      	mvns	r3, r3
 80010e0:	4934      	ldr	r1, [pc, #208]	; (80011b4 <HAL_GPIO_DeInit+0x174>)
 80010e2:	4013      	ands	r3, r2
 80010e4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80010e6:	4b33      	ldr	r3, [pc, #204]	; (80011b4 <HAL_GPIO_DeInit+0x174>)
 80010e8:	68da      	ldr	r2, [r3, #12]
 80010ea:	69bb      	ldr	r3, [r7, #24]
 80010ec:	43db      	mvns	r3, r3
 80010ee:	4931      	ldr	r1, [pc, #196]	; (80011b4 <HAL_GPIO_DeInit+0x174>)
 80010f0:	4013      	ands	r3, r2
 80010f2:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80010f4:	4b2f      	ldr	r3, [pc, #188]	; (80011b4 <HAL_GPIO_DeInit+0x174>)
 80010f6:	689a      	ldr	r2, [r3, #8]
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	43db      	mvns	r3, r3
 80010fc:	492d      	ldr	r1, [pc, #180]	; (80011b4 <HAL_GPIO_DeInit+0x174>)
 80010fe:	4013      	ands	r3, r2
 8001100:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	f003 0303 	and.w	r3, r3, #3
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	220f      	movs	r2, #15
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8001112:	4a23      	ldr	r2, [pc, #140]	; (80011a0 <HAL_GPIO_DeInit+0x160>)
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	089b      	lsrs	r3, r3, #2
 8001118:	3302      	adds	r3, #2
 800111a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	43da      	mvns	r2, r3
 8001122:	481f      	ldr	r0, [pc, #124]	; (80011a0 <HAL_GPIO_DeInit+0x160>)
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	089b      	lsrs	r3, r3, #2
 8001128:	400a      	ands	r2, r1
 800112a:	3302      	adds	r3, #2
 800112c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001130:	69bb      	ldr	r3, [r7, #24]
 8001132:	2bff      	cmp	r3, #255	; 0xff
 8001134:	d801      	bhi.n	800113a <HAL_GPIO_DeInit+0xfa>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	e001      	b.n	800113e <HAL_GPIO_DeInit+0xfe>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	3304      	adds	r3, #4
 800113e:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	2bff      	cmp	r3, #255	; 0xff
 8001144:	d802      	bhi.n	800114c <HAL_GPIO_DeInit+0x10c>
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	e002      	b.n	8001152 <HAL_GPIO_DeInit+0x112>
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	3b08      	subs	r3, #8
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	210f      	movs	r1, #15
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	fa01 f303 	lsl.w	r3, r1, r3
 8001160:	43db      	mvns	r3, r3
 8001162:	401a      	ands	r2, r3
 8001164:	2104      	movs	r1, #4
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	fa01 f303 	lsl.w	r3, r1, r3
 800116c:	431a      	orrs	r2, r3
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	68da      	ldr	r2, [r3, #12]
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	43db      	mvns	r3, r3
 800117a:	401a      	ands	r2, r3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	60da      	str	r2, [r3, #12]
    }

    position++;
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	3301      	adds	r3, #1
 8001184:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8001186:	683a      	ldr	r2, [r7, #0]
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	fa22 f303 	lsr.w	r3, r2, r3
 800118e:	2b00      	cmp	r3, #0
 8001190:	f47f af5e 	bne.w	8001050 <HAL_GPIO_DeInit+0x10>
  }
}
 8001194:	bf00      	nop
 8001196:	bf00      	nop
 8001198:	3724      	adds	r7, #36	; 0x24
 800119a:	46bd      	mov	sp, r7
 800119c:	bc80      	pop	{r7}
 800119e:	4770      	bx	lr
 80011a0:	40010000 	.word	0x40010000
 80011a4:	40010800 	.word	0x40010800
 80011a8:	40010c00 	.word	0x40010c00
 80011ac:	40011000 	.word	0x40011000
 80011b0:	40011400 	.word	0x40011400
 80011b4:	40010400 	.word	0x40010400

080011b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	460b      	mov	r3, r1
 80011c2:	807b      	strh	r3, [r7, #2]
 80011c4:	4613      	mov	r3, r2
 80011c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011c8:	787b      	ldrb	r3, [r7, #1]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d003      	beq.n	80011d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011ce:	887a      	ldrh	r2, [r7, #2]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80011d4:	e003      	b.n	80011de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011d6:	887b      	ldrh	r3, [r7, #2]
 80011d8:	041a      	lsls	r2, r3, #16
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	611a      	str	r2, [r3, #16]
}
 80011de:	bf00      	nop
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bc80      	pop	{r7}
 80011e6:	4770      	bx	lr

080011e8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80011e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ea:	b08b      	sub	sp, #44	; 0x2c
 80011ec:	af06      	add	r7, sp, #24
 80011ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d101      	bne.n	80011fa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e0f1      	b.n	80013de <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001200:	b2db      	uxtb	r3, r3
 8001202:	2b00      	cmp	r3, #0
 8001204:	d106      	bne.n	8001214 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2200      	movs	r2, #0
 800120a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f007 fa18 	bl	8008644 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2203      	movs	r2, #3
 8001218:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4618      	mov	r0, r3
 8001222:	f003 f937 	bl	8004494 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	603b      	str	r3, [r7, #0]
 800122c:	687e      	ldr	r6, [r7, #4]
 800122e:	466d      	mov	r5, sp
 8001230:	f106 0410 	add.w	r4, r6, #16
 8001234:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001236:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001238:	6823      	ldr	r3, [r4, #0]
 800123a:	602b      	str	r3, [r5, #0]
 800123c:	1d33      	adds	r3, r6, #4
 800123e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001240:	6838      	ldr	r0, [r7, #0]
 8001242:	f003 f901 	bl	8004448 <USB_CoreInit>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d005      	beq.n	8001258 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2202      	movs	r2, #2
 8001250:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	e0c2      	b.n	80013de <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2100      	movs	r1, #0
 800125e:	4618      	mov	r0, r3
 8001260:	f003 f932 	bl	80044c8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001264:	2300      	movs	r3, #0
 8001266:	73fb      	strb	r3, [r7, #15]
 8001268:	e040      	b.n	80012ec <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800126a:	7bfb      	ldrb	r3, [r7, #15]
 800126c:	6879      	ldr	r1, [r7, #4]
 800126e:	1c5a      	adds	r2, r3, #1
 8001270:	4613      	mov	r3, r2
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	4413      	add	r3, r2
 8001276:	00db      	lsls	r3, r3, #3
 8001278:	440b      	add	r3, r1
 800127a:	3301      	adds	r3, #1
 800127c:	2201      	movs	r2, #1
 800127e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001280:	7bfb      	ldrb	r3, [r7, #15]
 8001282:	6879      	ldr	r1, [r7, #4]
 8001284:	1c5a      	adds	r2, r3, #1
 8001286:	4613      	mov	r3, r2
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	4413      	add	r3, r2
 800128c:	00db      	lsls	r3, r3, #3
 800128e:	440b      	add	r3, r1
 8001290:	7bfa      	ldrb	r2, [r7, #15]
 8001292:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001294:	7bfb      	ldrb	r3, [r7, #15]
 8001296:	6879      	ldr	r1, [r7, #4]
 8001298:	1c5a      	adds	r2, r3, #1
 800129a:	4613      	mov	r3, r2
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	4413      	add	r3, r2
 80012a0:	00db      	lsls	r3, r3, #3
 80012a2:	440b      	add	r3, r1
 80012a4:	3303      	adds	r3, #3
 80012a6:	2200      	movs	r2, #0
 80012a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80012aa:	7bfa      	ldrb	r2, [r7, #15]
 80012ac:	6879      	ldr	r1, [r7, #4]
 80012ae:	4613      	mov	r3, r2
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	4413      	add	r3, r2
 80012b4:	00db      	lsls	r3, r3, #3
 80012b6:	440b      	add	r3, r1
 80012b8:	3338      	adds	r3, #56	; 0x38
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80012be:	7bfa      	ldrb	r2, [r7, #15]
 80012c0:	6879      	ldr	r1, [r7, #4]
 80012c2:	4613      	mov	r3, r2
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	4413      	add	r3, r2
 80012c8:	00db      	lsls	r3, r3, #3
 80012ca:	440b      	add	r3, r1
 80012cc:	333c      	adds	r3, #60	; 0x3c
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80012d2:	7bfa      	ldrb	r2, [r7, #15]
 80012d4:	6879      	ldr	r1, [r7, #4]
 80012d6:	4613      	mov	r3, r2
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	4413      	add	r3, r2
 80012dc:	00db      	lsls	r3, r3, #3
 80012de:	440b      	add	r3, r1
 80012e0:	3340      	adds	r3, #64	; 0x40
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012e6:	7bfb      	ldrb	r3, [r7, #15]
 80012e8:	3301      	adds	r3, #1
 80012ea:	73fb      	strb	r3, [r7, #15]
 80012ec:	7bfa      	ldrb	r2, [r7, #15]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	429a      	cmp	r2, r3
 80012f4:	d3b9      	bcc.n	800126a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012f6:	2300      	movs	r3, #0
 80012f8:	73fb      	strb	r3, [r7, #15]
 80012fa:	e044      	b.n	8001386 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80012fc:	7bfa      	ldrb	r2, [r7, #15]
 80012fe:	6879      	ldr	r1, [r7, #4]
 8001300:	4613      	mov	r3, r2
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	4413      	add	r3, r2
 8001306:	00db      	lsls	r3, r3, #3
 8001308:	440b      	add	r3, r1
 800130a:	f203 1369 	addw	r3, r3, #361	; 0x169
 800130e:	2200      	movs	r2, #0
 8001310:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001312:	7bfa      	ldrb	r2, [r7, #15]
 8001314:	6879      	ldr	r1, [r7, #4]
 8001316:	4613      	mov	r3, r2
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	4413      	add	r3, r2
 800131c:	00db      	lsls	r3, r3, #3
 800131e:	440b      	add	r3, r1
 8001320:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001324:	7bfa      	ldrb	r2, [r7, #15]
 8001326:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001328:	7bfa      	ldrb	r2, [r7, #15]
 800132a:	6879      	ldr	r1, [r7, #4]
 800132c:	4613      	mov	r3, r2
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	4413      	add	r3, r2
 8001332:	00db      	lsls	r3, r3, #3
 8001334:	440b      	add	r3, r1
 8001336:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800133a:	2200      	movs	r2, #0
 800133c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800133e:	7bfa      	ldrb	r2, [r7, #15]
 8001340:	6879      	ldr	r1, [r7, #4]
 8001342:	4613      	mov	r3, r2
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	4413      	add	r3, r2
 8001348:	00db      	lsls	r3, r3, #3
 800134a:	440b      	add	r3, r1
 800134c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001354:	7bfa      	ldrb	r2, [r7, #15]
 8001356:	6879      	ldr	r1, [r7, #4]
 8001358:	4613      	mov	r3, r2
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	4413      	add	r3, r2
 800135e:	00db      	lsls	r3, r3, #3
 8001360:	440b      	add	r3, r1
 8001362:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800136a:	7bfa      	ldrb	r2, [r7, #15]
 800136c:	6879      	ldr	r1, [r7, #4]
 800136e:	4613      	mov	r3, r2
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	4413      	add	r3, r2
 8001374:	00db      	lsls	r3, r3, #3
 8001376:	440b      	add	r3, r1
 8001378:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001380:	7bfb      	ldrb	r3, [r7, #15]
 8001382:	3301      	adds	r3, #1
 8001384:	73fb      	strb	r3, [r7, #15]
 8001386:	7bfa      	ldrb	r2, [r7, #15]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	429a      	cmp	r2, r3
 800138e:	d3b5      	bcc.n	80012fc <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	603b      	str	r3, [r7, #0]
 8001396:	687e      	ldr	r6, [r7, #4]
 8001398:	466d      	mov	r5, sp
 800139a:	f106 0410 	add.w	r4, r6, #16
 800139e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013a2:	6823      	ldr	r3, [r4, #0]
 80013a4:	602b      	str	r3, [r5, #0]
 80013a6:	1d33      	adds	r3, r6, #4
 80013a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013aa:	6838      	ldr	r0, [r7, #0]
 80013ac:	f003 f898 	bl	80044e0 <USB_DevInit>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d005      	beq.n	80013c2 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2202      	movs	r2, #2
 80013ba:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e00d      	b.n	80013de <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2200      	movs	r2, #0
 80013c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2201      	movs	r2, #1
 80013ce:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f005 fb19 	bl	8006a0e <USB_DevDisconnect>

  return HAL_OK;
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3714      	adds	r7, #20
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080013e6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b082      	sub	sp, #8
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d101      	bne.n	80013fc <HAL_PCD_Start+0x16>
 80013f8:	2302      	movs	r3, #2
 80013fa:	e016      	b.n	800142a <HAL_PCD_Start+0x44>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2201      	movs	r2, #1
 8001400:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4618      	mov	r0, r3
 800140a:	f003 f82d 	bl	8004468 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800140e:	2101      	movs	r1, #1
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f007 fb8a 	bl	8008b2a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4618      	mov	r0, r3
 800141c:	f005 faed 	bl	80069fa <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2200      	movs	r2, #0
 8001424:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	b088      	sub	sp, #32
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4618      	mov	r0, r3
 8001440:	f005 faef 	bl	8006a22 <USB_ReadInterrupts>
 8001444:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d003      	beq.n	8001458 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f000 fb1b 	bl	8001a8c <PCD_EP_ISR_Handler>

    return;
 8001456:	e119      	b.n	800168c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800145e:	2b00      	cmp	r3, #0
 8001460:	d013      	beq.n	800148a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800146a:	b29a      	uxth	r2, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001474:	b292      	uxth	r2, r2
 8001476:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f007 f95d 	bl	800873a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001480:	2100      	movs	r1, #0
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f000 f905 	bl	8001692 <HAL_PCD_SetAddress>

    return;
 8001488:	e100      	b.n	800168c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d00c      	beq.n	80014ae <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800149c:	b29a      	uxth	r2, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80014a6:	b292      	uxth	r2, r2
 80014a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80014ac:	e0ee      	b.n	800168c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d00c      	beq.n	80014d2 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014c0:	b29a      	uxth	r2, r3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80014ca:	b292      	uxth	r2, r2
 80014cc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80014d0:	e0dc      	b.n	800168c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d027      	beq.n	800152c <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80014e4:	b29a      	uxth	r2, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f022 0204 	bic.w	r2, r2, #4
 80014ee:	b292      	uxth	r2, r2
 80014f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80014fc:	b29a      	uxth	r2, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f022 0208 	bic.w	r2, r2, #8
 8001506:	b292      	uxth	r2, r2
 8001508:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f007 f94d 	bl	80087ac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800151a:	b29a      	uxth	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001524:	b292      	uxth	r2, r2
 8001526:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800152a:	e0af      	b.n	800168c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001532:	2b00      	cmp	r3, #0
 8001534:	f000 8083 	beq.w	800163e <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8001538:	2300      	movs	r3, #0
 800153a:	77fb      	strb	r3, [r7, #31]
 800153c:	e010      	b.n	8001560 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	461a      	mov	r2, r3
 8001544:	7ffb      	ldrb	r3, [r7, #31]
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	441a      	add	r2, r3
 800154a:	7ffb      	ldrb	r3, [r7, #31]
 800154c:	8812      	ldrh	r2, [r2, #0]
 800154e:	b292      	uxth	r2, r2
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	3320      	adds	r3, #32
 8001554:	443b      	add	r3, r7
 8001556:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 800155a:	7ffb      	ldrb	r3, [r7, #31]
 800155c:	3301      	adds	r3, #1
 800155e:	77fb      	strb	r3, [r7, #31]
 8001560:	7ffb      	ldrb	r3, [r7, #31]
 8001562:	2b07      	cmp	r3, #7
 8001564:	d9eb      	bls.n	800153e <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800156e:	b29a      	uxth	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f042 0201 	orr.w	r2, r2, #1
 8001578:	b292      	uxth	r2, r2
 800157a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001586:	b29a      	uxth	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f022 0201 	bic.w	r2, r2, #1
 8001590:	b292      	uxth	r2, r2
 8001592:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001596:	bf00      	nop
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d0f6      	beq.n	8001598 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015bc:	b292      	uxth	r2, r2
 80015be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80015c2:	2300      	movs	r3, #0
 80015c4:	77fb      	strb	r3, [r7, #31]
 80015c6:	e00f      	b.n	80015e8 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80015c8:	7ffb      	ldrb	r3, [r7, #31]
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	6812      	ldr	r2, [r2, #0]
 80015ce:	4611      	mov	r1, r2
 80015d0:	7ffa      	ldrb	r2, [r7, #31]
 80015d2:	0092      	lsls	r2, r2, #2
 80015d4:	440a      	add	r2, r1
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	3320      	adds	r3, #32
 80015da:	443b      	add	r3, r7
 80015dc:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80015e0:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80015e2:	7ffb      	ldrb	r3, [r7, #31]
 80015e4:	3301      	adds	r3, #1
 80015e6:	77fb      	strb	r3, [r7, #31]
 80015e8:	7ffb      	ldrb	r3, [r7, #31]
 80015ea:	2b07      	cmp	r3, #7
 80015ec:	d9ec      	bls.n	80015c8 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80015f6:	b29a      	uxth	r2, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f042 0208 	orr.w	r2, r2, #8
 8001600:	b292      	uxth	r2, r2
 8001602:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800160e:	b29a      	uxth	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001618:	b292      	uxth	r2, r2
 800161a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001626:	b29a      	uxth	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f042 0204 	orr.w	r2, r2, #4
 8001630:	b292      	uxth	r2, r2
 8001632:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f007 f89e 	bl	8008778 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800163c:	e026      	b.n	800168c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001644:	2b00      	cmp	r3, #0
 8001646:	d00f      	beq.n	8001668 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001650:	b29a      	uxth	r2, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800165a:	b292      	uxth	r2, r2
 800165c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f007 f85c 	bl	800871e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001666:	e011      	b.n	800168c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800166e:	2b00      	cmp	r3, #0
 8001670:	d00c      	beq.n	800168c <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800167a:	b29a      	uxth	r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001684:	b292      	uxth	r2, r2
 8001686:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800168a:	bf00      	nop
  }
}
 800168c:	3720      	adds	r7, #32
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	b082      	sub	sp, #8
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
 800169a:	460b      	mov	r3, r1
 800169c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d101      	bne.n	80016ac <HAL_PCD_SetAddress+0x1a>
 80016a8:	2302      	movs	r3, #2
 80016aa:	e013      	b.n	80016d4 <HAL_PCD_SetAddress+0x42>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2201      	movs	r2, #1
 80016b0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	78fa      	ldrb	r2, [r7, #3]
 80016b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	78fa      	ldrb	r2, [r7, #3]
 80016c2:	4611      	mov	r1, r2
 80016c4:	4618      	mov	r0, r3
 80016c6:	f005 f985 	bl	80069d4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2200      	movs	r2, #0
 80016ce:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80016d2:	2300      	movs	r3, #0
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	4608      	mov	r0, r1
 80016e6:	4611      	mov	r1, r2
 80016e8:	461a      	mov	r2, r3
 80016ea:	4603      	mov	r3, r0
 80016ec:	70fb      	strb	r3, [r7, #3]
 80016ee:	460b      	mov	r3, r1
 80016f0:	803b      	strh	r3, [r7, #0]
 80016f2:	4613      	mov	r3, r2
 80016f4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80016f6:	2300      	movs	r3, #0
 80016f8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80016fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	da0e      	bge.n	8001720 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001702:	78fb      	ldrb	r3, [r7, #3]
 8001704:	f003 0307 	and.w	r3, r3, #7
 8001708:	1c5a      	adds	r2, r3, #1
 800170a:	4613      	mov	r3, r2
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	4413      	add	r3, r2
 8001710:	00db      	lsls	r3, r3, #3
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	4413      	add	r3, r2
 8001716:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	2201      	movs	r2, #1
 800171c:	705a      	strb	r2, [r3, #1]
 800171e:	e00e      	b.n	800173e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001720:	78fb      	ldrb	r3, [r7, #3]
 8001722:	f003 0207 	and.w	r2, r3, #7
 8001726:	4613      	mov	r3, r2
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	4413      	add	r3, r2
 800172c:	00db      	lsls	r3, r3, #3
 800172e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	4413      	add	r3, r2
 8001736:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	2200      	movs	r2, #0
 800173c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800173e:	78fb      	ldrb	r3, [r7, #3]
 8001740:	f003 0307 	and.w	r3, r3, #7
 8001744:	b2da      	uxtb	r2, r3
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800174a:	883a      	ldrh	r2, [r7, #0]
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	78ba      	ldrb	r2, [r7, #2]
 8001754:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001756:	78bb      	ldrb	r3, [r7, #2]
 8001758:	2b02      	cmp	r3, #2
 800175a:	d102      	bne.n	8001762 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	2200      	movs	r2, #0
 8001760:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001768:	2b01      	cmp	r3, #1
 800176a:	d101      	bne.n	8001770 <HAL_PCD_EP_Open+0x94>
 800176c:	2302      	movs	r3, #2
 800176e:	e00e      	b.n	800178e <HAL_PCD_EP_Open+0xb2>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2201      	movs	r2, #1
 8001774:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	68f9      	ldr	r1, [r7, #12]
 800177e:	4618      	mov	r0, r3
 8001780:	f002 fece 	bl	8004520 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2200      	movs	r2, #0
 8001788:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800178c:	7afb      	ldrb	r3, [r7, #11]
}
 800178e:	4618      	mov	r0, r3
 8001790:	3710      	adds	r7, #16
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b084      	sub	sp, #16
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
 800179e:	460b      	mov	r3, r1
 80017a0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80017a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	da0e      	bge.n	80017c8 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017aa:	78fb      	ldrb	r3, [r7, #3]
 80017ac:	f003 0307 	and.w	r3, r3, #7
 80017b0:	1c5a      	adds	r2, r3, #1
 80017b2:	4613      	mov	r3, r2
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	4413      	add	r3, r2
 80017b8:	00db      	lsls	r3, r3, #3
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	4413      	add	r3, r2
 80017be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	2201      	movs	r2, #1
 80017c4:	705a      	strb	r2, [r3, #1]
 80017c6:	e00e      	b.n	80017e6 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017c8:	78fb      	ldrb	r3, [r7, #3]
 80017ca:	f003 0207 	and.w	r2, r3, #7
 80017ce:	4613      	mov	r3, r2
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	4413      	add	r3, r2
 80017d4:	00db      	lsls	r3, r3, #3
 80017d6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	4413      	add	r3, r2
 80017de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	2200      	movs	r2, #0
 80017e4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80017e6:	78fb      	ldrb	r3, [r7, #3]
 80017e8:	f003 0307 	and.w	r3, r3, #7
 80017ec:	b2da      	uxtb	r2, r3
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d101      	bne.n	8001800 <HAL_PCD_EP_Close+0x6a>
 80017fc:	2302      	movs	r3, #2
 80017fe:	e00e      	b.n	800181e <HAL_PCD_EP_Close+0x88>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2201      	movs	r2, #1
 8001804:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	68f9      	ldr	r1, [r7, #12]
 800180e:	4618      	mov	r0, r3
 8001810:	f003 fa46 	bl	8004ca0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2200      	movs	r2, #0
 8001818:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b086      	sub	sp, #24
 800182a:	af00      	add	r7, sp, #0
 800182c:	60f8      	str	r0, [r7, #12]
 800182e:	607a      	str	r2, [r7, #4]
 8001830:	603b      	str	r3, [r7, #0]
 8001832:	460b      	mov	r3, r1
 8001834:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001836:	7afb      	ldrb	r3, [r7, #11]
 8001838:	f003 0207 	and.w	r2, r3, #7
 800183c:	4613      	mov	r3, r2
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	4413      	add	r3, r2
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001848:	68fa      	ldr	r2, [r7, #12]
 800184a:	4413      	add	r3, r2
 800184c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	683a      	ldr	r2, [r7, #0]
 8001858:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	2200      	movs	r2, #0
 800185e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	2200      	movs	r2, #0
 8001864:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001866:	7afb      	ldrb	r3, [r7, #11]
 8001868:	f003 0307 	and.w	r3, r3, #7
 800186c:	b2da      	uxtb	r2, r3
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	6979      	ldr	r1, [r7, #20]
 8001878:	4618      	mov	r0, r3
 800187a:	f003 fbfd 	bl	8005078 <USB_EPStartXfer>

  return HAL_OK;
 800187e:	2300      	movs	r3, #0
}
 8001880:	4618      	mov	r0, r3
 8001882:	3718      	adds	r7, #24
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}

08001888 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	460b      	mov	r3, r1
 8001892:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001894:	78fb      	ldrb	r3, [r7, #3]
 8001896:	f003 0207 	and.w	r2, r3, #7
 800189a:	6879      	ldr	r1, [r7, #4]
 800189c:	4613      	mov	r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	4413      	add	r3, r2
 80018a2:	00db      	lsls	r3, r3, #3
 80018a4:	440b      	add	r3, r1
 80018a6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80018aa:	681b      	ldr	r3, [r3, #0]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bc80      	pop	{r7}
 80018b4:	4770      	bx	lr

080018b6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80018b6:	b580      	push	{r7, lr}
 80018b8:	b086      	sub	sp, #24
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	60f8      	str	r0, [r7, #12]
 80018be:	607a      	str	r2, [r7, #4]
 80018c0:	603b      	str	r3, [r7, #0]
 80018c2:	460b      	mov	r3, r1
 80018c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018c6:	7afb      	ldrb	r3, [r7, #11]
 80018c8:	f003 0307 	and.w	r3, r3, #7
 80018cc:	1c5a      	adds	r2, r3, #1
 80018ce:	4613      	mov	r3, r2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	4413      	add	r3, r2
 80018d4:	00db      	lsls	r3, r3, #3
 80018d6:	68fa      	ldr	r2, [r7, #12]
 80018d8:	4413      	add	r3, r2
 80018da:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	683a      	ldr	r2, [r7, #0]
 80018e6:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	2201      	movs	r2, #1
 80018ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	683a      	ldr	r2, [r7, #0]
 80018f4:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	2200      	movs	r2, #0
 80018fa:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	2201      	movs	r2, #1
 8001900:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001902:	7afb      	ldrb	r3, [r7, #11]
 8001904:	f003 0307 	and.w	r3, r3, #7
 8001908:	b2da      	uxtb	r2, r3
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	6979      	ldr	r1, [r7, #20]
 8001914:	4618      	mov	r0, r3
 8001916:	f003 fbaf 	bl	8005078 <USB_EPStartXfer>

  return HAL_OK;
 800191a:	2300      	movs	r3, #0
}
 800191c:	4618      	mov	r0, r3
 800191e:	3718      	adds	r7, #24
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	460b      	mov	r3, r1
 800192e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001930:	78fb      	ldrb	r3, [r7, #3]
 8001932:	f003 0207 	and.w	r2, r3, #7
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	429a      	cmp	r2, r3
 800193c:	d901      	bls.n	8001942 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e04c      	b.n	80019dc <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001942:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001946:	2b00      	cmp	r3, #0
 8001948:	da0e      	bge.n	8001968 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800194a:	78fb      	ldrb	r3, [r7, #3]
 800194c:	f003 0307 	and.w	r3, r3, #7
 8001950:	1c5a      	adds	r2, r3, #1
 8001952:	4613      	mov	r3, r2
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	4413      	add	r3, r2
 8001958:	00db      	lsls	r3, r3, #3
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	4413      	add	r3, r2
 800195e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2201      	movs	r2, #1
 8001964:	705a      	strb	r2, [r3, #1]
 8001966:	e00c      	b.n	8001982 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001968:	78fa      	ldrb	r2, [r7, #3]
 800196a:	4613      	mov	r3, r2
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	4413      	add	r3, r2
 8001970:	00db      	lsls	r3, r3, #3
 8001972:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	4413      	add	r3, r2
 800197a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2200      	movs	r2, #0
 8001980:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2201      	movs	r2, #1
 8001986:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001988:	78fb      	ldrb	r3, [r7, #3]
 800198a:	f003 0307 	and.w	r3, r3, #7
 800198e:	b2da      	uxtb	r2, r3
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800199a:	2b01      	cmp	r3, #1
 800199c:	d101      	bne.n	80019a2 <HAL_PCD_EP_SetStall+0x7e>
 800199e:	2302      	movs	r3, #2
 80019a0:	e01c      	b.n	80019dc <HAL_PCD_EP_SetStall+0xb8>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2201      	movs	r2, #1
 80019a6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	68f9      	ldr	r1, [r7, #12]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f004 ff12 	bl	80067da <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80019b6:	78fb      	ldrb	r3, [r7, #3]
 80019b8:	f003 0307 	and.w	r3, r3, #7
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d108      	bne.n	80019d2 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80019ca:	4619      	mov	r1, r3
 80019cc:	4610      	mov	r0, r2
 80019ce:	f005 f837 	bl	8006a40 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2200      	movs	r2, #0
 80019d6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80019da:	2300      	movs	r3, #0
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3710      	adds	r7, #16
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	460b      	mov	r3, r1
 80019ee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80019f0:	78fb      	ldrb	r3, [r7, #3]
 80019f2:	f003 020f 	and.w	r2, r3, #15
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d901      	bls.n	8001a02 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e040      	b.n	8001a84 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001a02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	da0e      	bge.n	8001a28 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a0a:	78fb      	ldrb	r3, [r7, #3]
 8001a0c:	f003 0307 	and.w	r3, r3, #7
 8001a10:	1c5a      	adds	r2, r3, #1
 8001a12:	4613      	mov	r3, r2
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	4413      	add	r3, r2
 8001a18:	00db      	lsls	r3, r3, #3
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	2201      	movs	r2, #1
 8001a24:	705a      	strb	r2, [r3, #1]
 8001a26:	e00e      	b.n	8001a46 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a28:	78fb      	ldrb	r3, [r7, #3]
 8001a2a:	f003 0207 	and.w	r2, r3, #7
 8001a2e:	4613      	mov	r3, r2
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	4413      	add	r3, r2
 8001a34:	00db      	lsls	r3, r3, #3
 8001a36:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2200      	movs	r2, #0
 8001a44:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a4c:	78fb      	ldrb	r3, [r7, #3]
 8001a4e:	f003 0307 	and.w	r3, r3, #7
 8001a52:	b2da      	uxtb	r2, r3
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d101      	bne.n	8001a66 <HAL_PCD_EP_ClrStall+0x82>
 8001a62:	2302      	movs	r3, #2
 8001a64:	e00e      	b.n	8001a84 <HAL_PCD_EP_ClrStall+0xa0>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2201      	movs	r2, #1
 8001a6a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	68f9      	ldr	r1, [r7, #12]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f004 ff00 	bl	800687a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001a82:	2300      	movs	r3, #0
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3710      	adds	r7, #16
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b096      	sub	sp, #88	; 0x58
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001a94:	e3bf      	b.n	8002216 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a9e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001aa2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	f003 030f 	and.w	r3, r3, #15
 8001aac:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8001ab0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	f040 8179 	bne.w	8001dac <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001aba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001abe:	f003 0310 	and.w	r3, r3, #16
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d152      	bne.n	8001b6c <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	881b      	ldrh	r3, [r3, #0]
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ad6:	81fb      	strh	r3, [r7, #14]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	89fb      	ldrh	r3, [r7, #14]
 8001ade:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ae2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	3328      	adds	r3, #40	; 0x28
 8001aee:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	461a      	mov	r2, r3
 8001afc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	00db      	lsls	r3, r3, #3
 8001b02:	4413      	add	r3, r2
 8001b04:	3302      	adds	r3, #2
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	6812      	ldr	r2, [r2, #0]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b12:	881b      	ldrh	r3, [r3, #0]
 8001b14:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001b18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b1a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001b1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b1e:	695a      	ldr	r2, [r3, #20]
 8001b20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b22:	69db      	ldr	r3, [r3, #28]
 8001b24:	441a      	add	r2, r3
 8001b26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b28:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f006 fddc 	bl	80086ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	f000 836b 	beq.w	8002216 <PCD_EP_ISR_Handler+0x78a>
 8001b40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	f040 8366 	bne.w	8002216 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b56:	b2da      	uxtb	r2, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	b292      	uxth	r2, r2
 8001b5e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001b6a:	e354      	b.n	8002216 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b72:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	881b      	ldrh	r3, [r3, #0]
 8001b7a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001b7e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001b82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d034      	beq.n	8001bf4 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	461a      	mov	r2, r3
 8001b96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	00db      	lsls	r3, r3, #3
 8001b9c:	4413      	add	r3, r2
 8001b9e:	3306      	adds	r3, #6
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	6812      	ldr	r2, [r2, #0]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001bac:	881b      	ldrh	r3, [r3, #0]
 8001bae:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001bb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bb4:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6818      	ldr	r0, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001bc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bc2:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001bc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bc6:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	f004 ff89 	bl	8006ae0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	881b      	ldrh	r3, [r3, #0]
 8001bd4:	b29a      	uxth	r2, r3
 8001bd6:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001bda:	4013      	ands	r3, r2
 8001bdc:	823b      	strh	r3, [r7, #16]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	8a3a      	ldrh	r2, [r7, #16]
 8001be4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001be8:	b292      	uxth	r2, r2
 8001bea:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f006 fd4f 	bl	8008690 <HAL_PCD_SetupStageCallback>
 8001bf2:	e310      	b.n	8002216 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001bf4:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	f280 830c 	bge.w	8002216 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	881b      	ldrh	r3, [r3, #0]
 8001c04:	b29a      	uxth	r2, r3
 8001c06:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	83fb      	strh	r3, [r7, #30]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	8bfa      	ldrh	r2, [r7, #30]
 8001c14:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c18:	b292      	uxth	r2, r2
 8001c1a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	461a      	mov	r2, r3
 8001c28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	00db      	lsls	r3, r3, #3
 8001c2e:	4413      	add	r3, r2
 8001c30:	3306      	adds	r3, #6
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	6812      	ldr	r2, [r2, #0]
 8001c38:	4413      	add	r3, r2
 8001c3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c3e:	881b      	ldrh	r3, [r3, #0]
 8001c40:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c46:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001c48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c4a:	69db      	ldr	r3, [r3, #28]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d019      	beq.n	8001c84 <PCD_EP_ISR_Handler+0x1f8>
 8001c50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c52:	695b      	ldr	r3, [r3, #20]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d015      	beq.n	8001c84 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6818      	ldr	r0, [r3, #0]
 8001c5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c5e:	6959      	ldr	r1, [r3, #20]
 8001c60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c62:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001c64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c66:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	f004 ff39 	bl	8006ae0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001c6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c70:	695a      	ldr	r2, [r3, #20]
 8001c72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c74:	69db      	ldr	r3, [r3, #28]
 8001c76:	441a      	add	r2, r3
 8001c78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c7a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f006 fd18 	bl	80086b4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	881b      	ldrh	r3, [r3, #0]
 8001c8a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001c8e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001c92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	f040 82bd 	bne.w	8002216 <PCD_EP_ISR_Handler+0x78a>
 8001c9c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001ca0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001ca4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001ca8:	f000 82b5 	beq.w	8002216 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	61bb      	str	r3, [r7, #24]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001cca:	617b      	str	r3, [r7, #20]
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	881b      	ldrh	r3, [r3, #0]
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	801a      	strh	r2, [r3, #0]
 8001cdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cde:	691b      	ldr	r3, [r3, #16]
 8001ce0:	2b3e      	cmp	r3, #62	; 0x3e
 8001ce2:	d91d      	bls.n	8001d20 <PCD_EP_ISR_Handler+0x294>
 8001ce4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ce6:	691b      	ldr	r3, [r3, #16]
 8001ce8:	095b      	lsrs	r3, r3, #5
 8001cea:	647b      	str	r3, [r7, #68]	; 0x44
 8001cec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cee:	691b      	ldr	r3, [r3, #16]
 8001cf0:	f003 031f 	and.w	r3, r3, #31
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d102      	bne.n	8001cfe <PCD_EP_ISR_Handler+0x272>
 8001cf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	647b      	str	r3, [r7, #68]	; 0x44
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	881b      	ldrh	r3, [r3, #0]
 8001d02:	b29a      	uxth	r2, r3
 8001d04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	029b      	lsls	r3, r3, #10
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d18:	b29a      	uxth	r2, r3
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	801a      	strh	r2, [r3, #0]
 8001d1e:	e026      	b.n	8001d6e <PCD_EP_ISR_Handler+0x2e2>
 8001d20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d22:	691b      	ldr	r3, [r3, #16]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d10a      	bne.n	8001d3e <PCD_EP_ISR_Handler+0x2b2>
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	881b      	ldrh	r3, [r3, #0]
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d36:	b29a      	uxth	r2, r3
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	801a      	strh	r2, [r3, #0]
 8001d3c:	e017      	b.n	8001d6e <PCD_EP_ISR_Handler+0x2e2>
 8001d3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d40:	691b      	ldr	r3, [r3, #16]
 8001d42:	085b      	lsrs	r3, r3, #1
 8001d44:	647b      	str	r3, [r7, #68]	; 0x44
 8001d46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d48:	691b      	ldr	r3, [r3, #16]
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d002      	beq.n	8001d58 <PCD_EP_ISR_Handler+0x2cc>
 8001d52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d54:	3301      	adds	r3, #1
 8001d56:	647b      	str	r3, [r7, #68]	; 0x44
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	881b      	ldrh	r3, [r3, #0]
 8001d5c:	b29a      	uxth	r2, r3
 8001d5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	029b      	lsls	r3, r3, #10
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	4313      	orrs	r3, r2
 8001d68:	b29a      	uxth	r2, r3
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	881b      	ldrh	r3, [r3, #0]
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d7e:	827b      	strh	r3, [r7, #18]
 8001d80:	8a7b      	ldrh	r3, [r7, #18]
 8001d82:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001d86:	827b      	strh	r3, [r7, #18]
 8001d88:	8a7b      	ldrh	r3, [r7, #18]
 8001d8a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001d8e:	827b      	strh	r3, [r7, #18]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	8a7b      	ldrh	r3, [r7, #18]
 8001d96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001d9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001d9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001da2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	8013      	strh	r3, [r2, #0]
 8001daa:	e234      	b.n	8002216 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	461a      	mov	r2, r3
 8001db2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	4413      	add	r3, r2
 8001dba:	881b      	ldrh	r3, [r3, #0]
 8001dbc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001dc0:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	f280 80fc 	bge.w	8001fc2 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	461a      	mov	r2, r3
 8001dd0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	4413      	add	r3, r2
 8001dd8:	881b      	ldrh	r3, [r3, #0]
 8001dda:	b29a      	uxth	r2, r3
 8001ddc:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001de0:	4013      	ands	r3, r2
 8001de2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	461a      	mov	r2, r3
 8001dec:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	4413      	add	r3, r2
 8001df4:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001df8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001dfc:	b292      	uxth	r2, r2
 8001dfe:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001e00:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8001e04:	4613      	mov	r3, r2
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	4413      	add	r3, r2
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	4413      	add	r3, r2
 8001e14:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001e16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e18:	7b1b      	ldrb	r3, [r3, #12]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d125      	bne.n	8001e6a <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	461a      	mov	r2, r3
 8001e2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	4413      	add	r3, r2
 8001e32:	3306      	adds	r3, #6
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	6812      	ldr	r2, [r2, #0]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e40:	881b      	ldrh	r3, [r3, #0]
 8001e42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e46:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8001e4a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	f000 8092 	beq.w	8001f78 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6818      	ldr	r0, [r3, #0]
 8001e58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e5a:	6959      	ldr	r1, [r3, #20]
 8001e5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e5e:	88da      	ldrh	r2, [r3, #6]
 8001e60:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001e64:	f004 fe3c 	bl	8006ae0 <USB_ReadPMA>
 8001e68:	e086      	b.n	8001f78 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001e6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e6c:	78db      	ldrb	r3, [r3, #3]
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d10a      	bne.n	8001e88 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001e72:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001e76:	461a      	mov	r2, r3
 8001e78:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f000 f9d9 	bl	8002232 <HAL_PCD_EP_DB_Receive>
 8001e80:	4603      	mov	r3, r0
 8001e82:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001e86:	e077      	b.n	8001f78 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	4413      	add	r3, r2
 8001e96:	881b      	ldrh	r3, [r3, #0]
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ea2:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	461a      	mov	r2, r3
 8001eac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	441a      	add	r2, r3
 8001eb4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001eb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ebc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001ec0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ec4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	4413      	add	r3, r2
 8001eda:	881b      	ldrh	r3, [r3, #0]
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d024      	beq.n	8001f30 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	00db      	lsls	r3, r3, #3
 8001ef8:	4413      	add	r3, r2
 8001efa:	3302      	adds	r3, #2
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	6812      	ldr	r2, [r2, #0]
 8001f02:	4413      	add	r3, r2
 8001f04:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f08:	881b      	ldrh	r3, [r3, #0]
 8001f0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f0e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001f12:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d02e      	beq.n	8001f78 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6818      	ldr	r0, [r3, #0]
 8001f1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f20:	6959      	ldr	r1, [r3, #20]
 8001f22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f24:	891a      	ldrh	r2, [r3, #8]
 8001f26:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001f2a:	f004 fdd9 	bl	8006ae0 <USB_ReadPMA>
 8001f2e:	e023      	b.n	8001f78 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	00db      	lsls	r3, r3, #3
 8001f42:	4413      	add	r3, r2
 8001f44:	3306      	adds	r3, #6
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	6812      	ldr	r2, [r2, #0]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f52:	881b      	ldrh	r3, [r3, #0]
 8001f54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f58:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001f5c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d009      	beq.n	8001f78 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6818      	ldr	r0, [r3, #0]
 8001f68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f6a:	6959      	ldr	r1, [r3, #20]
 8001f6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f6e:	895a      	ldrh	r2, [r3, #10]
 8001f70:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001f74:	f004 fdb4 	bl	8006ae0 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001f78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f7a:	69da      	ldr	r2, [r3, #28]
 8001f7c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001f80:	441a      	add	r2, r3
 8001f82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f84:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001f86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f88:	695a      	ldr	r2, [r3, #20]
 8001f8a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001f8e:	441a      	add	r2, r3
 8001f90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f92:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001f94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d005      	beq.n	8001fa8 <PCD_EP_ISR_Handler+0x51c>
 8001f9c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8001fa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fa2:	691b      	ldr	r3, [r3, #16]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d206      	bcs.n	8001fb6 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001fa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	4619      	mov	r1, r3
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f006 fb80 	bl	80086b4 <HAL_PCD_DataOutStageCallback>
 8001fb4:	e005      	b.n	8001fc2 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f003 f85b 	bl	8005078 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001fc2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f000 8123 	beq.w	8002216 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8001fd0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001fd4:	1c5a      	adds	r2, r3, #1
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	4413      	add	r3, r2
 8001fdc:	00db      	lsls	r3, r3, #3
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	461a      	mov	r2, r3
 8001fea:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	4413      	add	r3, r2
 8001ff2:	881b      	ldrh	r3, [r3, #0]
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ffe:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	461a      	mov	r2, r3
 8002008:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	441a      	add	r2, r3
 8002010:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002014:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002018:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800201c:	b29b      	uxth	r3, r3
 800201e:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002020:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002022:	78db      	ldrb	r3, [r3, #3]
 8002024:	2b01      	cmp	r3, #1
 8002026:	f040 80a2 	bne.w	800216e <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 800202a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800202c:	2200      	movs	r2, #0
 800202e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002030:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002032:	7b1b      	ldrb	r3, [r3, #12]
 8002034:	2b00      	cmp	r3, #0
 8002036:	f000 8093 	beq.w	8002160 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800203a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800203e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002042:	2b00      	cmp	r3, #0
 8002044:	d046      	beq.n	80020d4 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002046:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002048:	785b      	ldrb	r3, [r3, #1]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d126      	bne.n	800209c <PCD_EP_ISR_Handler+0x610>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	627b      	str	r3, [r7, #36]	; 0x24
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800205c:	b29b      	uxth	r3, r3
 800205e:	461a      	mov	r2, r3
 8002060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002062:	4413      	add	r3, r2
 8002064:	627b      	str	r3, [r7, #36]	; 0x24
 8002066:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	011a      	lsls	r2, r3, #4
 800206c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206e:	4413      	add	r3, r2
 8002070:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002074:	623b      	str	r3, [r7, #32]
 8002076:	6a3b      	ldr	r3, [r7, #32]
 8002078:	881b      	ldrh	r3, [r3, #0]
 800207a:	b29b      	uxth	r3, r3
 800207c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002080:	b29a      	uxth	r2, r3
 8002082:	6a3b      	ldr	r3, [r7, #32]
 8002084:	801a      	strh	r2, [r3, #0]
 8002086:	6a3b      	ldr	r3, [r7, #32]
 8002088:	881b      	ldrh	r3, [r3, #0]
 800208a:	b29b      	uxth	r3, r3
 800208c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002090:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002094:	b29a      	uxth	r2, r3
 8002096:	6a3b      	ldr	r3, [r7, #32]
 8002098:	801a      	strh	r2, [r3, #0]
 800209a:	e061      	b.n	8002160 <PCD_EP_ISR_Handler+0x6d4>
 800209c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800209e:	785b      	ldrb	r3, [r3, #1]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d15d      	bne.n	8002160 <PCD_EP_ISR_Handler+0x6d4>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	461a      	mov	r2, r3
 80020b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020b8:	4413      	add	r3, r2
 80020ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	011a      	lsls	r2, r3, #4
 80020c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020c4:	4413      	add	r3, r2
 80020c6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80020ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80020cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ce:	2200      	movs	r2, #0
 80020d0:	801a      	strh	r2, [r3, #0]
 80020d2:	e045      	b.n	8002160 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020dc:	785b      	ldrb	r3, [r3, #1]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d126      	bne.n	8002130 <PCD_EP_ISR_Handler+0x6a4>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	637b      	str	r3, [r7, #52]	; 0x34
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	461a      	mov	r2, r3
 80020f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020f6:	4413      	add	r3, r2
 80020f8:	637b      	str	r3, [r7, #52]	; 0x34
 80020fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	011a      	lsls	r2, r3, #4
 8002100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002102:	4413      	add	r3, r2
 8002104:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002108:	633b      	str	r3, [r7, #48]	; 0x30
 800210a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800210c:	881b      	ldrh	r3, [r3, #0]
 800210e:	b29b      	uxth	r3, r3
 8002110:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002114:	b29a      	uxth	r2, r3
 8002116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002118:	801a      	strh	r2, [r3, #0]
 800211a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800211c:	881b      	ldrh	r3, [r3, #0]
 800211e:	b29b      	uxth	r3, r3
 8002120:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002124:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002128:	b29a      	uxth	r2, r3
 800212a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800212c:	801a      	strh	r2, [r3, #0]
 800212e:	e017      	b.n	8002160 <PCD_EP_ISR_Handler+0x6d4>
 8002130:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002132:	785b      	ldrb	r3, [r3, #1]
 8002134:	2b01      	cmp	r3, #1
 8002136:	d113      	bne.n	8002160 <PCD_EP_ISR_Handler+0x6d4>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002140:	b29b      	uxth	r3, r3
 8002142:	461a      	mov	r2, r3
 8002144:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002146:	4413      	add	r3, r2
 8002148:	63fb      	str	r3, [r7, #60]	; 0x3c
 800214a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	011a      	lsls	r2, r3, #4
 8002150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002152:	4413      	add	r3, r2
 8002154:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002158:	63bb      	str	r3, [r7, #56]	; 0x38
 800215a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800215c:	2200      	movs	r2, #0
 800215e:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002160:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	4619      	mov	r1, r3
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f006 fabf 	bl	80086ea <HAL_PCD_DataInStageCallback>
 800216c:	e053      	b.n	8002216 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800216e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002176:	2b00      	cmp	r3, #0
 8002178:	d146      	bne.n	8002208 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002182:	b29b      	uxth	r3, r3
 8002184:	461a      	mov	r2, r3
 8002186:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	4413      	add	r3, r2
 800218e:	3302      	adds	r3, #2
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	6812      	ldr	r2, [r2, #0]
 8002196:	4413      	add	r3, r2
 8002198:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800219c:	881b      	ldrh	r3, [r3, #0]
 800219e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021a2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80021a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021a8:	699a      	ldr	r2, [r3, #24]
 80021aa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d907      	bls.n	80021c2 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 80021b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021b4:	699a      	ldr	r2, [r3, #24]
 80021b6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80021ba:	1ad2      	subs	r2, r2, r3
 80021bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021be:	619a      	str	r2, [r3, #24]
 80021c0:	e002      	b.n	80021c8 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 80021c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021c4:	2200      	movs	r2, #0
 80021c6:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80021c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d106      	bne.n	80021de <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80021d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	4619      	mov	r1, r3
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f006 fa87 	bl	80086ea <HAL_PCD_DataInStageCallback>
 80021dc:	e01b      	b.n	8002216 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80021de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021e0:	695a      	ldr	r2, [r3, #20]
 80021e2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80021e6:	441a      	add	r2, r3
 80021e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021ea:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80021ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021ee:	69da      	ldr	r2, [r3, #28]
 80021f0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80021f4:	441a      	add	r2, r3
 80021f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021f8:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002200:	4618      	mov	r0, r3
 8002202:	f002 ff39 	bl	8005078 <USB_EPStartXfer>
 8002206:	e006      	b.n	8002216 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002208:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800220c:	461a      	mov	r2, r3
 800220e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f000 f91b 	bl	800244c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800221e:	b29b      	uxth	r3, r3
 8002220:	b21b      	sxth	r3, r3
 8002222:	2b00      	cmp	r3, #0
 8002224:	f6ff ac37 	blt.w	8001a96 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3758      	adds	r7, #88	; 0x58
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002232:	b580      	push	{r7, lr}
 8002234:	b088      	sub	sp, #32
 8002236:	af00      	add	r7, sp, #0
 8002238:	60f8      	str	r0, [r7, #12]
 800223a:	60b9      	str	r1, [r7, #8]
 800223c:	4613      	mov	r3, r2
 800223e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002240:	88fb      	ldrh	r3, [r7, #6]
 8002242:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d07e      	beq.n	8002348 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002252:	b29b      	uxth	r3, r3
 8002254:	461a      	mov	r2, r3
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	00db      	lsls	r3, r3, #3
 800225c:	4413      	add	r3, r2
 800225e:	3302      	adds	r3, #2
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	6812      	ldr	r2, [r2, #0]
 8002266:	4413      	add	r3, r2
 8002268:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800226c:	881b      	ldrh	r3, [r3, #0]
 800226e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002272:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	699a      	ldr	r2, [r3, #24]
 8002278:	8b7b      	ldrh	r3, [r7, #26]
 800227a:	429a      	cmp	r2, r3
 800227c:	d306      	bcc.n	800228c <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	699a      	ldr	r2, [r3, #24]
 8002282:	8b7b      	ldrh	r3, [r7, #26]
 8002284:	1ad2      	subs	r2, r2, r3
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	619a      	str	r2, [r3, #24]
 800228a:	e002      	b.n	8002292 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	2200      	movs	r2, #0
 8002290:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	699b      	ldr	r3, [r3, #24]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d123      	bne.n	80022e2 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	461a      	mov	r2, r3
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	4413      	add	r3, r2
 80022a8:	881b      	ldrh	r3, [r3, #0]
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022b4:	833b      	strh	r3, [r7, #24]
 80022b6:	8b3b      	ldrh	r3, [r7, #24]
 80022b8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80022bc:	833b      	strh	r3, [r7, #24]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	461a      	mov	r2, r3
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	441a      	add	r2, r3
 80022cc:	8b3b      	ldrh	r3, [r7, #24]
 80022ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022de:	b29b      	uxth	r3, r3
 80022e0:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80022e2:	88fb      	ldrh	r3, [r7, #6]
 80022e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d01f      	beq.n	800232c <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	461a      	mov	r2, r3
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	4413      	add	r3, r2
 80022fa:	881b      	ldrh	r3, [r3, #0]
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002306:	82fb      	strh	r3, [r7, #22]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	461a      	mov	r2, r3
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	441a      	add	r2, r3
 8002316:	8afb      	ldrh	r3, [r7, #22]
 8002318:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800231c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002320:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002324:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002328:	b29b      	uxth	r3, r3
 800232a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800232c:	8b7b      	ldrh	r3, [r7, #26]
 800232e:	2b00      	cmp	r3, #0
 8002330:	f000 8087 	beq.w	8002442 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6818      	ldr	r0, [r3, #0]
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	6959      	ldr	r1, [r3, #20]
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	891a      	ldrh	r2, [r3, #8]
 8002340:	8b7b      	ldrh	r3, [r7, #26]
 8002342:	f004 fbcd 	bl	8006ae0 <USB_ReadPMA>
 8002346:	e07c      	b.n	8002442 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002350:	b29b      	uxth	r3, r3
 8002352:	461a      	mov	r2, r3
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	00db      	lsls	r3, r3, #3
 800235a:	4413      	add	r3, r2
 800235c:	3306      	adds	r3, #6
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	68fa      	ldr	r2, [r7, #12]
 8002362:	6812      	ldr	r2, [r2, #0]
 8002364:	4413      	add	r3, r2
 8002366:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800236a:	881b      	ldrh	r3, [r3, #0]
 800236c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002370:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	699a      	ldr	r2, [r3, #24]
 8002376:	8b7b      	ldrh	r3, [r7, #26]
 8002378:	429a      	cmp	r2, r3
 800237a:	d306      	bcc.n	800238a <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	699a      	ldr	r2, [r3, #24]
 8002380:	8b7b      	ldrh	r3, [r7, #26]
 8002382:	1ad2      	subs	r2, r2, r3
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	619a      	str	r2, [r3, #24]
 8002388:	e002      	b.n	8002390 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	2200      	movs	r2, #0
 800238e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d123      	bne.n	80023e0 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	461a      	mov	r2, r3
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	4413      	add	r3, r2
 80023a6:	881b      	ldrh	r3, [r3, #0]
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023b2:	83fb      	strh	r3, [r7, #30]
 80023b4:	8bfb      	ldrh	r3, [r7, #30]
 80023b6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80023ba:	83fb      	strh	r3, [r7, #30]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	461a      	mov	r2, r3
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	441a      	add	r2, r3
 80023ca:	8bfb      	ldrh	r3, [r7, #30]
 80023cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023dc:	b29b      	uxth	r3, r3
 80023de:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80023e0:	88fb      	ldrh	r3, [r7, #6]
 80023e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d11f      	bne.n	800242a <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	461a      	mov	r2, r3
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	4413      	add	r3, r2
 80023f8:	881b      	ldrh	r3, [r3, #0]
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002400:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002404:	83bb      	strh	r3, [r7, #28]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	461a      	mov	r2, r3
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	441a      	add	r2, r3
 8002414:	8bbb      	ldrh	r3, [r7, #28]
 8002416:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800241a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800241e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002422:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002426:	b29b      	uxth	r3, r3
 8002428:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800242a:	8b7b      	ldrh	r3, [r7, #26]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d008      	beq.n	8002442 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6818      	ldr	r0, [r3, #0]
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	6959      	ldr	r1, [r3, #20]
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	895a      	ldrh	r2, [r3, #10]
 800243c:	8b7b      	ldrh	r3, [r7, #26]
 800243e:	f004 fb4f 	bl	8006ae0 <USB_ReadPMA>
    }
  }

  return count;
 8002442:	8b7b      	ldrh	r3, [r7, #26]
}
 8002444:	4618      	mov	r0, r3
 8002446:	3720      	adds	r7, #32
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b0a4      	sub	sp, #144	; 0x90
 8002450:	af00      	add	r7, sp, #0
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	4613      	mov	r3, r2
 8002458:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800245a:	88fb      	ldrh	r3, [r7, #6]
 800245c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002460:	2b00      	cmp	r3, #0
 8002462:	f000 81dd 	beq.w	8002820 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800246e:	b29b      	uxth	r3, r3
 8002470:	461a      	mov	r2, r3
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	00db      	lsls	r3, r3, #3
 8002478:	4413      	add	r3, r2
 800247a:	3302      	adds	r3, #2
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	68fa      	ldr	r2, [r7, #12]
 8002480:	6812      	ldr	r2, [r2, #0]
 8002482:	4413      	add	r3, r2
 8002484:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002488:	881b      	ldrh	r3, [r3, #0]
 800248a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800248e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	699a      	ldr	r2, [r3, #24]
 8002496:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800249a:	429a      	cmp	r2, r3
 800249c:	d907      	bls.n	80024ae <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	699a      	ldr	r2, [r3, #24]
 80024a2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80024a6:	1ad2      	subs	r2, r2, r3
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	619a      	str	r2, [r3, #24]
 80024ac:	e002      	b.n	80024b4 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	2200      	movs	r2, #0
 80024b2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	f040 80b9 	bne.w	8002630 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	785b      	ldrb	r3, [r3, #1]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d126      	bne.n	8002514 <HAL_PCD_EP_DB_Transmit+0xc8>
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	461a      	mov	r2, r3
 80024d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024da:	4413      	add	r3, r2
 80024dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	011a      	lsls	r2, r3, #4
 80024e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e6:	4413      	add	r3, r2
 80024e8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80024ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80024ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f0:	881b      	ldrh	r3, [r3, #0]
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024f8:	b29a      	uxth	r2, r3
 80024fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024fc:	801a      	strh	r2, [r3, #0]
 80024fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002500:	881b      	ldrh	r3, [r3, #0]
 8002502:	b29b      	uxth	r3, r3
 8002504:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002508:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800250c:	b29a      	uxth	r2, r3
 800250e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002510:	801a      	strh	r2, [r3, #0]
 8002512:	e01a      	b.n	800254a <HAL_PCD_EP_DB_Transmit+0xfe>
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	785b      	ldrb	r3, [r3, #1]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d116      	bne.n	800254a <HAL_PCD_EP_DB_Transmit+0xfe>
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	637b      	str	r3, [r7, #52]	; 0x34
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800252a:	b29b      	uxth	r3, r3
 800252c:	461a      	mov	r2, r3
 800252e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002530:	4413      	add	r3, r2
 8002532:	637b      	str	r3, [r7, #52]	; 0x34
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	011a      	lsls	r2, r3, #4
 800253a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800253c:	4413      	add	r3, r2
 800253e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002542:	633b      	str	r3, [r7, #48]	; 0x30
 8002544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002546:	2200      	movs	r2, #0
 8002548:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	627b      	str	r3, [r7, #36]	; 0x24
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	785b      	ldrb	r3, [r3, #1]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d126      	bne.n	80025a6 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	61fb      	str	r3, [r7, #28]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002566:	b29b      	uxth	r3, r3
 8002568:	461a      	mov	r2, r3
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	4413      	add	r3, r2
 800256e:	61fb      	str	r3, [r7, #28]
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	011a      	lsls	r2, r3, #4
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	4413      	add	r3, r2
 800257a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800257e:	61bb      	str	r3, [r7, #24]
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	881b      	ldrh	r3, [r3, #0]
 8002584:	b29b      	uxth	r3, r3
 8002586:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800258a:	b29a      	uxth	r2, r3
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	801a      	strh	r2, [r3, #0]
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	881b      	ldrh	r3, [r3, #0]
 8002594:	b29b      	uxth	r3, r3
 8002596:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800259a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800259e:	b29a      	uxth	r2, r3
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	801a      	strh	r2, [r3, #0]
 80025a4:	e017      	b.n	80025d6 <HAL_PCD_EP_DB_Transmit+0x18a>
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	785b      	ldrb	r3, [r3, #1]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d113      	bne.n	80025d6 <HAL_PCD_EP_DB_Transmit+0x18a>
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	461a      	mov	r2, r3
 80025ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025bc:	4413      	add	r3, r2
 80025be:	627b      	str	r3, [r7, #36]	; 0x24
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	011a      	lsls	r2, r3, #4
 80025c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c8:	4413      	add	r3, r2
 80025ca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80025ce:	623b      	str	r3, [r7, #32]
 80025d0:	6a3b      	ldr	r3, [r7, #32]
 80025d2:	2200      	movs	r2, #0
 80025d4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	4619      	mov	r1, r3
 80025dc:	68f8      	ldr	r0, [r7, #12]
 80025de:	f006 f884 	bl	80086ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80025e2:	88fb      	ldrh	r3, [r7, #6]
 80025e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f000 82fc 	beq.w	8002be6 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	461a      	mov	r2, r3
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	4413      	add	r3, r2
 80025fc:	881b      	ldrh	r3, [r3, #0]
 80025fe:	b29b      	uxth	r3, r3
 8002600:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002604:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002608:	82fb      	strh	r3, [r7, #22]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	461a      	mov	r2, r3
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	441a      	add	r2, r3
 8002618:	8afb      	ldrh	r3, [r7, #22]
 800261a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800261e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002622:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002626:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800262a:	b29b      	uxth	r3, r3
 800262c:	8013      	strh	r3, [r2, #0]
 800262e:	e2da      	b.n	8002be6 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002630:	88fb      	ldrh	r3, [r7, #6]
 8002632:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d021      	beq.n	800267e <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	461a      	mov	r2, r3
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	4413      	add	r3, r2
 8002648:	881b      	ldrh	r3, [r3, #0]
 800264a:	b29b      	uxth	r3, r3
 800264c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002650:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002654:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	461a      	mov	r2, r3
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	441a      	add	r2, r3
 8002666:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800266a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800266e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002672:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002676:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800267a:	b29b      	uxth	r3, r3
 800267c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002684:	2b01      	cmp	r3, #1
 8002686:	f040 82ae 	bne.w	8002be6 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	695a      	ldr	r2, [r3, #20]
 800268e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002692:	441a      	add	r2, r3
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	69da      	ldr	r2, [r3, #28]
 800269c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80026a0:	441a      	add	r2, r3
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	6a1a      	ldr	r2, [r3, #32]
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d30b      	bcc.n	80026ca <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	6a1a      	ldr	r2, [r3, #32]
 80026be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026c2:	1ad2      	subs	r2, r2, r3
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	621a      	str	r2, [r3, #32]
 80026c8:	e017      	b.n	80026fa <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	6a1b      	ldr	r3, [r3, #32]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d108      	bne.n	80026e4 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80026d2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80026d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80026e2:	e00a      	b.n	80026fa <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	6a1b      	ldr	r3, [r3, #32]
 80026f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	2200      	movs	r2, #0
 80026f8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	785b      	ldrb	r3, [r3, #1]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d165      	bne.n	80027ce <HAL_PCD_EP_DB_Transmit+0x382>
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002710:	b29b      	uxth	r3, r3
 8002712:	461a      	mov	r2, r3
 8002714:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002716:	4413      	add	r3, r2
 8002718:	63fb      	str	r3, [r7, #60]	; 0x3c
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	011a      	lsls	r2, r3, #4
 8002720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002722:	4413      	add	r3, r2
 8002724:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002728:	63bb      	str	r3, [r7, #56]	; 0x38
 800272a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800272c:	881b      	ldrh	r3, [r3, #0]
 800272e:	b29b      	uxth	r3, r3
 8002730:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002734:	b29a      	uxth	r2, r3
 8002736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002738:	801a      	strh	r2, [r3, #0]
 800273a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800273e:	2b3e      	cmp	r3, #62	; 0x3e
 8002740:	d91d      	bls.n	800277e <HAL_PCD_EP_DB_Transmit+0x332>
 8002742:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002746:	095b      	lsrs	r3, r3, #5
 8002748:	64bb      	str	r3, [r7, #72]	; 0x48
 800274a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800274e:	f003 031f 	and.w	r3, r3, #31
 8002752:	2b00      	cmp	r3, #0
 8002754:	d102      	bne.n	800275c <HAL_PCD_EP_DB_Transmit+0x310>
 8002756:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002758:	3b01      	subs	r3, #1
 800275a:	64bb      	str	r3, [r7, #72]	; 0x48
 800275c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800275e:	881b      	ldrh	r3, [r3, #0]
 8002760:	b29a      	uxth	r2, r3
 8002762:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002764:	b29b      	uxth	r3, r3
 8002766:	029b      	lsls	r3, r3, #10
 8002768:	b29b      	uxth	r3, r3
 800276a:	4313      	orrs	r3, r2
 800276c:	b29b      	uxth	r3, r3
 800276e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002772:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002776:	b29a      	uxth	r2, r3
 8002778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800277a:	801a      	strh	r2, [r3, #0]
 800277c:	e044      	b.n	8002808 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800277e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002782:	2b00      	cmp	r3, #0
 8002784:	d10a      	bne.n	800279c <HAL_PCD_EP_DB_Transmit+0x350>
 8002786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002788:	881b      	ldrh	r3, [r3, #0]
 800278a:	b29b      	uxth	r3, r3
 800278c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002790:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002794:	b29a      	uxth	r2, r3
 8002796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002798:	801a      	strh	r2, [r3, #0]
 800279a:	e035      	b.n	8002808 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800279c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027a0:	085b      	lsrs	r3, r3, #1
 80027a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80027a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027a8:	f003 0301 	and.w	r3, r3, #1
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d002      	beq.n	80027b6 <HAL_PCD_EP_DB_Transmit+0x36a>
 80027b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027b2:	3301      	adds	r3, #1
 80027b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80027b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027b8:	881b      	ldrh	r3, [r3, #0]
 80027ba:	b29a      	uxth	r2, r3
 80027bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027be:	b29b      	uxth	r3, r3
 80027c0:	029b      	lsls	r3, r3, #10
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	4313      	orrs	r3, r2
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ca:	801a      	strh	r2, [r3, #0]
 80027cc:	e01c      	b.n	8002808 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	785b      	ldrb	r3, [r3, #1]
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d118      	bne.n	8002808 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	647b      	str	r3, [r7, #68]	; 0x44
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	461a      	mov	r2, r3
 80027e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027ea:	4413      	add	r3, r2
 80027ec:	647b      	str	r3, [r7, #68]	; 0x44
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	011a      	lsls	r2, r3, #4
 80027f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027f6:	4413      	add	r3, r2
 80027f8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80027fc:	643b      	str	r3, [r7, #64]	; 0x40
 80027fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002802:	b29a      	uxth	r2, r3
 8002804:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002806:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6818      	ldr	r0, [r3, #0]
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	6959      	ldr	r1, [r3, #20]
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	891a      	ldrh	r2, [r3, #8]
 8002814:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002818:	b29b      	uxth	r3, r3
 800281a:	f004 f91c 	bl	8006a56 <USB_WritePMA>
 800281e:	e1e2      	b.n	8002be6 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002828:	b29b      	uxth	r3, r3
 800282a:	461a      	mov	r2, r3
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	00db      	lsls	r3, r3, #3
 8002832:	4413      	add	r3, r2
 8002834:	3306      	adds	r3, #6
 8002836:	005b      	lsls	r3, r3, #1
 8002838:	68fa      	ldr	r2, [r7, #12]
 800283a:	6812      	ldr	r2, [r2, #0]
 800283c:	4413      	add	r3, r2
 800283e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002842:	881b      	ldrh	r3, [r3, #0]
 8002844:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002848:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	699a      	ldr	r2, [r3, #24]
 8002850:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002854:	429a      	cmp	r2, r3
 8002856:	d307      	bcc.n	8002868 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	699a      	ldr	r2, [r3, #24]
 800285c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002860:	1ad2      	subs	r2, r2, r3
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	619a      	str	r2, [r3, #24]
 8002866:	e002      	b.n	800286e <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	2200      	movs	r2, #0
 800286c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	2b00      	cmp	r3, #0
 8002874:	f040 80c0 	bne.w	80029f8 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	785b      	ldrb	r3, [r3, #1]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d126      	bne.n	80028ce <HAL_PCD_EP_DB_Transmit+0x482>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800288e:	b29b      	uxth	r3, r3
 8002890:	461a      	mov	r2, r3
 8002892:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002894:	4413      	add	r3, r2
 8002896:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	011a      	lsls	r2, r3, #4
 800289e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80028a0:	4413      	add	r3, r2
 80028a2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80028a6:	67bb      	str	r3, [r7, #120]	; 0x78
 80028a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028aa:	881b      	ldrh	r3, [r3, #0]
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028b2:	b29a      	uxth	r2, r3
 80028b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028b6:	801a      	strh	r2, [r3, #0]
 80028b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028ba:	881b      	ldrh	r3, [r3, #0]
 80028bc:	b29b      	uxth	r3, r3
 80028be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028c6:	b29a      	uxth	r2, r3
 80028c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028ca:	801a      	strh	r2, [r3, #0]
 80028cc:	e01a      	b.n	8002904 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	785b      	ldrb	r3, [r3, #1]
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d116      	bne.n	8002904 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	667b      	str	r3, [r7, #100]	; 0x64
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	461a      	mov	r2, r3
 80028e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80028ea:	4413      	add	r3, r2
 80028ec:	667b      	str	r3, [r7, #100]	; 0x64
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	011a      	lsls	r2, r3, #4
 80028f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80028f6:	4413      	add	r3, r2
 80028f8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80028fc:	663b      	str	r3, [r7, #96]	; 0x60
 80028fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002900:	2200      	movs	r2, #0
 8002902:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	677b      	str	r3, [r7, #116]	; 0x74
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	785b      	ldrb	r3, [r3, #1]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d12b      	bne.n	800296a <HAL_PCD_EP_DB_Transmit+0x51e>
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002920:	b29b      	uxth	r3, r3
 8002922:	461a      	mov	r2, r3
 8002924:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002926:	4413      	add	r3, r2
 8002928:	66fb      	str	r3, [r7, #108]	; 0x6c
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	011a      	lsls	r2, r3, #4
 8002930:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002932:	4413      	add	r3, r2
 8002934:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002938:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800293c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002940:	881b      	ldrh	r3, [r3, #0]
 8002942:	b29b      	uxth	r3, r3
 8002944:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002948:	b29a      	uxth	r2, r3
 800294a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800294e:	801a      	strh	r2, [r3, #0]
 8002950:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002954:	881b      	ldrh	r3, [r3, #0]
 8002956:	b29b      	uxth	r3, r3
 8002958:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800295c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002960:	b29a      	uxth	r2, r3
 8002962:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002966:	801a      	strh	r2, [r3, #0]
 8002968:	e017      	b.n	800299a <HAL_PCD_EP_DB_Transmit+0x54e>
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	785b      	ldrb	r3, [r3, #1]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d113      	bne.n	800299a <HAL_PCD_EP_DB_Transmit+0x54e>
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800297a:	b29b      	uxth	r3, r3
 800297c:	461a      	mov	r2, r3
 800297e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002980:	4413      	add	r3, r2
 8002982:	677b      	str	r3, [r7, #116]	; 0x74
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	011a      	lsls	r2, r3, #4
 800298a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800298c:	4413      	add	r3, r2
 800298e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002992:	673b      	str	r3, [r7, #112]	; 0x70
 8002994:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002996:	2200      	movs	r2, #0
 8002998:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	4619      	mov	r1, r3
 80029a0:	68f8      	ldr	r0, [r7, #12]
 80029a2:	f005 fea2 	bl	80086ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80029a6:	88fb      	ldrh	r3, [r7, #6]
 80029a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	f040 811a 	bne.w	8002be6 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	461a      	mov	r2, r3
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	4413      	add	r3, r2
 80029c0:	881b      	ldrh	r3, [r3, #0]
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029cc:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	461a      	mov	r2, r3
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	441a      	add	r2, r3
 80029de:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80029e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	8013      	strh	r3, [r2, #0]
 80029f6:	e0f6      	b.n	8002be6 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80029f8:	88fb      	ldrh	r3, [r7, #6]
 80029fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d121      	bne.n	8002a46 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	461a      	mov	r2, r3
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	4413      	add	r3, r2
 8002a10:	881b      	ldrh	r3, [r3, #0]
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a1c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	461a      	mov	r2, r3
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	441a      	add	r2, r3
 8002a2e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	f040 80ca 	bne.w	8002be6 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	695a      	ldr	r2, [r3, #20]
 8002a56:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002a5a:	441a      	add	r2, r3
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	69da      	ldr	r2, [r3, #28]
 8002a64:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002a68:	441a      	add	r2, r3
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	6a1a      	ldr	r2, [r3, #32]
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d30b      	bcc.n	8002a92 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	6a1a      	ldr	r2, [r3, #32]
 8002a86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a8a:	1ad2      	subs	r2, r2, r3
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	621a      	str	r2, [r3, #32]
 8002a90:	e017      	b.n	8002ac2 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	6a1b      	ldr	r3, [r3, #32]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d108      	bne.n	8002aac <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8002a9a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002a9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002aaa:	e00a      	b.n	8002ac2 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	6a1b      	ldr	r3, [r3, #32]
 8002ab0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	657b      	str	r3, [r7, #84]	; 0x54
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	785b      	ldrb	r3, [r3, #1]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d165      	bne.n	8002b9c <HAL_PCD_EP_DB_Transmit+0x750>
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ae4:	4413      	add	r3, r2
 8002ae6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	011a      	lsls	r2, r3, #4
 8002aee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002af0:	4413      	add	r3, r2
 8002af2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002af6:	65bb      	str	r3, [r7, #88]	; 0x58
 8002af8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002afa:	881b      	ldrh	r3, [r3, #0]
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b02:	b29a      	uxth	r2, r3
 8002b04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b06:	801a      	strh	r2, [r3, #0]
 8002b08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b0c:	2b3e      	cmp	r3, #62	; 0x3e
 8002b0e:	d91d      	bls.n	8002b4c <HAL_PCD_EP_DB_Transmit+0x700>
 8002b10:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b14:	095b      	lsrs	r3, r3, #5
 8002b16:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b18:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b1c:	f003 031f 	and.w	r3, r3, #31
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d102      	bne.n	8002b2a <HAL_PCD_EP_DB_Transmit+0x6de>
 8002b24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b26:	3b01      	subs	r3, #1
 8002b28:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b2c:	881b      	ldrh	r3, [r3, #0]
 8002b2e:	b29a      	uxth	r2, r3
 8002b30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	029b      	lsls	r3, r3, #10
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b44:	b29a      	uxth	r2, r3
 8002b46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b48:	801a      	strh	r2, [r3, #0]
 8002b4a:	e041      	b.n	8002bd0 <HAL_PCD_EP_DB_Transmit+0x784>
 8002b4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d10a      	bne.n	8002b6a <HAL_PCD_EP_DB_Transmit+0x71e>
 8002b54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b56:	881b      	ldrh	r3, [r3, #0]
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b62:	b29a      	uxth	r2, r3
 8002b64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b66:	801a      	strh	r2, [r3, #0]
 8002b68:	e032      	b.n	8002bd0 <HAL_PCD_EP_DB_Transmit+0x784>
 8002b6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b6e:	085b      	lsrs	r3, r3, #1
 8002b70:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d002      	beq.n	8002b84 <HAL_PCD_EP_DB_Transmit+0x738>
 8002b7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b80:	3301      	adds	r3, #1
 8002b82:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b86:	881b      	ldrh	r3, [r3, #0]
 8002b88:	b29a      	uxth	r2, r3
 8002b8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	029b      	lsls	r3, r3, #10
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	4313      	orrs	r3, r2
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b98:	801a      	strh	r2, [r3, #0]
 8002b9a:	e019      	b.n	8002bd0 <HAL_PCD_EP_DB_Transmit+0x784>
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	785b      	ldrb	r3, [r3, #1]
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d115      	bne.n	8002bd0 <HAL_PCD_EP_DB_Transmit+0x784>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	461a      	mov	r2, r3
 8002bb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bb2:	4413      	add	r3, r2
 8002bb4:	657b      	str	r3, [r7, #84]	; 0x54
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	011a      	lsls	r2, r3, #4
 8002bbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bbe:	4413      	add	r3, r2
 8002bc0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002bc4:	653b      	str	r3, [r7, #80]	; 0x50
 8002bc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002bca:	b29a      	uxth	r2, r3
 8002bcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bce:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6818      	ldr	r0, [r3, #0]
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	6959      	ldr	r1, [r3, #20]
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	895a      	ldrh	r2, [r3, #10]
 8002bdc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	f003 ff38 	bl	8006a56 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	461a      	mov	r2, r3
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	4413      	add	r3, r2
 8002bf4:	881b      	ldrh	r3, [r3, #0]
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c00:	82bb      	strh	r3, [r7, #20]
 8002c02:	8abb      	ldrh	r3, [r7, #20]
 8002c04:	f083 0310 	eor.w	r3, r3, #16
 8002c08:	82bb      	strh	r3, [r7, #20]
 8002c0a:	8abb      	ldrh	r3, [r7, #20]
 8002c0c:	f083 0320 	eor.w	r3, r3, #32
 8002c10:	82bb      	strh	r3, [r7, #20]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	461a      	mov	r2, r3
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	441a      	add	r2, r3
 8002c20:	8abb      	ldrh	r3, [r7, #20]
 8002c22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002c36:	2300      	movs	r3, #0
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3790      	adds	r7, #144	; 0x90
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b087      	sub	sp, #28
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	607b      	str	r3, [r7, #4]
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	817b      	strh	r3, [r7, #10]
 8002c4e:	4613      	mov	r3, r2
 8002c50:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002c52:	897b      	ldrh	r3, [r7, #10]
 8002c54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d00b      	beq.n	8002c76 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c5e:	897b      	ldrh	r3, [r7, #10]
 8002c60:	f003 0307 	and.w	r3, r3, #7
 8002c64:	1c5a      	adds	r2, r3, #1
 8002c66:	4613      	mov	r3, r2
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	4413      	add	r3, r2
 8002c6c:	00db      	lsls	r3, r3, #3
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	4413      	add	r3, r2
 8002c72:	617b      	str	r3, [r7, #20]
 8002c74:	e009      	b.n	8002c8a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002c76:	897a      	ldrh	r2, [r7, #10]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	4413      	add	r3, r2
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c84:	68fa      	ldr	r2, [r7, #12]
 8002c86:	4413      	add	r3, r2
 8002c88:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002c8a:	893b      	ldrh	r3, [r7, #8]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d107      	bne.n	8002ca0 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	2200      	movs	r2, #0
 8002c94:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	b29a      	uxth	r2, r3
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	80da      	strh	r2, [r3, #6]
 8002c9e:	e00b      	b.n	8002cb8 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	b29a      	uxth	r2, r3
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	0c1b      	lsrs	r3, r3, #16
 8002cb2:	b29a      	uxth	r2, r3
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	371c      	adds	r7, #28
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bc80      	pop	{r7}
 8002cc2:	4770      	bx	lr

08002cc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b086      	sub	sp, #24
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d101      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e272      	b.n	80031bc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	f000 8087 	beq.w	8002df2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ce4:	4b92      	ldr	r3, [pc, #584]	; (8002f30 <HAL_RCC_OscConfig+0x26c>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f003 030c 	and.w	r3, r3, #12
 8002cec:	2b04      	cmp	r3, #4
 8002cee:	d00c      	beq.n	8002d0a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002cf0:	4b8f      	ldr	r3, [pc, #572]	; (8002f30 <HAL_RCC_OscConfig+0x26c>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f003 030c 	and.w	r3, r3, #12
 8002cf8:	2b08      	cmp	r3, #8
 8002cfa:	d112      	bne.n	8002d22 <HAL_RCC_OscConfig+0x5e>
 8002cfc:	4b8c      	ldr	r3, [pc, #560]	; (8002f30 <HAL_RCC_OscConfig+0x26c>)
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d08:	d10b      	bne.n	8002d22 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d0a:	4b89      	ldr	r3, [pc, #548]	; (8002f30 <HAL_RCC_OscConfig+0x26c>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d06c      	beq.n	8002df0 <HAL_RCC_OscConfig+0x12c>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d168      	bne.n	8002df0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e24c      	b.n	80031bc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d2a:	d106      	bne.n	8002d3a <HAL_RCC_OscConfig+0x76>
 8002d2c:	4b80      	ldr	r3, [pc, #512]	; (8002f30 <HAL_RCC_OscConfig+0x26c>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a7f      	ldr	r2, [pc, #508]	; (8002f30 <HAL_RCC_OscConfig+0x26c>)
 8002d32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d36:	6013      	str	r3, [r2, #0]
 8002d38:	e02e      	b.n	8002d98 <HAL_RCC_OscConfig+0xd4>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d10c      	bne.n	8002d5c <HAL_RCC_OscConfig+0x98>
 8002d42:	4b7b      	ldr	r3, [pc, #492]	; (8002f30 <HAL_RCC_OscConfig+0x26c>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a7a      	ldr	r2, [pc, #488]	; (8002f30 <HAL_RCC_OscConfig+0x26c>)
 8002d48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d4c:	6013      	str	r3, [r2, #0]
 8002d4e:	4b78      	ldr	r3, [pc, #480]	; (8002f30 <HAL_RCC_OscConfig+0x26c>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a77      	ldr	r2, [pc, #476]	; (8002f30 <HAL_RCC_OscConfig+0x26c>)
 8002d54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d58:	6013      	str	r3, [r2, #0]
 8002d5a:	e01d      	b.n	8002d98 <HAL_RCC_OscConfig+0xd4>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d64:	d10c      	bne.n	8002d80 <HAL_RCC_OscConfig+0xbc>
 8002d66:	4b72      	ldr	r3, [pc, #456]	; (8002f30 <HAL_RCC_OscConfig+0x26c>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a71      	ldr	r2, [pc, #452]	; (8002f30 <HAL_RCC_OscConfig+0x26c>)
 8002d6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d70:	6013      	str	r3, [r2, #0]
 8002d72:	4b6f      	ldr	r3, [pc, #444]	; (8002f30 <HAL_RCC_OscConfig+0x26c>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a6e      	ldr	r2, [pc, #440]	; (8002f30 <HAL_RCC_OscConfig+0x26c>)
 8002d78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d7c:	6013      	str	r3, [r2, #0]
 8002d7e:	e00b      	b.n	8002d98 <HAL_RCC_OscConfig+0xd4>
 8002d80:	4b6b      	ldr	r3, [pc, #428]	; (8002f30 <HAL_RCC_OscConfig+0x26c>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a6a      	ldr	r2, [pc, #424]	; (8002f30 <HAL_RCC_OscConfig+0x26c>)
 8002d86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d8a:	6013      	str	r3, [r2, #0]
 8002d8c:	4b68      	ldr	r3, [pc, #416]	; (8002f30 <HAL_RCC_OscConfig+0x26c>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a67      	ldr	r2, [pc, #412]	; (8002f30 <HAL_RCC_OscConfig+0x26c>)
 8002d92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d96:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d013      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da0:	f7fd fdaa 	bl	80008f8 <HAL_GetTick>
 8002da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002da6:	e008      	b.n	8002dba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002da8:	f7fd fda6 	bl	80008f8 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b64      	cmp	r3, #100	; 0x64
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e200      	b.n	80031bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dba:	4b5d      	ldr	r3, [pc, #372]	; (8002f30 <HAL_RCC_OscConfig+0x26c>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d0f0      	beq.n	8002da8 <HAL_RCC_OscConfig+0xe4>
 8002dc6:	e014      	b.n	8002df2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc8:	f7fd fd96 	bl	80008f8 <HAL_GetTick>
 8002dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dce:	e008      	b.n	8002de2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dd0:	f7fd fd92 	bl	80008f8 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b64      	cmp	r3, #100	; 0x64
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e1ec      	b.n	80031bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002de2:	4b53      	ldr	r3, [pc, #332]	; (8002f30 <HAL_RCC_OscConfig+0x26c>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1f0      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x10c>
 8002dee:	e000      	b.n	8002df2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002df0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d063      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002dfe:	4b4c      	ldr	r3, [pc, #304]	; (8002f30 <HAL_RCC_OscConfig+0x26c>)
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f003 030c 	and.w	r3, r3, #12
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d00b      	beq.n	8002e22 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002e0a:	4b49      	ldr	r3, [pc, #292]	; (8002f30 <HAL_RCC_OscConfig+0x26c>)
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f003 030c 	and.w	r3, r3, #12
 8002e12:	2b08      	cmp	r3, #8
 8002e14:	d11c      	bne.n	8002e50 <HAL_RCC_OscConfig+0x18c>
 8002e16:	4b46      	ldr	r3, [pc, #280]	; (8002f30 <HAL_RCC_OscConfig+0x26c>)
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d116      	bne.n	8002e50 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e22:	4b43      	ldr	r3, [pc, #268]	; (8002f30 <HAL_RCC_OscConfig+0x26c>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d005      	beq.n	8002e3a <HAL_RCC_OscConfig+0x176>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	691b      	ldr	r3, [r3, #16]
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d001      	beq.n	8002e3a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e1c0      	b.n	80031bc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e3a:	4b3d      	ldr	r3, [pc, #244]	; (8002f30 <HAL_RCC_OscConfig+0x26c>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	695b      	ldr	r3, [r3, #20]
 8002e46:	00db      	lsls	r3, r3, #3
 8002e48:	4939      	ldr	r1, [pc, #228]	; (8002f30 <HAL_RCC_OscConfig+0x26c>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e4e:	e03a      	b.n	8002ec6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d020      	beq.n	8002e9a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e58:	4b36      	ldr	r3, [pc, #216]	; (8002f34 <HAL_RCC_OscConfig+0x270>)
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e5e:	f7fd fd4b 	bl	80008f8 <HAL_GetTick>
 8002e62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e64:	e008      	b.n	8002e78 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e66:	f7fd fd47 	bl	80008f8 <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d901      	bls.n	8002e78 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e1a1      	b.n	80031bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e78:	4b2d      	ldr	r3, [pc, #180]	; (8002f30 <HAL_RCC_OscConfig+0x26c>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0302 	and.w	r3, r3, #2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d0f0      	beq.n	8002e66 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e84:	4b2a      	ldr	r3, [pc, #168]	; (8002f30 <HAL_RCC_OscConfig+0x26c>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	695b      	ldr	r3, [r3, #20]
 8002e90:	00db      	lsls	r3, r3, #3
 8002e92:	4927      	ldr	r1, [pc, #156]	; (8002f30 <HAL_RCC_OscConfig+0x26c>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	600b      	str	r3, [r1, #0]
 8002e98:	e015      	b.n	8002ec6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e9a:	4b26      	ldr	r3, [pc, #152]	; (8002f34 <HAL_RCC_OscConfig+0x270>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea0:	f7fd fd2a 	bl	80008f8 <HAL_GetTick>
 8002ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ea6:	e008      	b.n	8002eba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ea8:	f7fd fd26 	bl	80008f8 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e180      	b.n	80031bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eba:	4b1d      	ldr	r3, [pc, #116]	; (8002f30 <HAL_RCC_OscConfig+0x26c>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d1f0      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0308 	and.w	r3, r3, #8
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d03a      	beq.n	8002f48 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	699b      	ldr	r3, [r3, #24]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d019      	beq.n	8002f0e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002eda:	4b17      	ldr	r3, [pc, #92]	; (8002f38 <HAL_RCC_OscConfig+0x274>)
 8002edc:	2201      	movs	r2, #1
 8002ede:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ee0:	f7fd fd0a 	bl	80008f8 <HAL_GetTick>
 8002ee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ee6:	e008      	b.n	8002efa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ee8:	f7fd fd06 	bl	80008f8 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d901      	bls.n	8002efa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e160      	b.n	80031bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002efa:	4b0d      	ldr	r3, [pc, #52]	; (8002f30 <HAL_RCC_OscConfig+0x26c>)
 8002efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efe:	f003 0302 	and.w	r3, r3, #2
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d0f0      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002f06:	2001      	movs	r0, #1
 8002f08:	f000 face 	bl	80034a8 <RCC_Delay>
 8002f0c:	e01c      	b.n	8002f48 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f0e:	4b0a      	ldr	r3, [pc, #40]	; (8002f38 <HAL_RCC_OscConfig+0x274>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f14:	f7fd fcf0 	bl	80008f8 <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f1a:	e00f      	b.n	8002f3c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f1c:	f7fd fcec 	bl	80008f8 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d908      	bls.n	8002f3c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e146      	b.n	80031bc <HAL_RCC_OscConfig+0x4f8>
 8002f2e:	bf00      	nop
 8002f30:	40021000 	.word	0x40021000
 8002f34:	42420000 	.word	0x42420000
 8002f38:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f3c:	4b92      	ldr	r3, [pc, #584]	; (8003188 <HAL_RCC_OscConfig+0x4c4>)
 8002f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f40:	f003 0302 	and.w	r3, r3, #2
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d1e9      	bne.n	8002f1c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0304 	and.w	r3, r3, #4
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f000 80a6 	beq.w	80030a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f56:	2300      	movs	r3, #0
 8002f58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f5a:	4b8b      	ldr	r3, [pc, #556]	; (8003188 <HAL_RCC_OscConfig+0x4c4>)
 8002f5c:	69db      	ldr	r3, [r3, #28]
 8002f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d10d      	bne.n	8002f82 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f66:	4b88      	ldr	r3, [pc, #544]	; (8003188 <HAL_RCC_OscConfig+0x4c4>)
 8002f68:	69db      	ldr	r3, [r3, #28]
 8002f6a:	4a87      	ldr	r2, [pc, #540]	; (8003188 <HAL_RCC_OscConfig+0x4c4>)
 8002f6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f70:	61d3      	str	r3, [r2, #28]
 8002f72:	4b85      	ldr	r3, [pc, #532]	; (8003188 <HAL_RCC_OscConfig+0x4c4>)
 8002f74:	69db      	ldr	r3, [r3, #28]
 8002f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f7a:	60bb      	str	r3, [r7, #8]
 8002f7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f82:	4b82      	ldr	r3, [pc, #520]	; (800318c <HAL_RCC_OscConfig+0x4c8>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d118      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f8e:	4b7f      	ldr	r3, [pc, #508]	; (800318c <HAL_RCC_OscConfig+0x4c8>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a7e      	ldr	r2, [pc, #504]	; (800318c <HAL_RCC_OscConfig+0x4c8>)
 8002f94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f9a:	f7fd fcad 	bl	80008f8 <HAL_GetTick>
 8002f9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fa0:	e008      	b.n	8002fb4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fa2:	f7fd fca9 	bl	80008f8 <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	2b64      	cmp	r3, #100	; 0x64
 8002fae:	d901      	bls.n	8002fb4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e103      	b.n	80031bc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb4:	4b75      	ldr	r3, [pc, #468]	; (800318c <HAL_RCC_OscConfig+0x4c8>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d0f0      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d106      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x312>
 8002fc8:	4b6f      	ldr	r3, [pc, #444]	; (8003188 <HAL_RCC_OscConfig+0x4c4>)
 8002fca:	6a1b      	ldr	r3, [r3, #32]
 8002fcc:	4a6e      	ldr	r2, [pc, #440]	; (8003188 <HAL_RCC_OscConfig+0x4c4>)
 8002fce:	f043 0301 	orr.w	r3, r3, #1
 8002fd2:	6213      	str	r3, [r2, #32]
 8002fd4:	e02d      	b.n	8003032 <HAL_RCC_OscConfig+0x36e>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d10c      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x334>
 8002fde:	4b6a      	ldr	r3, [pc, #424]	; (8003188 <HAL_RCC_OscConfig+0x4c4>)
 8002fe0:	6a1b      	ldr	r3, [r3, #32]
 8002fe2:	4a69      	ldr	r2, [pc, #420]	; (8003188 <HAL_RCC_OscConfig+0x4c4>)
 8002fe4:	f023 0301 	bic.w	r3, r3, #1
 8002fe8:	6213      	str	r3, [r2, #32]
 8002fea:	4b67      	ldr	r3, [pc, #412]	; (8003188 <HAL_RCC_OscConfig+0x4c4>)
 8002fec:	6a1b      	ldr	r3, [r3, #32]
 8002fee:	4a66      	ldr	r2, [pc, #408]	; (8003188 <HAL_RCC_OscConfig+0x4c4>)
 8002ff0:	f023 0304 	bic.w	r3, r3, #4
 8002ff4:	6213      	str	r3, [r2, #32]
 8002ff6:	e01c      	b.n	8003032 <HAL_RCC_OscConfig+0x36e>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	2b05      	cmp	r3, #5
 8002ffe:	d10c      	bne.n	800301a <HAL_RCC_OscConfig+0x356>
 8003000:	4b61      	ldr	r3, [pc, #388]	; (8003188 <HAL_RCC_OscConfig+0x4c4>)
 8003002:	6a1b      	ldr	r3, [r3, #32]
 8003004:	4a60      	ldr	r2, [pc, #384]	; (8003188 <HAL_RCC_OscConfig+0x4c4>)
 8003006:	f043 0304 	orr.w	r3, r3, #4
 800300a:	6213      	str	r3, [r2, #32]
 800300c:	4b5e      	ldr	r3, [pc, #376]	; (8003188 <HAL_RCC_OscConfig+0x4c4>)
 800300e:	6a1b      	ldr	r3, [r3, #32]
 8003010:	4a5d      	ldr	r2, [pc, #372]	; (8003188 <HAL_RCC_OscConfig+0x4c4>)
 8003012:	f043 0301 	orr.w	r3, r3, #1
 8003016:	6213      	str	r3, [r2, #32]
 8003018:	e00b      	b.n	8003032 <HAL_RCC_OscConfig+0x36e>
 800301a:	4b5b      	ldr	r3, [pc, #364]	; (8003188 <HAL_RCC_OscConfig+0x4c4>)
 800301c:	6a1b      	ldr	r3, [r3, #32]
 800301e:	4a5a      	ldr	r2, [pc, #360]	; (8003188 <HAL_RCC_OscConfig+0x4c4>)
 8003020:	f023 0301 	bic.w	r3, r3, #1
 8003024:	6213      	str	r3, [r2, #32]
 8003026:	4b58      	ldr	r3, [pc, #352]	; (8003188 <HAL_RCC_OscConfig+0x4c4>)
 8003028:	6a1b      	ldr	r3, [r3, #32]
 800302a:	4a57      	ldr	r2, [pc, #348]	; (8003188 <HAL_RCC_OscConfig+0x4c4>)
 800302c:	f023 0304 	bic.w	r3, r3, #4
 8003030:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d015      	beq.n	8003066 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800303a:	f7fd fc5d 	bl	80008f8 <HAL_GetTick>
 800303e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003040:	e00a      	b.n	8003058 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003042:	f7fd fc59 	bl	80008f8 <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003050:	4293      	cmp	r3, r2
 8003052:	d901      	bls.n	8003058 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e0b1      	b.n	80031bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003058:	4b4b      	ldr	r3, [pc, #300]	; (8003188 <HAL_RCC_OscConfig+0x4c4>)
 800305a:	6a1b      	ldr	r3, [r3, #32]
 800305c:	f003 0302 	and.w	r3, r3, #2
 8003060:	2b00      	cmp	r3, #0
 8003062:	d0ee      	beq.n	8003042 <HAL_RCC_OscConfig+0x37e>
 8003064:	e014      	b.n	8003090 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003066:	f7fd fc47 	bl	80008f8 <HAL_GetTick>
 800306a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800306c:	e00a      	b.n	8003084 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800306e:	f7fd fc43 	bl	80008f8 <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	f241 3288 	movw	r2, #5000	; 0x1388
 800307c:	4293      	cmp	r3, r2
 800307e:	d901      	bls.n	8003084 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003080:	2303      	movs	r3, #3
 8003082:	e09b      	b.n	80031bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003084:	4b40      	ldr	r3, [pc, #256]	; (8003188 <HAL_RCC_OscConfig+0x4c4>)
 8003086:	6a1b      	ldr	r3, [r3, #32]
 8003088:	f003 0302 	and.w	r3, r3, #2
 800308c:	2b00      	cmp	r3, #0
 800308e:	d1ee      	bne.n	800306e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003090:	7dfb      	ldrb	r3, [r7, #23]
 8003092:	2b01      	cmp	r3, #1
 8003094:	d105      	bne.n	80030a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003096:	4b3c      	ldr	r3, [pc, #240]	; (8003188 <HAL_RCC_OscConfig+0x4c4>)
 8003098:	69db      	ldr	r3, [r3, #28]
 800309a:	4a3b      	ldr	r2, [pc, #236]	; (8003188 <HAL_RCC_OscConfig+0x4c4>)
 800309c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030a0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	69db      	ldr	r3, [r3, #28]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	f000 8087 	beq.w	80031ba <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030ac:	4b36      	ldr	r3, [pc, #216]	; (8003188 <HAL_RCC_OscConfig+0x4c4>)
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f003 030c 	and.w	r3, r3, #12
 80030b4:	2b08      	cmp	r3, #8
 80030b6:	d061      	beq.n	800317c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	69db      	ldr	r3, [r3, #28]
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d146      	bne.n	800314e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030c0:	4b33      	ldr	r3, [pc, #204]	; (8003190 <HAL_RCC_OscConfig+0x4cc>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c6:	f7fd fc17 	bl	80008f8 <HAL_GetTick>
 80030ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030cc:	e008      	b.n	80030e0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030ce:	f7fd fc13 	bl	80008f8 <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d901      	bls.n	80030e0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e06d      	b.n	80031bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030e0:	4b29      	ldr	r3, [pc, #164]	; (8003188 <HAL_RCC_OscConfig+0x4c4>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d1f0      	bne.n	80030ce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6a1b      	ldr	r3, [r3, #32]
 80030f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030f4:	d108      	bne.n	8003108 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80030f6:	4b24      	ldr	r3, [pc, #144]	; (8003188 <HAL_RCC_OscConfig+0x4c4>)
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	4921      	ldr	r1, [pc, #132]	; (8003188 <HAL_RCC_OscConfig+0x4c4>)
 8003104:	4313      	orrs	r3, r2
 8003106:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003108:	4b1f      	ldr	r3, [pc, #124]	; (8003188 <HAL_RCC_OscConfig+0x4c4>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a19      	ldr	r1, [r3, #32]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003118:	430b      	orrs	r3, r1
 800311a:	491b      	ldr	r1, [pc, #108]	; (8003188 <HAL_RCC_OscConfig+0x4c4>)
 800311c:	4313      	orrs	r3, r2
 800311e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003120:	4b1b      	ldr	r3, [pc, #108]	; (8003190 <HAL_RCC_OscConfig+0x4cc>)
 8003122:	2201      	movs	r2, #1
 8003124:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003126:	f7fd fbe7 	bl	80008f8 <HAL_GetTick>
 800312a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800312c:	e008      	b.n	8003140 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800312e:	f7fd fbe3 	bl	80008f8 <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	2b02      	cmp	r3, #2
 800313a:	d901      	bls.n	8003140 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	e03d      	b.n	80031bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003140:	4b11      	ldr	r3, [pc, #68]	; (8003188 <HAL_RCC_OscConfig+0x4c4>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d0f0      	beq.n	800312e <HAL_RCC_OscConfig+0x46a>
 800314c:	e035      	b.n	80031ba <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800314e:	4b10      	ldr	r3, [pc, #64]	; (8003190 <HAL_RCC_OscConfig+0x4cc>)
 8003150:	2200      	movs	r2, #0
 8003152:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003154:	f7fd fbd0 	bl	80008f8 <HAL_GetTick>
 8003158:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800315a:	e008      	b.n	800316e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800315c:	f7fd fbcc 	bl	80008f8 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	2b02      	cmp	r3, #2
 8003168:	d901      	bls.n	800316e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e026      	b.n	80031bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800316e:	4b06      	ldr	r3, [pc, #24]	; (8003188 <HAL_RCC_OscConfig+0x4c4>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d1f0      	bne.n	800315c <HAL_RCC_OscConfig+0x498>
 800317a:	e01e      	b.n	80031ba <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	69db      	ldr	r3, [r3, #28]
 8003180:	2b01      	cmp	r3, #1
 8003182:	d107      	bne.n	8003194 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e019      	b.n	80031bc <HAL_RCC_OscConfig+0x4f8>
 8003188:	40021000 	.word	0x40021000
 800318c:	40007000 	.word	0x40007000
 8003190:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003194:	4b0b      	ldr	r3, [pc, #44]	; (80031c4 <HAL_RCC_OscConfig+0x500>)
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a1b      	ldr	r3, [r3, #32]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d106      	bne.n	80031b6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d001      	beq.n	80031ba <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e000      	b.n	80031bc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80031ba:	2300      	movs	r3, #0
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3718      	adds	r7, #24
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	40021000 	.word	0x40021000

080031c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d101      	bne.n	80031dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e0d0      	b.n	800337e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031dc:	4b6a      	ldr	r3, [pc, #424]	; (8003388 <HAL_RCC_ClockConfig+0x1c0>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0307 	and.w	r3, r3, #7
 80031e4:	683a      	ldr	r2, [r7, #0]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d910      	bls.n	800320c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ea:	4b67      	ldr	r3, [pc, #412]	; (8003388 <HAL_RCC_ClockConfig+0x1c0>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f023 0207 	bic.w	r2, r3, #7
 80031f2:	4965      	ldr	r1, [pc, #404]	; (8003388 <HAL_RCC_ClockConfig+0x1c0>)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031fa:	4b63      	ldr	r3, [pc, #396]	; (8003388 <HAL_RCC_ClockConfig+0x1c0>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0307 	and.w	r3, r3, #7
 8003202:	683a      	ldr	r2, [r7, #0]
 8003204:	429a      	cmp	r2, r3
 8003206:	d001      	beq.n	800320c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e0b8      	b.n	800337e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0302 	and.w	r3, r3, #2
 8003214:	2b00      	cmp	r3, #0
 8003216:	d020      	beq.n	800325a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0304 	and.w	r3, r3, #4
 8003220:	2b00      	cmp	r3, #0
 8003222:	d005      	beq.n	8003230 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003224:	4b59      	ldr	r3, [pc, #356]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	4a58      	ldr	r2, [pc, #352]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 800322a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800322e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0308 	and.w	r3, r3, #8
 8003238:	2b00      	cmp	r3, #0
 800323a:	d005      	beq.n	8003248 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800323c:	4b53      	ldr	r3, [pc, #332]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	4a52      	ldr	r2, [pc, #328]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 8003242:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003246:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003248:	4b50      	ldr	r3, [pc, #320]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	494d      	ldr	r1, [pc, #308]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 8003256:	4313      	orrs	r3, r2
 8003258:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	2b00      	cmp	r3, #0
 8003264:	d040      	beq.n	80032e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d107      	bne.n	800327e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800326e:	4b47      	ldr	r3, [pc, #284]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d115      	bne.n	80032a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e07f      	b.n	800337e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	2b02      	cmp	r3, #2
 8003284:	d107      	bne.n	8003296 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003286:	4b41      	ldr	r3, [pc, #260]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d109      	bne.n	80032a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e073      	b.n	800337e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003296:	4b3d      	ldr	r3, [pc, #244]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0302 	and.w	r3, r3, #2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d101      	bne.n	80032a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e06b      	b.n	800337e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032a6:	4b39      	ldr	r3, [pc, #228]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f023 0203 	bic.w	r2, r3, #3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	4936      	ldr	r1, [pc, #216]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032b8:	f7fd fb1e 	bl	80008f8 <HAL_GetTick>
 80032bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032be:	e00a      	b.n	80032d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032c0:	f7fd fb1a 	bl	80008f8 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e053      	b.n	800337e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032d6:	4b2d      	ldr	r3, [pc, #180]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f003 020c 	and.w	r2, r3, #12
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d1eb      	bne.n	80032c0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032e8:	4b27      	ldr	r3, [pc, #156]	; (8003388 <HAL_RCC_ClockConfig+0x1c0>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0307 	and.w	r3, r3, #7
 80032f0:	683a      	ldr	r2, [r7, #0]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d210      	bcs.n	8003318 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032f6:	4b24      	ldr	r3, [pc, #144]	; (8003388 <HAL_RCC_ClockConfig+0x1c0>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f023 0207 	bic.w	r2, r3, #7
 80032fe:	4922      	ldr	r1, [pc, #136]	; (8003388 <HAL_RCC_ClockConfig+0x1c0>)
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	4313      	orrs	r3, r2
 8003304:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003306:	4b20      	ldr	r3, [pc, #128]	; (8003388 <HAL_RCC_ClockConfig+0x1c0>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0307 	and.w	r3, r3, #7
 800330e:	683a      	ldr	r2, [r7, #0]
 8003310:	429a      	cmp	r2, r3
 8003312:	d001      	beq.n	8003318 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e032      	b.n	800337e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0304 	and.w	r3, r3, #4
 8003320:	2b00      	cmp	r3, #0
 8003322:	d008      	beq.n	8003336 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003324:	4b19      	ldr	r3, [pc, #100]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	4916      	ldr	r1, [pc, #88]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 8003332:	4313      	orrs	r3, r2
 8003334:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0308 	and.w	r3, r3, #8
 800333e:	2b00      	cmp	r3, #0
 8003340:	d009      	beq.n	8003356 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003342:	4b12      	ldr	r3, [pc, #72]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	00db      	lsls	r3, r3, #3
 8003350:	490e      	ldr	r1, [pc, #56]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 8003352:	4313      	orrs	r3, r2
 8003354:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003356:	f000 f821 	bl	800339c <HAL_RCC_GetSysClockFreq>
 800335a:	4602      	mov	r2, r0
 800335c:	4b0b      	ldr	r3, [pc, #44]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	091b      	lsrs	r3, r3, #4
 8003362:	f003 030f 	and.w	r3, r3, #15
 8003366:	490a      	ldr	r1, [pc, #40]	; (8003390 <HAL_RCC_ClockConfig+0x1c8>)
 8003368:	5ccb      	ldrb	r3, [r1, r3]
 800336a:	fa22 f303 	lsr.w	r3, r2, r3
 800336e:	4a09      	ldr	r2, [pc, #36]	; (8003394 <HAL_RCC_ClockConfig+0x1cc>)
 8003370:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003372:	4b09      	ldr	r3, [pc, #36]	; (8003398 <HAL_RCC_ClockConfig+0x1d0>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4618      	mov	r0, r3
 8003378:	f7fd fa7c 	bl	8000874 <HAL_InitTick>

  return HAL_OK;
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3710      	adds	r7, #16
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	40022000 	.word	0x40022000
 800338c:	40021000 	.word	0x40021000
 8003390:	08009578 	.word	0x08009578
 8003394:	2000000c 	.word	0x2000000c
 8003398:	20000010 	.word	0x20000010

0800339c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800339c:	b480      	push	{r7}
 800339e:	b087      	sub	sp, #28
 80033a0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80033a2:	2300      	movs	r3, #0
 80033a4:	60fb      	str	r3, [r7, #12]
 80033a6:	2300      	movs	r3, #0
 80033a8:	60bb      	str	r3, [r7, #8]
 80033aa:	2300      	movs	r3, #0
 80033ac:	617b      	str	r3, [r7, #20]
 80033ae:	2300      	movs	r3, #0
 80033b0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80033b2:	2300      	movs	r3, #0
 80033b4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80033b6:	4b1e      	ldr	r3, [pc, #120]	; (8003430 <HAL_RCC_GetSysClockFreq+0x94>)
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f003 030c 	and.w	r3, r3, #12
 80033c2:	2b04      	cmp	r3, #4
 80033c4:	d002      	beq.n	80033cc <HAL_RCC_GetSysClockFreq+0x30>
 80033c6:	2b08      	cmp	r3, #8
 80033c8:	d003      	beq.n	80033d2 <HAL_RCC_GetSysClockFreq+0x36>
 80033ca:	e027      	b.n	800341c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80033cc:	4b19      	ldr	r3, [pc, #100]	; (8003434 <HAL_RCC_GetSysClockFreq+0x98>)
 80033ce:	613b      	str	r3, [r7, #16]
      break;
 80033d0:	e027      	b.n	8003422 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	0c9b      	lsrs	r3, r3, #18
 80033d6:	f003 030f 	and.w	r3, r3, #15
 80033da:	4a17      	ldr	r2, [pc, #92]	; (8003438 <HAL_RCC_GetSysClockFreq+0x9c>)
 80033dc:	5cd3      	ldrb	r3, [r2, r3]
 80033de:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d010      	beq.n	800340c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80033ea:	4b11      	ldr	r3, [pc, #68]	; (8003430 <HAL_RCC_GetSysClockFreq+0x94>)
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	0c5b      	lsrs	r3, r3, #17
 80033f0:	f003 0301 	and.w	r3, r3, #1
 80033f4:	4a11      	ldr	r2, [pc, #68]	; (800343c <HAL_RCC_GetSysClockFreq+0xa0>)
 80033f6:	5cd3      	ldrb	r3, [r2, r3]
 80033f8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a0d      	ldr	r2, [pc, #52]	; (8003434 <HAL_RCC_GetSysClockFreq+0x98>)
 80033fe:	fb03 f202 	mul.w	r2, r3, r2
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	fbb2 f3f3 	udiv	r3, r2, r3
 8003408:	617b      	str	r3, [r7, #20]
 800340a:	e004      	b.n	8003416 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4a0c      	ldr	r2, [pc, #48]	; (8003440 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003410:	fb02 f303 	mul.w	r3, r2, r3
 8003414:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	613b      	str	r3, [r7, #16]
      break;
 800341a:	e002      	b.n	8003422 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800341c:	4b05      	ldr	r3, [pc, #20]	; (8003434 <HAL_RCC_GetSysClockFreq+0x98>)
 800341e:	613b      	str	r3, [r7, #16]
      break;
 8003420:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003422:	693b      	ldr	r3, [r7, #16]
}
 8003424:	4618      	mov	r0, r3
 8003426:	371c      	adds	r7, #28
 8003428:	46bd      	mov	sp, r7
 800342a:	bc80      	pop	{r7}
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	40021000 	.word	0x40021000
 8003434:	007a1200 	.word	0x007a1200
 8003438:	08009590 	.word	0x08009590
 800343c:	080095a0 	.word	0x080095a0
 8003440:	003d0900 	.word	0x003d0900

08003444 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003444:	b480      	push	{r7}
 8003446:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003448:	4b02      	ldr	r3, [pc, #8]	; (8003454 <HAL_RCC_GetHCLKFreq+0x10>)
 800344a:	681b      	ldr	r3, [r3, #0]
}
 800344c:	4618      	mov	r0, r3
 800344e:	46bd      	mov	sp, r7
 8003450:	bc80      	pop	{r7}
 8003452:	4770      	bx	lr
 8003454:	2000000c 	.word	0x2000000c

08003458 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800345c:	f7ff fff2 	bl	8003444 <HAL_RCC_GetHCLKFreq>
 8003460:	4602      	mov	r2, r0
 8003462:	4b05      	ldr	r3, [pc, #20]	; (8003478 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	0a1b      	lsrs	r3, r3, #8
 8003468:	f003 0307 	and.w	r3, r3, #7
 800346c:	4903      	ldr	r1, [pc, #12]	; (800347c <HAL_RCC_GetPCLK1Freq+0x24>)
 800346e:	5ccb      	ldrb	r3, [r1, r3]
 8003470:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003474:	4618      	mov	r0, r3
 8003476:	bd80      	pop	{r7, pc}
 8003478:	40021000 	.word	0x40021000
 800347c:	08009588 	.word	0x08009588

08003480 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003484:	f7ff ffde 	bl	8003444 <HAL_RCC_GetHCLKFreq>
 8003488:	4602      	mov	r2, r0
 800348a:	4b05      	ldr	r3, [pc, #20]	; (80034a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	0adb      	lsrs	r3, r3, #11
 8003490:	f003 0307 	and.w	r3, r3, #7
 8003494:	4903      	ldr	r1, [pc, #12]	; (80034a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003496:	5ccb      	ldrb	r3, [r1, r3]
 8003498:	fa22 f303 	lsr.w	r3, r2, r3
}
 800349c:	4618      	mov	r0, r3
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	40021000 	.word	0x40021000
 80034a4:	08009588 	.word	0x08009588

080034a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b085      	sub	sp, #20
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80034b0:	4b0a      	ldr	r3, [pc, #40]	; (80034dc <RCC_Delay+0x34>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a0a      	ldr	r2, [pc, #40]	; (80034e0 <RCC_Delay+0x38>)
 80034b6:	fba2 2303 	umull	r2, r3, r2, r3
 80034ba:	0a5b      	lsrs	r3, r3, #9
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	fb02 f303 	mul.w	r3, r2, r3
 80034c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80034c4:	bf00      	nop
  }
  while (Delay --);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	1e5a      	subs	r2, r3, #1
 80034ca:	60fa      	str	r2, [r7, #12]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d1f9      	bne.n	80034c4 <RCC_Delay+0x1c>
}
 80034d0:	bf00      	nop
 80034d2:	bf00      	nop
 80034d4:	3714      	adds	r7, #20
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bc80      	pop	{r7}
 80034da:	4770      	bx	lr
 80034dc:	2000000c 	.word	0x2000000c
 80034e0:	10624dd3 	.word	0x10624dd3

080034e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b086      	sub	sp, #24
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80034ec:	2300      	movs	r3, #0
 80034ee:	613b      	str	r3, [r7, #16]
 80034f0:	2300      	movs	r3, #0
 80034f2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0301 	and.w	r3, r3, #1
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d07d      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003500:	2300      	movs	r3, #0
 8003502:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003504:	4b4f      	ldr	r3, [pc, #316]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003506:	69db      	ldr	r3, [r3, #28]
 8003508:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d10d      	bne.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003510:	4b4c      	ldr	r3, [pc, #304]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003512:	69db      	ldr	r3, [r3, #28]
 8003514:	4a4b      	ldr	r2, [pc, #300]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003516:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800351a:	61d3      	str	r3, [r2, #28]
 800351c:	4b49      	ldr	r3, [pc, #292]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800351e:	69db      	ldr	r3, [r3, #28]
 8003520:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003524:	60bb      	str	r3, [r7, #8]
 8003526:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003528:	2301      	movs	r3, #1
 800352a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800352c:	4b46      	ldr	r3, [pc, #280]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003534:	2b00      	cmp	r3, #0
 8003536:	d118      	bne.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003538:	4b43      	ldr	r3, [pc, #268]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a42      	ldr	r2, [pc, #264]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800353e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003542:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003544:	f7fd f9d8 	bl	80008f8 <HAL_GetTick>
 8003548:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800354a:	e008      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800354c:	f7fd f9d4 	bl	80008f8 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b64      	cmp	r3, #100	; 0x64
 8003558:	d901      	bls.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e06d      	b.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800355e:	4b3a      	ldr	r3, [pc, #232]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003566:	2b00      	cmp	r3, #0
 8003568:	d0f0      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800356a:	4b36      	ldr	r3, [pc, #216]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003572:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d02e      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	429a      	cmp	r2, r3
 8003586:	d027      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003588:	4b2e      	ldr	r3, [pc, #184]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800358a:	6a1b      	ldr	r3, [r3, #32]
 800358c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003590:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003592:	4b2e      	ldr	r3, [pc, #184]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003594:	2201      	movs	r2, #1
 8003596:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003598:	4b2c      	ldr	r3, [pc, #176]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800359a:	2200      	movs	r2, #0
 800359c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800359e:	4a29      	ldr	r2, [pc, #164]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d014      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ae:	f7fd f9a3 	bl	80008f8 <HAL_GetTick>
 80035b2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035b4:	e00a      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035b6:	f7fd f99f 	bl	80008f8 <HAL_GetTick>
 80035ba:	4602      	mov	r2, r0
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d901      	bls.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	e036      	b.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035cc:	4b1d      	ldr	r3, [pc, #116]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ce:	6a1b      	ldr	r3, [r3, #32]
 80035d0:	f003 0302 	and.w	r3, r3, #2
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d0ee      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035d8:	4b1a      	ldr	r3, [pc, #104]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035da:	6a1b      	ldr	r3, [r3, #32]
 80035dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	4917      	ldr	r1, [pc, #92]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80035ea:	7dfb      	ldrb	r3, [r7, #23]
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d105      	bne.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035f0:	4b14      	ldr	r3, [pc, #80]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035f2:	69db      	ldr	r3, [r3, #28]
 80035f4:	4a13      	ldr	r2, [pc, #76]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035fa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0302 	and.w	r3, r3, #2
 8003604:	2b00      	cmp	r3, #0
 8003606:	d008      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003608:	4b0e      	ldr	r3, [pc, #56]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	490b      	ldr	r1, [pc, #44]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003616:	4313      	orrs	r3, r2
 8003618:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0310 	and.w	r3, r3, #16
 8003622:	2b00      	cmp	r3, #0
 8003624:	d008      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003626:	4b07      	ldr	r3, [pc, #28]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	4904      	ldr	r1, [pc, #16]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003634:	4313      	orrs	r3, r2
 8003636:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3718      	adds	r7, #24
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	40021000 	.word	0x40021000
 8003648:	40007000 	.word	0x40007000
 800364c:	42420440 	.word	0x42420440

08003650 <HAL_LIN_Init>:
  *            @arg UART_LINBREAKDETECTLENGTH_10B: 10-bit break detection
  *            @arg UART_LINBREAKDETECTLENGTH_11B: 11-bit break detection
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_Init(UART_HandleTypeDef *huart, uint32_t BreakDetectLength)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	6039      	str	r1, [r7, #0]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d101      	bne.n	8003664 <HAL_LIN_Init+0x14>
  {
    return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e05a      	b.n	800371a <HAL_LIN_Init+0xca>
  assert_param(IS_UART_LIN_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_LIN_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800366a:	b2db      	uxtb	r3, r3
 800366c:	2b00      	cmp	r3, #0
 800366e:	d106      	bne.n	800367e <HAL_LIN_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f7fc ffd5 	bl	8000628 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2224      	movs	r2, #36	; 0x24
 8003682:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68da      	ldr	r2, [r3, #12]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003694:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 fe48 	bl	800432c <UART_SetConfig>

  /* In LIN mode, the following bits must be kept cleared:
     - CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_CLKEN));
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	691a      	ldr	r2, [r3, #16]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036aa:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	695a      	ldr	r2, [r3, #20]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036ba:	615a      	str	r2, [r3, #20]

  /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
  SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	691a      	ldr	r2, [r3, #16]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036ca:	611a      	str	r2, [r3, #16]

  /* Set the USART LIN Break detection length. */
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_LBDL);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	691a      	ldr	r2, [r3, #16]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f022 0220 	bic.w	r2, r2, #32
 80036da:	611a      	str	r2, [r3, #16]
  SET_BIT(huart->Instance->CR2, BreakDetectLength);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	6919      	ldr	r1, [r3, #16]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	683a      	ldr	r2, [r7, #0]
 80036e8:	430a      	orrs	r2, r1
 80036ea:	611a      	str	r2, [r3, #16]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68da      	ldr	r2, [r3, #12]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036fa:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2220      	movs	r2, #32
 8003706:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2220      	movs	r2, #32
 800370e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	3708      	adds	r7, #8
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}

08003722 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003722:	b580      	push	{r7, lr}
 8003724:	b08a      	sub	sp, #40	; 0x28
 8003726:	af02      	add	r7, sp, #8
 8003728:	60f8      	str	r0, [r7, #12]
 800372a:	60b9      	str	r1, [r7, #8]
 800372c:	603b      	str	r3, [r7, #0]
 800372e:	4613      	mov	r3, r2
 8003730:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003732:	2300      	movs	r3, #0
 8003734:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800373c:	b2db      	uxtb	r3, r3
 800373e:	2b20      	cmp	r3, #32
 8003740:	d16d      	bne.n	800381e <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d002      	beq.n	800374e <HAL_UART_Transmit+0x2c>
 8003748:	88fb      	ldrh	r3, [r7, #6]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d101      	bne.n	8003752 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e066      	b.n	8003820 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2200      	movs	r2, #0
 8003756:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2221      	movs	r2, #33	; 0x21
 800375c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003760:	f7fd f8ca 	bl	80008f8 <HAL_GetTick>
 8003764:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	88fa      	ldrh	r2, [r7, #6]
 800376a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	88fa      	ldrh	r2, [r7, #6]
 8003770:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800377a:	d108      	bne.n	800378e <HAL_UART_Transmit+0x6c>
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	691b      	ldr	r3, [r3, #16]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d104      	bne.n	800378e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003784:	2300      	movs	r3, #0
 8003786:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	61bb      	str	r3, [r7, #24]
 800378c:	e003      	b.n	8003796 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003792:	2300      	movs	r3, #0
 8003794:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003796:	e02a      	b.n	80037ee <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	9300      	str	r3, [sp, #0]
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	2200      	movs	r2, #0
 80037a0:	2180      	movs	r1, #128	; 0x80
 80037a2:	68f8      	ldr	r0, [r7, #12]
 80037a4:	f000 fb7f 	bl	8003ea6 <UART_WaitOnFlagUntilTimeout>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d001      	beq.n	80037b2 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e036      	b.n	8003820 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d10b      	bne.n	80037d0 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	881b      	ldrh	r3, [r3, #0]
 80037bc:	461a      	mov	r2, r3
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037c6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	3302      	adds	r3, #2
 80037cc:	61bb      	str	r3, [r7, #24]
 80037ce:	e007      	b.n	80037e0 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	781a      	ldrb	r2, [r3, #0]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	3301      	adds	r3, #1
 80037de:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	3b01      	subs	r3, #1
 80037e8:	b29a      	uxth	r2, r3
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d1cf      	bne.n	8003798 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	9300      	str	r3, [sp, #0]
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	2200      	movs	r2, #0
 8003800:	2140      	movs	r1, #64	; 0x40
 8003802:	68f8      	ldr	r0, [r7, #12]
 8003804:	f000 fb4f 	bl	8003ea6 <UART_WaitOnFlagUntilTimeout>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d001      	beq.n	8003812 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e006      	b.n	8003820 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2220      	movs	r2, #32
 8003816:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800381a:	2300      	movs	r3, #0
 800381c:	e000      	b.n	8003820 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800381e:	2302      	movs	r3, #2
  }
}
 8003820:	4618      	mov	r0, r3
 8003822:	3720      	adds	r7, #32
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003828:	b480      	push	{r7}
 800382a:	b085      	sub	sp, #20
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	4613      	mov	r3, r2
 8003834:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800383c:	b2db      	uxtb	r3, r3
 800383e:	2b20      	cmp	r3, #32
 8003840:	d121      	bne.n	8003886 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d002      	beq.n	800384e <HAL_UART_Transmit_IT+0x26>
 8003848:	88fb      	ldrh	r3, [r7, #6]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d101      	bne.n	8003852 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e01a      	b.n	8003888 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	68ba      	ldr	r2, [r7, #8]
 8003856:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	88fa      	ldrh	r2, [r7, #6]
 800385c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	88fa      	ldrh	r2, [r7, #6]
 8003862:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2221      	movs	r2, #33	; 0x21
 800386e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68da      	ldr	r2, [r3, #12]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003880:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003882:	2300      	movs	r3, #0
 8003884:	e000      	b.n	8003888 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8003886:	2302      	movs	r3, #2
  }
}
 8003888:	4618      	mov	r0, r3
 800388a:	3714      	adds	r7, #20
 800388c:	46bd      	mov	sp, r7
 800388e:	bc80      	pop	{r7}
 8003890:	4770      	bx	lr

08003892 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003892:	b580      	push	{r7, lr}
 8003894:	b08c      	sub	sp, #48	; 0x30
 8003896:	af00      	add	r7, sp, #0
 8003898:	60f8      	str	r0, [r7, #12]
 800389a:	60b9      	str	r1, [r7, #8]
 800389c:	4613      	mov	r3, r2
 800389e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	2b20      	cmp	r3, #32
 80038aa:	d14a      	bne.n	8003942 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d002      	beq.n	80038b8 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 80038b2:	88fb      	ldrh	r3, [r7, #6]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d101      	bne.n	80038bc <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e043      	b.n	8003944 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2201      	movs	r2, #1
 80038c0:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2200      	movs	r2, #0
 80038c6:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 80038c8:	88fb      	ldrh	r3, [r7, #6]
 80038ca:	461a      	mov	r2, r3
 80038cc:	68b9      	ldr	r1, [r7, #8]
 80038ce:	68f8      	ldr	r0, [r7, #12]
 80038d0:	f000 fb57 	bl	8003f82 <UART_Start_Receive_IT>
 80038d4:	4603      	mov	r3, r0
 80038d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80038da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d12c      	bne.n	800393c <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d125      	bne.n	8003936 <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80038ea:	2300      	movs	r3, #0
 80038ec:	613b      	str	r3, [r7, #16]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	613b      	str	r3, [r7, #16]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	613b      	str	r3, [r7, #16]
 80038fe:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	330c      	adds	r3, #12
 8003906:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	e853 3f00 	ldrex	r3, [r3]
 800390e:	617b      	str	r3, [r7, #20]
   return(result);
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	f043 0310 	orr.w	r3, r3, #16
 8003916:	62bb      	str	r3, [r7, #40]	; 0x28
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	330c      	adds	r3, #12
 800391e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003920:	627a      	str	r2, [r7, #36]	; 0x24
 8003922:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003924:	6a39      	ldr	r1, [r7, #32]
 8003926:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003928:	e841 2300 	strex	r3, r2, [r1]
 800392c:	61fb      	str	r3, [r7, #28]
   return(result);
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d1e5      	bne.n	8003900 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 8003934:	e002      	b.n	800393c <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800393c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003940:	e000      	b.n	8003944 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8003942:	2302      	movs	r3, #2
  }
}
 8003944:	4618      	mov	r0, r3
 8003946:	3730      	adds	r7, #48	; 0x30
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b0ba      	sub	sp, #232	; 0xe8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003972:	2300      	movs	r3, #0
 8003974:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003978:	2300      	movs	r3, #0
 800397a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800397e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003982:	f003 030f 	and.w	r3, r3, #15
 8003986:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800398a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800398e:	2b00      	cmp	r3, #0
 8003990:	d10f      	bne.n	80039b2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003996:	f003 0320 	and.w	r3, r3, #32
 800399a:	2b00      	cmp	r3, #0
 800399c:	d009      	beq.n	80039b2 <HAL_UART_IRQHandler+0x66>
 800399e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039a2:	f003 0320 	and.w	r3, r3, #32
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d003      	beq.n	80039b2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 fbff 	bl	80041ae <UART_Receive_IT>
      return;
 80039b0:	e25b      	b.n	8003e6a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80039b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	f000 80de 	beq.w	8003b78 <HAL_UART_IRQHandler+0x22c>
 80039bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039c0:	f003 0301 	and.w	r3, r3, #1
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d106      	bne.n	80039d6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80039c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039cc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	f000 80d1 	beq.w	8003b78 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80039d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039da:	f003 0301 	and.w	r3, r3, #1
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00b      	beq.n	80039fa <HAL_UART_IRQHandler+0xae>
 80039e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d005      	beq.n	80039fa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f2:	f043 0201 	orr.w	r2, r3, #1
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039fe:	f003 0304 	and.w	r3, r3, #4
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00b      	beq.n	8003a1e <HAL_UART_IRQHandler+0xd2>
 8003a06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a0a:	f003 0301 	and.w	r3, r3, #1
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d005      	beq.n	8003a1e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a16:	f043 0202 	orr.w	r2, r3, #2
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a22:	f003 0302 	and.w	r3, r3, #2
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00b      	beq.n	8003a42 <HAL_UART_IRQHandler+0xf6>
 8003a2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a2e:	f003 0301 	and.w	r3, r3, #1
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d005      	beq.n	8003a42 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3a:	f043 0204 	orr.w	r2, r3, #4
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003a42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a46:	f003 0308 	and.w	r3, r3, #8
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d011      	beq.n	8003a72 <HAL_UART_IRQHandler+0x126>
 8003a4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a52:	f003 0320 	and.w	r3, r3, #32
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d105      	bne.n	8003a66 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003a5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a5e:	f003 0301 	and.w	r3, r3, #1
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d005      	beq.n	8003a72 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a6a:	f043 0208 	orr.w	r2, r3, #8
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	f000 81f2 	beq.w	8003e60 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a80:	f003 0320 	and.w	r3, r3, #32
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d008      	beq.n	8003a9a <HAL_UART_IRQHandler+0x14e>
 8003a88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a8c:	f003 0320 	and.w	r3, r3, #32
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d002      	beq.n	8003a9a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f000 fb8a 	bl	80041ae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	695b      	ldr	r3, [r3, #20]
 8003aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	bf14      	ite	ne
 8003aa8:	2301      	movne	r3, #1
 8003aaa:	2300      	moveq	r3, #0
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab6:	f003 0308 	and.w	r3, r3, #8
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d103      	bne.n	8003ac6 <HAL_UART_IRQHandler+0x17a>
 8003abe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d04f      	beq.n	8003b66 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 fa94 	bl	8003ff4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	695b      	ldr	r3, [r3, #20]
 8003ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d041      	beq.n	8003b5e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	3314      	adds	r3, #20
 8003ae0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ae8:	e853 3f00 	ldrex	r3, [r3]
 8003aec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003af0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003af4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003af8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	3314      	adds	r3, #20
 8003b02:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003b06:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003b0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b0e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003b12:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003b16:	e841 2300 	strex	r3, r2, [r1]
 8003b1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003b1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d1d9      	bne.n	8003ada <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d013      	beq.n	8003b56 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b32:	4a7e      	ldr	r2, [pc, #504]	; (8003d2c <HAL_UART_IRQHandler+0x3e0>)
 8003b34:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7fd f884 	bl	8000c48 <HAL_DMA_Abort_IT>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d016      	beq.n	8003b74 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003b50:	4610      	mov	r0, r2
 8003b52:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b54:	e00e      	b.n	8003b74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 f99c 	bl	8003e94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b5c:	e00a      	b.n	8003b74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f000 f998 	bl	8003e94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b64:	e006      	b.n	8003b74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 f994 	bl	8003e94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003b72:	e175      	b.n	8003e60 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b74:	bf00      	nop
    return;
 8003b76:	e173      	b.n	8003e60 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	f040 814f 	bne.w	8003e20 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003b82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b86:	f003 0310 	and.w	r3, r3, #16
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	f000 8148 	beq.w	8003e20 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003b90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b94:	f003 0310 	and.w	r3, r3, #16
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	f000 8141 	beq.w	8003e20 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	60bb      	str	r3, [r7, #8]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	60bb      	str	r3, [r7, #8]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	60bb      	str	r3, [r7, #8]
 8003bb2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	695b      	ldr	r3, [r3, #20]
 8003bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	f000 80b6 	beq.w	8003d30 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003bd0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	f000 8145 	beq.w	8003e64 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003bde:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003be2:	429a      	cmp	r2, r3
 8003be4:	f080 813e 	bcs.w	8003e64 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003bee:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf4:	699b      	ldr	r3, [r3, #24]
 8003bf6:	2b20      	cmp	r3, #32
 8003bf8:	f000 8088 	beq.w	8003d0c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	330c      	adds	r3, #12
 8003c02:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c06:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c0a:	e853 3f00 	ldrex	r3, [r3]
 8003c0e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003c12:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c1a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	330c      	adds	r3, #12
 8003c24:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003c28:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c2c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c30:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003c34:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003c38:	e841 2300 	strex	r3, r2, [r1]
 8003c3c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003c40:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d1d9      	bne.n	8003bfc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	3314      	adds	r3, #20
 8003c4e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c52:	e853 3f00 	ldrex	r3, [r3]
 8003c56:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003c58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c5a:	f023 0301 	bic.w	r3, r3, #1
 8003c5e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	3314      	adds	r3, #20
 8003c68:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003c6c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003c70:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c72:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003c74:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003c78:	e841 2300 	strex	r3, r2, [r1]
 8003c7c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003c7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d1e1      	bne.n	8003c48 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	3314      	adds	r3, #20
 8003c8a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c8e:	e853 3f00 	ldrex	r3, [r3]
 8003c92:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003c94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c9a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	3314      	adds	r3, #20
 8003ca4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003ca8:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003caa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cac:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003cae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003cb0:	e841 2300 	strex	r3, r2, [r1]
 8003cb4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003cb6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d1e3      	bne.n	8003c84 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2220      	movs	r2, #32
 8003cc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	330c      	adds	r3, #12
 8003cd0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cd4:	e853 3f00 	ldrex	r3, [r3]
 8003cd8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003cda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cdc:	f023 0310 	bic.w	r3, r3, #16
 8003ce0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	330c      	adds	r3, #12
 8003cea:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003cee:	65ba      	str	r2, [r7, #88]	; 0x58
 8003cf0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003cf4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003cf6:	e841 2300 	strex	r3, r2, [r1]
 8003cfa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003cfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d1e3      	bne.n	8003cca <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d06:	4618      	mov	r0, r3
 8003d08:	f7fc ff63 	bl	8000bd2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2202      	movs	r2, #2
 8003d10:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	4619      	mov	r1, r3
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f7fc fa4e 	bl	80001c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d28:	e09c      	b.n	8003e64 <HAL_UART_IRQHandler+0x518>
 8003d2a:	bf00      	nop
 8003d2c:	080040b9 	.word	0x080040b9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	f000 808e 	beq.w	8003e68 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003d4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	f000 8089 	beq.w	8003e68 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	330c      	adds	r3, #12
 8003d5c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d60:	e853 3f00 	ldrex	r3, [r3]
 8003d64:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d6c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	330c      	adds	r3, #12
 8003d76:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003d7a:	647a      	str	r2, [r7, #68]	; 0x44
 8003d7c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d7e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003d80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d82:	e841 2300 	strex	r3, r2, [r1]
 8003d86:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003d88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1e3      	bne.n	8003d56 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	3314      	adds	r3, #20
 8003d94:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d98:	e853 3f00 	ldrex	r3, [r3]
 8003d9c:	623b      	str	r3, [r7, #32]
   return(result);
 8003d9e:	6a3b      	ldr	r3, [r7, #32]
 8003da0:	f023 0301 	bic.w	r3, r3, #1
 8003da4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	3314      	adds	r3, #20
 8003dae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003db2:	633a      	str	r2, [r7, #48]	; 0x30
 8003db4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003db8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dba:	e841 2300 	strex	r3, r2, [r1]
 8003dbe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d1e3      	bne.n	8003d8e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2220      	movs	r2, #32
 8003dca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	330c      	adds	r3, #12
 8003dda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	e853 3f00 	ldrex	r3, [r3]
 8003de2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f023 0310 	bic.w	r3, r3, #16
 8003dea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	330c      	adds	r3, #12
 8003df4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003df8:	61fa      	str	r2, [r7, #28]
 8003dfa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dfc:	69b9      	ldr	r1, [r7, #24]
 8003dfe:	69fa      	ldr	r2, [r7, #28]
 8003e00:	e841 2300 	strex	r3, r2, [r1]
 8003e04:	617b      	str	r3, [r7, #20]
   return(result);
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d1e3      	bne.n	8003dd4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2202      	movs	r2, #2
 8003e10:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e12:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e16:	4619      	mov	r1, r3
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f7fc f9d3 	bl	80001c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e1e:	e023      	b.n	8003e68 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d009      	beq.n	8003e40 <HAL_UART_IRQHandler+0x4f4>
 8003e2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d003      	beq.n	8003e40 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f000 f951 	bl	80040e0 <UART_Transmit_IT>
    return;
 8003e3e:	e014      	b.n	8003e6a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d00e      	beq.n	8003e6a <HAL_UART_IRQHandler+0x51e>
 8003e4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d008      	beq.n	8003e6a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f000 f990 	bl	800417e <UART_EndTransmit_IT>
    return;
 8003e5e:	e004      	b.n	8003e6a <HAL_UART_IRQHandler+0x51e>
    return;
 8003e60:	bf00      	nop
 8003e62:	e002      	b.n	8003e6a <HAL_UART_IRQHandler+0x51e>
      return;
 8003e64:	bf00      	nop
 8003e66:	e000      	b.n	8003e6a <HAL_UART_IRQHandler+0x51e>
      return;
 8003e68:	bf00      	nop
  }
}
 8003e6a:	37e8      	adds	r7, #232	; 0xe8
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003e78:	bf00      	nop
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bc80      	pop	{r7}
 8003e80:	4770      	bx	lr

08003e82 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e82:	b480      	push	{r7}
 8003e84:	b083      	sub	sp, #12
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003e8a:	bf00      	nop
 8003e8c:	370c      	adds	r7, #12
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bc80      	pop	{r7}
 8003e92:	4770      	bx	lr

08003e94 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003e9c:	bf00      	nop
 8003e9e:	370c      	adds	r7, #12
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bc80      	pop	{r7}
 8003ea4:	4770      	bx	lr

08003ea6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003ea6:	b580      	push	{r7, lr}
 8003ea8:	b090      	sub	sp, #64	; 0x40
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	60f8      	str	r0, [r7, #12]
 8003eae:	60b9      	str	r1, [r7, #8]
 8003eb0:	603b      	str	r3, [r7, #0]
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003eb6:	e050      	b.n	8003f5a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ebe:	d04c      	beq.n	8003f5a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003ec0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d007      	beq.n	8003ed6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ec6:	f7fc fd17 	bl	80008f8 <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d241      	bcs.n	8003f5a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	330c      	adds	r3, #12
 8003edc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee0:	e853 3f00 	ldrex	r3, [r3]
 8003ee4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003eec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	330c      	adds	r3, #12
 8003ef4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003ef6:	637a      	str	r2, [r7, #52]	; 0x34
 8003ef8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003efa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003efc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003efe:	e841 2300 	strex	r3, r2, [r1]
 8003f02:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d1e5      	bne.n	8003ed6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	3314      	adds	r3, #20
 8003f10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	e853 3f00 	ldrex	r3, [r3]
 8003f18:	613b      	str	r3, [r7, #16]
   return(result);
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	f023 0301 	bic.w	r3, r3, #1
 8003f20:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	3314      	adds	r3, #20
 8003f28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f2a:	623a      	str	r2, [r7, #32]
 8003f2c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f2e:	69f9      	ldr	r1, [r7, #28]
 8003f30:	6a3a      	ldr	r2, [r7, #32]
 8003f32:	e841 2300 	strex	r3, r2, [r1]
 8003f36:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d1e5      	bne.n	8003f0a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2220      	movs	r2, #32
 8003f42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2220      	movs	r2, #32
 8003f4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2200      	movs	r2, #0
 8003f52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e00f      	b.n	8003f7a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	4013      	ands	r3, r2
 8003f64:	68ba      	ldr	r2, [r7, #8]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	bf0c      	ite	eq
 8003f6a:	2301      	moveq	r3, #1
 8003f6c:	2300      	movne	r3, #0
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	461a      	mov	r2, r3
 8003f72:	79fb      	ldrb	r3, [r7, #7]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d09f      	beq.n	8003eb8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3740      	adds	r7, #64	; 0x40
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f82:	b480      	push	{r7}
 8003f84:	b085      	sub	sp, #20
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	60f8      	str	r0, [r7, #12]
 8003f8a:	60b9      	str	r1, [r7, #8]
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	68ba      	ldr	r2, [r7, #8]
 8003f94:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	88fa      	ldrh	r2, [r7, #6]
 8003f9a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	88fa      	ldrh	r2, [r7, #6]
 8003fa0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2222      	movs	r2, #34	; 0x22
 8003fac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	691b      	ldr	r3, [r3, #16]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d007      	beq.n	8003fc8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68da      	ldr	r2, [r3, #12]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fc6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	695a      	ldr	r2, [r3, #20]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f042 0201 	orr.w	r2, r2, #1
 8003fd6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	68da      	ldr	r2, [r3, #12]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f042 0220 	orr.w	r2, r2, #32
 8003fe6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3714      	adds	r7, #20
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bc80      	pop	{r7}
 8003ff2:	4770      	bx	lr

08003ff4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b095      	sub	sp, #84	; 0x54
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	330c      	adds	r3, #12
 8004002:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004006:	e853 3f00 	ldrex	r3, [r3]
 800400a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800400c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800400e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004012:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	330c      	adds	r3, #12
 800401a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800401c:	643a      	str	r2, [r7, #64]	; 0x40
 800401e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004020:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004022:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004024:	e841 2300 	strex	r3, r2, [r1]
 8004028:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800402a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800402c:	2b00      	cmp	r3, #0
 800402e:	d1e5      	bne.n	8003ffc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	3314      	adds	r3, #20
 8004036:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004038:	6a3b      	ldr	r3, [r7, #32]
 800403a:	e853 3f00 	ldrex	r3, [r3]
 800403e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	f023 0301 	bic.w	r3, r3, #1
 8004046:	64bb      	str	r3, [r7, #72]	; 0x48
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	3314      	adds	r3, #20
 800404e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004050:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004052:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004054:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004056:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004058:	e841 2300 	strex	r3, r2, [r1]
 800405c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800405e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004060:	2b00      	cmp	r3, #0
 8004062:	d1e5      	bne.n	8004030 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004068:	2b01      	cmp	r3, #1
 800406a:	d119      	bne.n	80040a0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	330c      	adds	r3, #12
 8004072:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	e853 3f00 	ldrex	r3, [r3]
 800407a:	60bb      	str	r3, [r7, #8]
   return(result);
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	f023 0310 	bic.w	r3, r3, #16
 8004082:	647b      	str	r3, [r7, #68]	; 0x44
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	330c      	adds	r3, #12
 800408a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800408c:	61ba      	str	r2, [r7, #24]
 800408e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004090:	6979      	ldr	r1, [r7, #20]
 8004092:	69ba      	ldr	r2, [r7, #24]
 8004094:	e841 2300 	strex	r3, r2, [r1]
 8004098:	613b      	str	r3, [r7, #16]
   return(result);
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d1e5      	bne.n	800406c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2220      	movs	r2, #32
 80040a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	631a      	str	r2, [r3, #48]	; 0x30
}
 80040ae:	bf00      	nop
 80040b0:	3754      	adds	r7, #84	; 0x54
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bc80      	pop	{r7}
 80040b6:	4770      	bx	lr

080040b8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2200      	movs	r2, #0
 80040ca:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2200      	movs	r2, #0
 80040d0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040d2:	68f8      	ldr	r0, [r7, #12]
 80040d4:	f7ff fede 	bl	8003e94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040d8:	bf00      	nop
 80040da:	3710      	adds	r7, #16
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b085      	sub	sp, #20
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	2b21      	cmp	r3, #33	; 0x21
 80040f2:	d13e      	bne.n	8004172 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040fc:	d114      	bne.n	8004128 <UART_Transmit_IT+0x48>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d110      	bne.n	8004128 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a1b      	ldr	r3, [r3, #32]
 800410a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	881b      	ldrh	r3, [r3, #0]
 8004110:	461a      	mov	r2, r3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800411a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a1b      	ldr	r3, [r3, #32]
 8004120:	1c9a      	adds	r2, r3, #2
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	621a      	str	r2, [r3, #32]
 8004126:	e008      	b.n	800413a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a1b      	ldr	r3, [r3, #32]
 800412c:	1c59      	adds	r1, r3, #1
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	6211      	str	r1, [r2, #32]
 8004132:	781a      	ldrb	r2, [r3, #0]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800413e:	b29b      	uxth	r3, r3
 8004140:	3b01      	subs	r3, #1
 8004142:	b29b      	uxth	r3, r3
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	4619      	mov	r1, r3
 8004148:	84d1      	strh	r1, [r2, #38]	; 0x26
 800414a:	2b00      	cmp	r3, #0
 800414c:	d10f      	bne.n	800416e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68da      	ldr	r2, [r3, #12]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800415c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68da      	ldr	r2, [r3, #12]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800416c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800416e:	2300      	movs	r3, #0
 8004170:	e000      	b.n	8004174 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004172:	2302      	movs	r3, #2
  }
}
 8004174:	4618      	mov	r0, r3
 8004176:	3714      	adds	r7, #20
 8004178:	46bd      	mov	sp, r7
 800417a:	bc80      	pop	{r7}
 800417c:	4770      	bx	lr

0800417e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800417e:	b580      	push	{r7, lr}
 8004180:	b082      	sub	sp, #8
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68da      	ldr	r2, [r3, #12]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004194:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2220      	movs	r2, #32
 800419a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f7ff fe66 	bl	8003e70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3708      	adds	r7, #8
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}

080041ae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80041ae:	b580      	push	{r7, lr}
 80041b0:	b08c      	sub	sp, #48	; 0x30
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	2b22      	cmp	r3, #34	; 0x22
 80041c0:	f040 80ae 	bne.w	8004320 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041cc:	d117      	bne.n	80041fe <UART_Receive_IT+0x50>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d113      	bne.n	80041fe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80041d6:	2300      	movs	r3, #0
 80041d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041de:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041ec:	b29a      	uxth	r2, r3
 80041ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f6:	1c9a      	adds	r2, r3, #2
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	629a      	str	r2, [r3, #40]	; 0x28
 80041fc:	e026      	b.n	800424c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004202:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004204:	2300      	movs	r3, #0
 8004206:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004210:	d007      	beq.n	8004222 <UART_Receive_IT+0x74>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d10a      	bne.n	8004230 <UART_Receive_IT+0x82>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d106      	bne.n	8004230 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	b2da      	uxtb	r2, r3
 800422a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800422c:	701a      	strb	r2, [r3, #0]
 800422e:	e008      	b.n	8004242 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	b2db      	uxtb	r3, r3
 8004238:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800423c:	b2da      	uxtb	r2, r3
 800423e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004240:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004246:	1c5a      	adds	r2, r3, #1
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004250:	b29b      	uxth	r3, r3
 8004252:	3b01      	subs	r3, #1
 8004254:	b29b      	uxth	r3, r3
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	4619      	mov	r1, r3
 800425a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800425c:	2b00      	cmp	r3, #0
 800425e:	d15d      	bne.n	800431c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68da      	ldr	r2, [r3, #12]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f022 0220 	bic.w	r2, r2, #32
 800426e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	68da      	ldr	r2, [r3, #12]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800427e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	695a      	ldr	r2, [r3, #20]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f022 0201 	bic.w	r2, r2, #1
 800428e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2220      	movs	r2, #32
 8004294:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d135      	bne.n	8004312 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	330c      	adds	r3, #12
 80042b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	e853 3f00 	ldrex	r3, [r3]
 80042ba:	613b      	str	r3, [r7, #16]
   return(result);
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	f023 0310 	bic.w	r3, r3, #16
 80042c2:	627b      	str	r3, [r7, #36]	; 0x24
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	330c      	adds	r3, #12
 80042ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042cc:	623a      	str	r2, [r7, #32]
 80042ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d0:	69f9      	ldr	r1, [r7, #28]
 80042d2:	6a3a      	ldr	r2, [r7, #32]
 80042d4:	e841 2300 	strex	r3, r2, [r1]
 80042d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d1e5      	bne.n	80042ac <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0310 	and.w	r3, r3, #16
 80042ea:	2b10      	cmp	r3, #16
 80042ec:	d10a      	bne.n	8004304 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80042ee:	2300      	movs	r3, #0
 80042f0:	60fb      	str	r3, [r7, #12]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	60fb      	str	r3, [r7, #12]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	60fb      	str	r3, [r7, #12]
 8004302:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004308:	4619      	mov	r1, r3
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f7fb ff5a 	bl	80001c4 <HAL_UARTEx_RxEventCallback>
 8004310:	e002      	b.n	8004318 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f7ff fdb5 	bl	8003e82 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004318:	2300      	movs	r3, #0
 800431a:	e002      	b.n	8004322 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800431c:	2300      	movs	r3, #0
 800431e:	e000      	b.n	8004322 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004320:	2302      	movs	r3, #2
  }
}
 8004322:	4618      	mov	r0, r3
 8004324:	3730      	adds	r7, #48	; 0x30
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
	...

0800432c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	68da      	ldr	r2, [r3, #12]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	430a      	orrs	r2, r1
 8004348:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	689a      	ldr	r2, [r3, #8]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	431a      	orrs	r2, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	695b      	ldr	r3, [r3, #20]
 8004358:	4313      	orrs	r3, r2
 800435a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004366:	f023 030c 	bic.w	r3, r3, #12
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	6812      	ldr	r2, [r2, #0]
 800436e:	68b9      	ldr	r1, [r7, #8]
 8004370:	430b      	orrs	r3, r1
 8004372:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	699a      	ldr	r2, [r3, #24]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	430a      	orrs	r2, r1
 8004388:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a2c      	ldr	r2, [pc, #176]	; (8004440 <UART_SetConfig+0x114>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d103      	bne.n	800439c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004394:	f7ff f874 	bl	8003480 <HAL_RCC_GetPCLK2Freq>
 8004398:	60f8      	str	r0, [r7, #12]
 800439a:	e002      	b.n	80043a2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800439c:	f7ff f85c 	bl	8003458 <HAL_RCC_GetPCLK1Freq>
 80043a0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	4613      	mov	r3, r2
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	4413      	add	r3, r2
 80043aa:	009a      	lsls	r2, r3, #2
 80043ac:	441a      	add	r2, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043b8:	4a22      	ldr	r2, [pc, #136]	; (8004444 <UART_SetConfig+0x118>)
 80043ba:	fba2 2303 	umull	r2, r3, r2, r3
 80043be:	095b      	lsrs	r3, r3, #5
 80043c0:	0119      	lsls	r1, r3, #4
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	4613      	mov	r3, r2
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	4413      	add	r3, r2
 80043ca:	009a      	lsls	r2, r3, #2
 80043cc:	441a      	add	r2, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80043d8:	4b1a      	ldr	r3, [pc, #104]	; (8004444 <UART_SetConfig+0x118>)
 80043da:	fba3 0302 	umull	r0, r3, r3, r2
 80043de:	095b      	lsrs	r3, r3, #5
 80043e0:	2064      	movs	r0, #100	; 0x64
 80043e2:	fb00 f303 	mul.w	r3, r0, r3
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	011b      	lsls	r3, r3, #4
 80043ea:	3332      	adds	r3, #50	; 0x32
 80043ec:	4a15      	ldr	r2, [pc, #84]	; (8004444 <UART_SetConfig+0x118>)
 80043ee:	fba2 2303 	umull	r2, r3, r2, r3
 80043f2:	095b      	lsrs	r3, r3, #5
 80043f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043f8:	4419      	add	r1, r3
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	4613      	mov	r3, r2
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	4413      	add	r3, r2
 8004402:	009a      	lsls	r2, r3, #2
 8004404:	441a      	add	r2, r3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004410:	4b0c      	ldr	r3, [pc, #48]	; (8004444 <UART_SetConfig+0x118>)
 8004412:	fba3 0302 	umull	r0, r3, r3, r2
 8004416:	095b      	lsrs	r3, r3, #5
 8004418:	2064      	movs	r0, #100	; 0x64
 800441a:	fb00 f303 	mul.w	r3, r0, r3
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	011b      	lsls	r3, r3, #4
 8004422:	3332      	adds	r3, #50	; 0x32
 8004424:	4a07      	ldr	r2, [pc, #28]	; (8004444 <UART_SetConfig+0x118>)
 8004426:	fba2 2303 	umull	r2, r3, r2, r3
 800442a:	095b      	lsrs	r3, r3, #5
 800442c:	f003 020f 	and.w	r2, r3, #15
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	440a      	add	r2, r1
 8004436:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004438:	bf00      	nop
 800443a:	3710      	adds	r7, #16
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}
 8004440:	40013800 	.word	0x40013800
 8004444:	51eb851f 	.word	0x51eb851f

08004448 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004448:	b084      	sub	sp, #16
 800444a:	b480      	push	{r7}
 800444c:	b083      	sub	sp, #12
 800444e:	af00      	add	r7, sp, #0
 8004450:	6078      	str	r0, [r7, #4]
 8004452:	f107 0014 	add.w	r0, r7, #20
 8004456:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800445a:	2300      	movs	r3, #0
}
 800445c:	4618      	mov	r0, r3
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	bc80      	pop	{r7}
 8004464:	b004      	add	sp, #16
 8004466:	4770      	bx	lr

08004468 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004468:	b480      	push	{r7}
 800446a:	b085      	sub	sp, #20
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004478:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800447c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	b29a      	uxth	r2, r3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3714      	adds	r7, #20
 800448e:	46bd      	mov	sp, r7
 8004490:	bc80      	pop	{r7}
 8004492:	4770      	bx	lr

08004494 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004494:	b480      	push	{r7}
 8004496:	b085      	sub	sp, #20
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800449c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80044a0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80044a8:	b29a      	uxth	r2, r3
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	43db      	mvns	r3, r3
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	4013      	ands	r3, r2
 80044b4:	b29a      	uxth	r2, r3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3714      	adds	r7, #20
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bc80      	pop	{r7}
 80044c6:	4770      	bx	lr

080044c8 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	460b      	mov	r3, r1
 80044d2:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	370c      	adds	r7, #12
 80044da:	46bd      	mov	sp, r7
 80044dc:	bc80      	pop	{r7}
 80044de:	4770      	bx	lr

080044e0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80044e0:	b084      	sub	sp, #16
 80044e2:	b480      	push	{r7}
 80044e4:	b083      	sub	sp, #12
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
 80044ea:	f107 0014 	add.w	r0, r7, #20
 80044ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2201      	movs	r2, #1
 80044f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004512:	2300      	movs	r3, #0
}
 8004514:	4618      	mov	r0, r3
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	bc80      	pop	{r7}
 800451c:	b004      	add	sp, #16
 800451e:	4770      	bx	lr

08004520 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004520:	b480      	push	{r7}
 8004522:	b09d      	sub	sp, #116	; 0x74
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800452a:	2300      	movs	r3, #0
 800452c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	4413      	add	r3, r2
 800453a:	881b      	ldrh	r3, [r3, #0]
 800453c:	b29b      	uxth	r3, r3
 800453e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004542:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004546:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	78db      	ldrb	r3, [r3, #3]
 800454e:	2b03      	cmp	r3, #3
 8004550:	d81f      	bhi.n	8004592 <USB_ActivateEndpoint+0x72>
 8004552:	a201      	add	r2, pc, #4	; (adr r2, 8004558 <USB_ActivateEndpoint+0x38>)
 8004554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004558:	08004569 	.word	0x08004569
 800455c:	08004585 	.word	0x08004585
 8004560:	0800459b 	.word	0x0800459b
 8004564:	08004577 	.word	0x08004577
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004568:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800456c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004570:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004574:	e012      	b.n	800459c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004576:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800457a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800457e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004582:	e00b      	b.n	800459c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004584:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004588:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800458c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004590:	e004      	b.n	800459c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8004598:	e000      	b.n	800459c <USB_ActivateEndpoint+0x7c>
      break;
 800459a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	441a      	add	r2, r3
 80045a6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80045aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	4413      	add	r3, r2
 80045c8:	881b      	ldrh	r3, [r3, #0]
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045d4:	b29a      	uxth	r2, r3
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	b29b      	uxth	r3, r3
 80045dc:	4313      	orrs	r3, r2
 80045de:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	441a      	add	r2, r3
 80045ec:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80045f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004600:	b29b      	uxth	r3, r3
 8004602:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	7b1b      	ldrb	r3, [r3, #12]
 8004608:	2b00      	cmp	r3, #0
 800460a:	f040 8178 	bne.w	80048fe <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	785b      	ldrb	r3, [r3, #1]
 8004612:	2b00      	cmp	r3, #0
 8004614:	f000 8084 	beq.w	8004720 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	61bb      	str	r3, [r7, #24]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004622:	b29b      	uxth	r3, r3
 8004624:	461a      	mov	r2, r3
 8004626:	69bb      	ldr	r3, [r7, #24]
 8004628:	4413      	add	r3, r2
 800462a:	61bb      	str	r3, [r7, #24]
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	011a      	lsls	r2, r3, #4
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	4413      	add	r3, r2
 8004636:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800463a:	617b      	str	r3, [r7, #20]
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	88db      	ldrh	r3, [r3, #6]
 8004640:	085b      	lsrs	r3, r3, #1
 8004642:	b29b      	uxth	r3, r3
 8004644:	005b      	lsls	r3, r3, #1
 8004646:	b29a      	uxth	r2, r3
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	4413      	add	r3, r2
 8004656:	881b      	ldrh	r3, [r3, #0]
 8004658:	827b      	strh	r3, [r7, #18]
 800465a:	8a7b      	ldrh	r3, [r7, #18]
 800465c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004660:	2b00      	cmp	r3, #0
 8004662:	d01b      	beq.n	800469c <USB_ActivateEndpoint+0x17c>
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	4413      	add	r3, r2
 800466e:	881b      	ldrh	r3, [r3, #0]
 8004670:	b29b      	uxth	r3, r3
 8004672:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800467a:	823b      	strh	r3, [r7, #16]
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	441a      	add	r2, r3
 8004686:	8a3b      	ldrh	r3, [r7, #16]
 8004688:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800468c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004690:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004694:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004698:	b29b      	uxth	r3, r3
 800469a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	78db      	ldrb	r3, [r3, #3]
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d020      	beq.n	80046e6 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	4413      	add	r3, r2
 80046ae:	881b      	ldrh	r3, [r3, #0]
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046ba:	81bb      	strh	r3, [r7, #12]
 80046bc:	89bb      	ldrh	r3, [r7, #12]
 80046be:	f083 0320 	eor.w	r3, r3, #32
 80046c2:	81bb      	strh	r3, [r7, #12]
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	441a      	add	r2, r3
 80046ce:	89bb      	ldrh	r3, [r7, #12]
 80046d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	8013      	strh	r3, [r2, #0]
 80046e4:	e2d5      	b.n	8004c92 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	4413      	add	r3, r2
 80046f0:	881b      	ldrh	r3, [r3, #0]
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046fc:	81fb      	strh	r3, [r7, #14]
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	441a      	add	r2, r3
 8004708:	89fb      	ldrh	r3, [r7, #14]
 800470a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800470e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004712:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004716:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800471a:	b29b      	uxth	r3, r3
 800471c:	8013      	strh	r3, [r2, #0]
 800471e:	e2b8      	b.n	8004c92 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	633b      	str	r3, [r7, #48]	; 0x30
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800472a:	b29b      	uxth	r3, r3
 800472c:	461a      	mov	r2, r3
 800472e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004730:	4413      	add	r3, r2
 8004732:	633b      	str	r3, [r7, #48]	; 0x30
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	011a      	lsls	r2, r3, #4
 800473a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800473c:	4413      	add	r3, r2
 800473e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004742:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	88db      	ldrh	r3, [r3, #6]
 8004748:	085b      	lsrs	r3, r3, #1
 800474a:	b29b      	uxth	r3, r3
 800474c:	005b      	lsls	r3, r3, #1
 800474e:	b29a      	uxth	r2, r3
 8004750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004752:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	62bb      	str	r3, [r7, #40]	; 0x28
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800475e:	b29b      	uxth	r3, r3
 8004760:	461a      	mov	r2, r3
 8004762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004764:	4413      	add	r3, r2
 8004766:	62bb      	str	r3, [r7, #40]	; 0x28
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	011a      	lsls	r2, r3, #4
 800476e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004770:	4413      	add	r3, r2
 8004772:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004776:	627b      	str	r3, [r7, #36]	; 0x24
 8004778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477a:	881b      	ldrh	r3, [r3, #0]
 800477c:	b29b      	uxth	r3, r3
 800477e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004782:	b29a      	uxth	r2, r3
 8004784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004786:	801a      	strh	r2, [r3, #0]
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	2b3e      	cmp	r3, #62	; 0x3e
 800478e:	d91d      	bls.n	80047cc <USB_ActivateEndpoint+0x2ac>
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	691b      	ldr	r3, [r3, #16]
 8004794:	095b      	lsrs	r3, r3, #5
 8004796:	66bb      	str	r3, [r7, #104]	; 0x68
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	691b      	ldr	r3, [r3, #16]
 800479c:	f003 031f 	and.w	r3, r3, #31
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d102      	bne.n	80047aa <USB_ActivateEndpoint+0x28a>
 80047a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047a6:	3b01      	subs	r3, #1
 80047a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80047aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ac:	881b      	ldrh	r3, [r3, #0]
 80047ae:	b29a      	uxth	r2, r3
 80047b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	029b      	lsls	r3, r3, #10
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	4313      	orrs	r3, r2
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047c4:	b29a      	uxth	r2, r3
 80047c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c8:	801a      	strh	r2, [r3, #0]
 80047ca:	e026      	b.n	800481a <USB_ActivateEndpoint+0x2fa>
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	691b      	ldr	r3, [r3, #16]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d10a      	bne.n	80047ea <USB_ActivateEndpoint+0x2ca>
 80047d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d6:	881b      	ldrh	r3, [r3, #0]
 80047d8:	b29b      	uxth	r3, r3
 80047da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047e2:	b29a      	uxth	r2, r3
 80047e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e6:	801a      	strh	r2, [r3, #0]
 80047e8:	e017      	b.n	800481a <USB_ActivateEndpoint+0x2fa>
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	085b      	lsrs	r3, r3, #1
 80047f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	f003 0301 	and.w	r3, r3, #1
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d002      	beq.n	8004804 <USB_ActivateEndpoint+0x2e4>
 80047fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004800:	3301      	adds	r3, #1
 8004802:	66bb      	str	r3, [r7, #104]	; 0x68
 8004804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004806:	881b      	ldrh	r3, [r3, #0]
 8004808:	b29a      	uxth	r2, r3
 800480a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800480c:	b29b      	uxth	r3, r3
 800480e:	029b      	lsls	r3, r3, #10
 8004810:	b29b      	uxth	r3, r3
 8004812:	4313      	orrs	r3, r2
 8004814:	b29a      	uxth	r2, r3
 8004816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004818:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	4413      	add	r3, r2
 8004824:	881b      	ldrh	r3, [r3, #0]
 8004826:	847b      	strh	r3, [r7, #34]	; 0x22
 8004828:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800482a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d01b      	beq.n	800486a <USB_ActivateEndpoint+0x34a>
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	009b      	lsls	r3, r3, #2
 800483a:	4413      	add	r3, r2
 800483c:	881b      	ldrh	r3, [r3, #0]
 800483e:	b29b      	uxth	r3, r3
 8004840:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004844:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004848:	843b      	strh	r3, [r7, #32]
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	441a      	add	r2, r3
 8004854:	8c3b      	ldrh	r3, [r7, #32]
 8004856:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800485a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800485e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004862:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004866:	b29b      	uxth	r3, r3
 8004868:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d124      	bne.n	80048bc <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	4413      	add	r3, r2
 800487c:	881b      	ldrh	r3, [r3, #0]
 800487e:	b29b      	uxth	r3, r3
 8004880:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004884:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004888:	83bb      	strh	r3, [r7, #28]
 800488a:	8bbb      	ldrh	r3, [r7, #28]
 800488c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004890:	83bb      	strh	r3, [r7, #28]
 8004892:	8bbb      	ldrh	r3, [r7, #28]
 8004894:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004898:	83bb      	strh	r3, [r7, #28]
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	441a      	add	r2, r3
 80048a4:	8bbb      	ldrh	r3, [r7, #28]
 80048a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	8013      	strh	r3, [r2, #0]
 80048ba:	e1ea      	b.n	8004c92 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	4413      	add	r3, r2
 80048c6:	881b      	ldrh	r3, [r3, #0]
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048d2:	83fb      	strh	r3, [r7, #30]
 80048d4:	8bfb      	ldrh	r3, [r7, #30]
 80048d6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80048da:	83fb      	strh	r3, [r7, #30]
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	781b      	ldrb	r3, [r3, #0]
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	441a      	add	r2, r3
 80048e6:	8bfb      	ldrh	r3, [r7, #30]
 80048e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	8013      	strh	r3, [r2, #0]
 80048fc:	e1c9      	b.n	8004c92 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	78db      	ldrb	r3, [r3, #3]
 8004902:	2b02      	cmp	r3, #2
 8004904:	d11e      	bne.n	8004944 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	4413      	add	r3, r2
 8004910:	881b      	ldrh	r3, [r3, #0]
 8004912:	b29b      	uxth	r3, r3
 8004914:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004918:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800491c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	441a      	add	r2, r3
 800492a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800492e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004932:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004936:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800493a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800493e:	b29b      	uxth	r3, r3
 8004940:	8013      	strh	r3, [r2, #0]
 8004942:	e01d      	b.n	8004980 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	4413      	add	r3, r2
 800494e:	881b      	ldrh	r3, [r3, #0]
 8004950:	b29b      	uxth	r3, r3
 8004952:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800495a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	441a      	add	r2, r3
 8004968:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800496c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004970:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004974:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004978:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800497c:	b29b      	uxth	r3, r3
 800497e:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800498a:	b29b      	uxth	r3, r3
 800498c:	461a      	mov	r2, r3
 800498e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004990:	4413      	add	r3, r2
 8004992:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	011a      	lsls	r2, r3, #4
 800499a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800499c:	4413      	add	r3, r2
 800499e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049a2:	65bb      	str	r3, [r7, #88]	; 0x58
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	891b      	ldrh	r3, [r3, #8]
 80049a8:	085b      	lsrs	r3, r3, #1
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	005b      	lsls	r3, r3, #1
 80049ae:	b29a      	uxth	r2, r3
 80049b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049b2:	801a      	strh	r2, [r3, #0]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	657b      	str	r3, [r7, #84]	; 0x54
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049be:	b29b      	uxth	r3, r3
 80049c0:	461a      	mov	r2, r3
 80049c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049c4:	4413      	add	r3, r2
 80049c6:	657b      	str	r3, [r7, #84]	; 0x54
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	011a      	lsls	r2, r3, #4
 80049ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049d0:	4413      	add	r3, r2
 80049d2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80049d6:	653b      	str	r3, [r7, #80]	; 0x50
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	895b      	ldrh	r3, [r3, #10]
 80049dc:	085b      	lsrs	r3, r3, #1
 80049de:	b29b      	uxth	r3, r3
 80049e0:	005b      	lsls	r3, r3, #1
 80049e2:	b29a      	uxth	r2, r3
 80049e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049e6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	785b      	ldrb	r3, [r3, #1]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	f040 8093 	bne.w	8004b18 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	4413      	add	r3, r2
 80049fc:	881b      	ldrh	r3, [r3, #0]
 80049fe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004a02:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004a06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d01b      	beq.n	8004a46 <USB_ActivateEndpoint+0x526>
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	4413      	add	r3, r2
 8004a18:	881b      	ldrh	r3, [r3, #0]
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a24:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	441a      	add	r2, r3
 8004a30:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004a32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	4413      	add	r3, r2
 8004a50:	881b      	ldrh	r3, [r3, #0]
 8004a52:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004a54:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d01b      	beq.n	8004a96 <USB_ActivateEndpoint+0x576>
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	4413      	add	r3, r2
 8004a68:	881b      	ldrh	r3, [r3, #0]
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a74:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	441a      	add	r2, r3
 8004a80:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004a82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a8e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	4413      	add	r3, r2
 8004aa0:	881b      	ldrh	r3, [r3, #0]
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004aa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aac:	873b      	strh	r3, [r7, #56]	; 0x38
 8004aae:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004ab0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004ab4:	873b      	strh	r3, [r7, #56]	; 0x38
 8004ab6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004ab8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004abc:	873b      	strh	r3, [r7, #56]	; 0x38
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	441a      	add	r2, r3
 8004ac8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004aca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ace:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ad2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ad6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	4413      	add	r3, r2
 8004ae8:	881b      	ldrh	r3, [r3, #0]
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004af0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004af4:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	441a      	add	r2, r3
 8004b00:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004b02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	8013      	strh	r3, [r2, #0]
 8004b16:	e0bc      	b.n	8004c92 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	4413      	add	r3, r2
 8004b22:	881b      	ldrh	r3, [r3, #0]
 8004b24:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004b28:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004b2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d01d      	beq.n	8004b70 <USB_ActivateEndpoint+0x650>
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	4413      	add	r3, r2
 8004b3e:	881b      	ldrh	r3, [r3, #0]
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b4a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	441a      	add	r2, r3
 8004b58:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004b5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	4413      	add	r3, r2
 8004b7a:	881b      	ldrh	r3, [r3, #0]
 8004b7c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004b80:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d01d      	beq.n	8004bc8 <USB_ActivateEndpoint+0x6a8>
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	4413      	add	r3, r2
 8004b96:	881b      	ldrh	r3, [r3, #0]
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ba2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	441a      	add	r2, r3
 8004bb0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004bb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bc0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	78db      	ldrb	r3, [r3, #3]
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d024      	beq.n	8004c1a <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	781b      	ldrb	r3, [r3, #0]
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	4413      	add	r3, r2
 8004bda:	881b      	ldrh	r3, [r3, #0]
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004be2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004be6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004bea:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004bee:	f083 0320 	eor.w	r3, r3, #32
 8004bf2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	441a      	add	r2, r3
 8004c00:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004c04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	8013      	strh	r3, [r2, #0]
 8004c18:	e01d      	b.n	8004c56 <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	4413      	add	r3, r2
 8004c24:	881b      	ldrh	r3, [r3, #0]
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c30:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	781b      	ldrb	r3, [r3, #0]
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	441a      	add	r2, r3
 8004c3e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004c42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	4413      	add	r3, r2
 8004c60:	881b      	ldrh	r3, [r3, #0]
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c6c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	441a      	add	r2, r3
 8004c7a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004c7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004c92:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3774      	adds	r7, #116	; 0x74
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bc80      	pop	{r7}
 8004c9e:	4770      	bx	lr

08004ca0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b08d      	sub	sp, #52	; 0x34
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	7b1b      	ldrb	r3, [r3, #12]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	f040 808e 	bne.w	8004dd0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	785b      	ldrb	r3, [r3, #1]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d044      	beq.n	8004d46 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	781b      	ldrb	r3, [r3, #0]
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	4413      	add	r3, r2
 8004cc6:	881b      	ldrh	r3, [r3, #0]
 8004cc8:	81bb      	strh	r3, [r7, #12]
 8004cca:	89bb      	ldrh	r3, [r7, #12]
 8004ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d01b      	beq.n	8004d0c <USB_DeactivateEndpoint+0x6c>
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	781b      	ldrb	r3, [r3, #0]
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	4413      	add	r3, r2
 8004cde:	881b      	ldrh	r3, [r3, #0]
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cea:	817b      	strh	r3, [r7, #10]
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	441a      	add	r2, r3
 8004cf6:	897b      	ldrh	r3, [r7, #10]
 8004cf8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d04:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	4413      	add	r3, r2
 8004d16:	881b      	ldrh	r3, [r3, #0]
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d22:	813b      	strh	r3, [r7, #8]
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	441a      	add	r2, r3
 8004d2e:	893b      	ldrh	r3, [r7, #8]
 8004d30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	8013      	strh	r3, [r2, #0]
 8004d44:	e192      	b.n	800506c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	4413      	add	r3, r2
 8004d50:	881b      	ldrh	r3, [r3, #0]
 8004d52:	827b      	strh	r3, [r7, #18]
 8004d54:	8a7b      	ldrh	r3, [r7, #18]
 8004d56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d01b      	beq.n	8004d96 <USB_DeactivateEndpoint+0xf6>
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	4413      	add	r3, r2
 8004d68:	881b      	ldrh	r3, [r3, #0]
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d74:	823b      	strh	r3, [r7, #16]
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	441a      	add	r2, r3
 8004d80:	8a3b      	ldrh	r3, [r7, #16]
 8004d82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d8a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	4413      	add	r3, r2
 8004da0:	881b      	ldrh	r3, [r3, #0]
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004da8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dac:	81fb      	strh	r3, [r7, #14]
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	441a      	add	r2, r3
 8004db8:	89fb      	ldrh	r3, [r7, #14]
 8004dba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	8013      	strh	r3, [r2, #0]
 8004dce:	e14d      	b.n	800506c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	785b      	ldrb	r3, [r3, #1]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	f040 80a5 	bne.w	8004f24 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	4413      	add	r3, r2
 8004de4:	881b      	ldrh	r3, [r3, #0]
 8004de6:	843b      	strh	r3, [r7, #32]
 8004de8:	8c3b      	ldrh	r3, [r7, #32]
 8004dea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d01b      	beq.n	8004e2a <USB_DeactivateEndpoint+0x18a>
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	4413      	add	r3, r2
 8004dfc:	881b      	ldrh	r3, [r3, #0]
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e08:	83fb      	strh	r3, [r7, #30]
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	441a      	add	r2, r3
 8004e14:	8bfb      	ldrh	r3, [r7, #30]
 8004e16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e1e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	4413      	add	r3, r2
 8004e34:	881b      	ldrh	r3, [r3, #0]
 8004e36:	83bb      	strh	r3, [r7, #28]
 8004e38:	8bbb      	ldrh	r3, [r7, #28]
 8004e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d01b      	beq.n	8004e7a <USB_DeactivateEndpoint+0x1da>
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	4413      	add	r3, r2
 8004e4c:	881b      	ldrh	r3, [r3, #0]
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e58:	837b      	strh	r3, [r7, #26]
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	441a      	add	r2, r3
 8004e64:	8b7b      	ldrh	r3, [r7, #26]
 8004e66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e72:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	4413      	add	r3, r2
 8004e84:	881b      	ldrh	r3, [r3, #0]
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e90:	833b      	strh	r3, [r7, #24]
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	441a      	add	r2, r3
 8004e9c:	8b3b      	ldrh	r3, [r7, #24]
 8004e9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ea2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ea6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004eaa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	4413      	add	r3, r2
 8004ebc:	881b      	ldrh	r3, [r3, #0]
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ec4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ec8:	82fb      	strh	r3, [r7, #22]
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	441a      	add	r2, r3
 8004ed4:	8afb      	ldrh	r3, [r7, #22]
 8004ed6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004eda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ede:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ee2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	4413      	add	r3, r2
 8004ef4:	881b      	ldrh	r3, [r3, #0]
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004efc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f00:	82bb      	strh	r3, [r7, #20]
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	441a      	add	r2, r3
 8004f0c:	8abb      	ldrh	r3, [r7, #20]
 8004f0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	8013      	strh	r3, [r2, #0]
 8004f22:	e0a3      	b.n	800506c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	4413      	add	r3, r2
 8004f2e:	881b      	ldrh	r3, [r3, #0]
 8004f30:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004f32:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004f34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d01b      	beq.n	8004f74 <USB_DeactivateEndpoint+0x2d4>
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	4413      	add	r3, r2
 8004f46:	881b      	ldrh	r3, [r3, #0]
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f52:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	441a      	add	r2, r3
 8004f5e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004f60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	4413      	add	r3, r2
 8004f7e:	881b      	ldrh	r3, [r3, #0]
 8004f80:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004f82:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d01b      	beq.n	8004fc4 <USB_DeactivateEndpoint+0x324>
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	4413      	add	r3, r2
 8004f96:	881b      	ldrh	r3, [r3, #0]
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fa2:	853b      	strh	r3, [r7, #40]	; 0x28
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	441a      	add	r2, r3
 8004fae:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004fb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fbc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	4413      	add	r3, r2
 8004fce:	881b      	ldrh	r3, [r3, #0]
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fda:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	441a      	add	r2, r3
 8004fe6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004fe8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ff0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ff4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	4413      	add	r3, r2
 8005006:	881b      	ldrh	r3, [r3, #0]
 8005008:	b29b      	uxth	r3, r3
 800500a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800500e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005012:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	441a      	add	r2, r3
 800501e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005020:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005024:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005028:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800502c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005030:	b29b      	uxth	r3, r3
 8005032:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	4413      	add	r3, r2
 800503e:	881b      	ldrh	r3, [r3, #0]
 8005040:	b29b      	uxth	r3, r3
 8005042:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800504a:	847b      	strh	r3, [r7, #34]	; 0x22
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	781b      	ldrb	r3, [r3, #0]
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	441a      	add	r2, r3
 8005056:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005058:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800505c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005060:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005068:	b29b      	uxth	r3, r3
 800506a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800506c:	2300      	movs	r3, #0
}
 800506e:	4618      	mov	r0, r3
 8005070:	3734      	adds	r7, #52	; 0x34
 8005072:	46bd      	mov	sp, r7
 8005074:	bc80      	pop	{r7}
 8005076:	4770      	bx	lr

08005078 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b0c2      	sub	sp, #264	; 0x108
 800507c:	af00      	add	r7, sp, #0
 800507e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005082:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005086:	6018      	str	r0, [r3, #0]
 8005088:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800508c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005090:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005092:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005096:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	785b      	ldrb	r3, [r3, #1]
 800509e:	2b01      	cmp	r3, #1
 80050a0:	f040 86b7 	bne.w	8005e12 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80050a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	699a      	ldr	r2, [r3, #24]
 80050b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	691b      	ldr	r3, [r3, #16]
 80050bc:	429a      	cmp	r2, r3
 80050be:	d908      	bls.n	80050d2 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80050c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	691b      	ldr	r3, [r3, #16]
 80050cc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80050d0:	e007      	b.n	80050e2 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80050d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	699b      	ldr	r3, [r3, #24]
 80050de:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80050e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	7b1b      	ldrb	r3, [r3, #12]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d13a      	bne.n	8005168 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80050f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	6959      	ldr	r1, [r3, #20]
 80050fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005102:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	88da      	ldrh	r2, [r3, #6]
 800510a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800510e:	b29b      	uxth	r3, r3
 8005110:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005114:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005118:	6800      	ldr	r0, [r0, #0]
 800511a:	f001 fc9c 	bl	8006a56 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800511e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005122:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	613b      	str	r3, [r7, #16]
 800512a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800512e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005138:	b29b      	uxth	r3, r3
 800513a:	461a      	mov	r2, r3
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	4413      	add	r3, r2
 8005140:	613b      	str	r3, [r7, #16]
 8005142:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005146:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	781b      	ldrb	r3, [r3, #0]
 800514e:	011a      	lsls	r2, r3, #4
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	4413      	add	r3, r2
 8005154:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005158:	60fb      	str	r3, [r7, #12]
 800515a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800515e:	b29a      	uxth	r2, r3
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	801a      	strh	r2, [r3, #0]
 8005164:	f000 be1f 	b.w	8005da6 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005168:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800516c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	78db      	ldrb	r3, [r3, #3]
 8005174:	2b02      	cmp	r3, #2
 8005176:	f040 8462 	bne.w	8005a3e <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800517a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800517e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	6a1a      	ldr	r2, [r3, #32]
 8005186:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800518a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	429a      	cmp	r2, r3
 8005194:	f240 83df 	bls.w	8005956 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005198:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800519c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	4413      	add	r3, r2
 80051b2:	881b      	ldrh	r3, [r3, #0]
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051be:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80051c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	441a      	add	r2, r3
 80051dc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80051e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051e8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80051ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80051f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	6a1a      	ldr	r2, [r3, #32]
 8005200:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005204:	1ad2      	subs	r2, r2, r3
 8005206:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800520a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005212:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005216:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005220:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	4413      	add	r3, r2
 800522c:	881b      	ldrh	r3, [r3, #0]
 800522e:	b29b      	uxth	r3, r3
 8005230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005234:	2b00      	cmp	r3, #0
 8005236:	f000 81c7 	beq.w	80055c8 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800523a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800523e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	633b      	str	r3, [r7, #48]	; 0x30
 8005246:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800524a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	785b      	ldrb	r3, [r3, #1]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d177      	bne.n	8005346 <USB_EPStartXfer+0x2ce>
 8005256:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800525a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	62bb      	str	r3, [r7, #40]	; 0x28
 8005262:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005266:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005270:	b29b      	uxth	r3, r3
 8005272:	461a      	mov	r2, r3
 8005274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005276:	4413      	add	r3, r2
 8005278:	62bb      	str	r3, [r7, #40]	; 0x28
 800527a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800527e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	011a      	lsls	r2, r3, #4
 8005288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800528a:	4413      	add	r3, r2
 800528c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005290:	627b      	str	r3, [r7, #36]	; 0x24
 8005292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005294:	881b      	ldrh	r3, [r3, #0]
 8005296:	b29b      	uxth	r3, r3
 8005298:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800529c:	b29a      	uxth	r2, r3
 800529e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a0:	801a      	strh	r2, [r3, #0]
 80052a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052a6:	2b3e      	cmp	r3, #62	; 0x3e
 80052a8:	d921      	bls.n	80052ee <USB_EPStartXfer+0x276>
 80052aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052ae:	095b      	lsrs	r3, r3, #5
 80052b0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80052b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052b8:	f003 031f 	and.w	r3, r3, #31
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d104      	bne.n	80052ca <USB_EPStartXfer+0x252>
 80052c0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80052c4:	3b01      	subs	r3, #1
 80052c6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80052ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052cc:	881b      	ldrh	r3, [r3, #0]
 80052ce:	b29a      	uxth	r2, r3
 80052d0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	029b      	lsls	r3, r3, #10
 80052d8:	b29b      	uxth	r3, r3
 80052da:	4313      	orrs	r3, r2
 80052dc:	b29b      	uxth	r3, r3
 80052de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052e6:	b29a      	uxth	r2, r3
 80052e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ea:	801a      	strh	r2, [r3, #0]
 80052ec:	e050      	b.n	8005390 <USB_EPStartXfer+0x318>
 80052ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d10a      	bne.n	800530c <USB_EPStartXfer+0x294>
 80052f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f8:	881b      	ldrh	r3, [r3, #0]
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005300:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005304:	b29a      	uxth	r2, r3
 8005306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005308:	801a      	strh	r2, [r3, #0]
 800530a:	e041      	b.n	8005390 <USB_EPStartXfer+0x318>
 800530c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005310:	085b      	lsrs	r3, r3, #1
 8005312:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005316:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800531a:	f003 0301 	and.w	r3, r3, #1
 800531e:	2b00      	cmp	r3, #0
 8005320:	d004      	beq.n	800532c <USB_EPStartXfer+0x2b4>
 8005322:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005326:	3301      	adds	r3, #1
 8005328:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800532c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532e:	881b      	ldrh	r3, [r3, #0]
 8005330:	b29a      	uxth	r2, r3
 8005332:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005336:	b29b      	uxth	r3, r3
 8005338:	029b      	lsls	r3, r3, #10
 800533a:	b29b      	uxth	r3, r3
 800533c:	4313      	orrs	r3, r2
 800533e:	b29a      	uxth	r2, r3
 8005340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005342:	801a      	strh	r2, [r3, #0]
 8005344:	e024      	b.n	8005390 <USB_EPStartXfer+0x318>
 8005346:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800534a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	785b      	ldrb	r3, [r3, #1]
 8005352:	2b01      	cmp	r3, #1
 8005354:	d11c      	bne.n	8005390 <USB_EPStartXfer+0x318>
 8005356:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800535a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005364:	b29b      	uxth	r3, r3
 8005366:	461a      	mov	r2, r3
 8005368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800536a:	4413      	add	r3, r2
 800536c:	633b      	str	r3, [r7, #48]	; 0x30
 800536e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005372:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	011a      	lsls	r2, r3, #4
 800537c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800537e:	4413      	add	r3, r2
 8005380:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005384:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005386:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800538a:	b29a      	uxth	r2, r3
 800538c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800538e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005390:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005394:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	895b      	ldrh	r3, [r3, #10]
 800539c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80053a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	6959      	ldr	r1, [r3, #20]
 80053ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80053b6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80053ba:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80053be:	6800      	ldr	r0, [r0, #0]
 80053c0:	f001 fb49 	bl	8006a56 <USB_WritePMA>
            ep->xfer_buff += len;
 80053c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	695a      	ldr	r2, [r3, #20]
 80053d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053d4:	441a      	add	r2, r3
 80053d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80053e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	6a1a      	ldr	r2, [r3, #32]
 80053ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d90f      	bls.n	800541e <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80053fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005402:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	6a1a      	ldr	r2, [r3, #32]
 800540a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800540e:	1ad2      	subs	r2, r2, r3
 8005410:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005414:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	621a      	str	r2, [r3, #32]
 800541c:	e00e      	b.n	800543c <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800541e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005422:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	6a1b      	ldr	r3, [r3, #32]
 800542a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800542e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005432:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	2200      	movs	r2, #0
 800543a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800543c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005440:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	785b      	ldrb	r3, [r3, #1]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d177      	bne.n	800553c <USB_EPStartXfer+0x4c4>
 800544c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005450:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	61bb      	str	r3, [r7, #24]
 8005458:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800545c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005466:	b29b      	uxth	r3, r3
 8005468:	461a      	mov	r2, r3
 800546a:	69bb      	ldr	r3, [r7, #24]
 800546c:	4413      	add	r3, r2
 800546e:	61bb      	str	r3, [r7, #24]
 8005470:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005474:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	011a      	lsls	r2, r3, #4
 800547e:	69bb      	ldr	r3, [r7, #24]
 8005480:	4413      	add	r3, r2
 8005482:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005486:	617b      	str	r3, [r7, #20]
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	881b      	ldrh	r3, [r3, #0]
 800548c:	b29b      	uxth	r3, r3
 800548e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005492:	b29a      	uxth	r2, r3
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	801a      	strh	r2, [r3, #0]
 8005498:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800549c:	2b3e      	cmp	r3, #62	; 0x3e
 800549e:	d921      	bls.n	80054e4 <USB_EPStartXfer+0x46c>
 80054a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054a4:	095b      	lsrs	r3, r3, #5
 80054a6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80054aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054ae:	f003 031f 	and.w	r3, r3, #31
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d104      	bne.n	80054c0 <USB_EPStartXfer+0x448>
 80054b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054ba:	3b01      	subs	r3, #1
 80054bc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	881b      	ldrh	r3, [r3, #0]
 80054c4:	b29a      	uxth	r2, r3
 80054c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	029b      	lsls	r3, r3, #10
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	4313      	orrs	r3, r2
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054dc:	b29a      	uxth	r2, r3
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	801a      	strh	r2, [r3, #0]
 80054e2:	e056      	b.n	8005592 <USB_EPStartXfer+0x51a>
 80054e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d10a      	bne.n	8005502 <USB_EPStartXfer+0x48a>
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	881b      	ldrh	r3, [r3, #0]
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054fa:	b29a      	uxth	r2, r3
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	801a      	strh	r2, [r3, #0]
 8005500:	e047      	b.n	8005592 <USB_EPStartXfer+0x51a>
 8005502:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005506:	085b      	lsrs	r3, r3, #1
 8005508:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800550c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005510:	f003 0301 	and.w	r3, r3, #1
 8005514:	2b00      	cmp	r3, #0
 8005516:	d004      	beq.n	8005522 <USB_EPStartXfer+0x4aa>
 8005518:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800551c:	3301      	adds	r3, #1
 800551e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	881b      	ldrh	r3, [r3, #0]
 8005526:	b29a      	uxth	r2, r3
 8005528:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800552c:	b29b      	uxth	r3, r3
 800552e:	029b      	lsls	r3, r3, #10
 8005530:	b29b      	uxth	r3, r3
 8005532:	4313      	orrs	r3, r2
 8005534:	b29a      	uxth	r2, r3
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	801a      	strh	r2, [r3, #0]
 800553a:	e02a      	b.n	8005592 <USB_EPStartXfer+0x51a>
 800553c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005540:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	785b      	ldrb	r3, [r3, #1]
 8005548:	2b01      	cmp	r3, #1
 800554a:	d122      	bne.n	8005592 <USB_EPStartXfer+0x51a>
 800554c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005550:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	623b      	str	r3, [r7, #32]
 8005558:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800555c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005566:	b29b      	uxth	r3, r3
 8005568:	461a      	mov	r2, r3
 800556a:	6a3b      	ldr	r3, [r7, #32]
 800556c:	4413      	add	r3, r2
 800556e:	623b      	str	r3, [r7, #32]
 8005570:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005574:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	011a      	lsls	r2, r3, #4
 800557e:	6a3b      	ldr	r3, [r7, #32]
 8005580:	4413      	add	r3, r2
 8005582:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005586:	61fb      	str	r3, [r7, #28]
 8005588:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800558c:	b29a      	uxth	r2, r3
 800558e:	69fb      	ldr	r3, [r7, #28]
 8005590:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005592:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005596:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	891b      	ldrh	r3, [r3, #8]
 800559e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80055a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	6959      	ldr	r1, [r3, #20]
 80055ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80055b8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80055bc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80055c0:	6800      	ldr	r0, [r0, #0]
 80055c2:	f001 fa48 	bl	8006a56 <USB_WritePMA>
 80055c6:	e3ee      	b.n	8005da6 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80055c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	785b      	ldrb	r3, [r3, #1]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d177      	bne.n	80056c8 <USB_EPStartXfer+0x650>
 80055d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80055e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	461a      	mov	r2, r3
 80055f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055f8:	4413      	add	r3, r2
 80055fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80055fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005600:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	011a      	lsls	r2, r3, #4
 800560a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800560c:	4413      	add	r3, r2
 800560e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005612:	647b      	str	r3, [r7, #68]	; 0x44
 8005614:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005616:	881b      	ldrh	r3, [r3, #0]
 8005618:	b29b      	uxth	r3, r3
 800561a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800561e:	b29a      	uxth	r2, r3
 8005620:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005622:	801a      	strh	r2, [r3, #0]
 8005624:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005628:	2b3e      	cmp	r3, #62	; 0x3e
 800562a:	d921      	bls.n	8005670 <USB_EPStartXfer+0x5f8>
 800562c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005630:	095b      	lsrs	r3, r3, #5
 8005632:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005636:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800563a:	f003 031f 	and.w	r3, r3, #31
 800563e:	2b00      	cmp	r3, #0
 8005640:	d104      	bne.n	800564c <USB_EPStartXfer+0x5d4>
 8005642:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005646:	3b01      	subs	r3, #1
 8005648:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800564c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800564e:	881b      	ldrh	r3, [r3, #0]
 8005650:	b29a      	uxth	r2, r3
 8005652:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005656:	b29b      	uxth	r3, r3
 8005658:	029b      	lsls	r3, r3, #10
 800565a:	b29b      	uxth	r3, r3
 800565c:	4313      	orrs	r3, r2
 800565e:	b29b      	uxth	r3, r3
 8005660:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005664:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005668:	b29a      	uxth	r2, r3
 800566a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800566c:	801a      	strh	r2, [r3, #0]
 800566e:	e056      	b.n	800571e <USB_EPStartXfer+0x6a6>
 8005670:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005674:	2b00      	cmp	r3, #0
 8005676:	d10a      	bne.n	800568e <USB_EPStartXfer+0x616>
 8005678:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800567a:	881b      	ldrh	r3, [r3, #0]
 800567c:	b29b      	uxth	r3, r3
 800567e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005682:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005686:	b29a      	uxth	r2, r3
 8005688:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800568a:	801a      	strh	r2, [r3, #0]
 800568c:	e047      	b.n	800571e <USB_EPStartXfer+0x6a6>
 800568e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005692:	085b      	lsrs	r3, r3, #1
 8005694:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005698:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800569c:	f003 0301 	and.w	r3, r3, #1
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d004      	beq.n	80056ae <USB_EPStartXfer+0x636>
 80056a4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80056a8:	3301      	adds	r3, #1
 80056aa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80056ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056b0:	881b      	ldrh	r3, [r3, #0]
 80056b2:	b29a      	uxth	r2, r3
 80056b4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	029b      	lsls	r3, r3, #10
 80056bc:	b29b      	uxth	r3, r3
 80056be:	4313      	orrs	r3, r2
 80056c0:	b29a      	uxth	r2, r3
 80056c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056c4:	801a      	strh	r2, [r3, #0]
 80056c6:	e02a      	b.n	800571e <USB_EPStartXfer+0x6a6>
 80056c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	785b      	ldrb	r3, [r3, #1]
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d122      	bne.n	800571e <USB_EPStartXfer+0x6a6>
 80056d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	653b      	str	r3, [r7, #80]	; 0x50
 80056e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	461a      	mov	r2, r3
 80056f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056f8:	4413      	add	r3, r2
 80056fa:	653b      	str	r3, [r7, #80]	; 0x50
 80056fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005700:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	011a      	lsls	r2, r3, #4
 800570a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800570c:	4413      	add	r3, r2
 800570e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005712:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005714:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005718:	b29a      	uxth	r2, r3
 800571a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800571c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800571e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005722:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	891b      	ldrh	r3, [r3, #8]
 800572a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800572e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005732:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	6959      	ldr	r1, [r3, #20]
 800573a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800573e:	b29b      	uxth	r3, r3
 8005740:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005744:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005748:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800574c:	6800      	ldr	r0, [r0, #0]
 800574e:	f001 f982 	bl	8006a56 <USB_WritePMA>
            ep->xfer_buff += len;
 8005752:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005756:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	695a      	ldr	r2, [r3, #20]
 800575e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005762:	441a      	add	r2, r3
 8005764:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005768:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005770:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005774:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	6a1a      	ldr	r2, [r3, #32]
 800577c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005780:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	691b      	ldr	r3, [r3, #16]
 8005788:	429a      	cmp	r2, r3
 800578a:	d90f      	bls.n	80057ac <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800578c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005790:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	6a1a      	ldr	r2, [r3, #32]
 8005798:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800579c:	1ad2      	subs	r2, r2, r3
 800579e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	621a      	str	r2, [r3, #32]
 80057aa:	e00e      	b.n	80057ca <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80057ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	6a1b      	ldr	r3, [r3, #32]
 80057b8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80057bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2200      	movs	r2, #0
 80057c8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80057ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	643b      	str	r3, [r7, #64]	; 0x40
 80057d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	785b      	ldrb	r3, [r3, #1]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d177      	bne.n	80058d6 <USB_EPStartXfer+0x85e>
 80057e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80057f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005800:	b29b      	uxth	r3, r3
 8005802:	461a      	mov	r2, r3
 8005804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005806:	4413      	add	r3, r2
 8005808:	63bb      	str	r3, [r7, #56]	; 0x38
 800580a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800580e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	011a      	lsls	r2, r3, #4
 8005818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800581a:	4413      	add	r3, r2
 800581c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005820:	637b      	str	r3, [r7, #52]	; 0x34
 8005822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005824:	881b      	ldrh	r3, [r3, #0]
 8005826:	b29b      	uxth	r3, r3
 8005828:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800582c:	b29a      	uxth	r2, r3
 800582e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005830:	801a      	strh	r2, [r3, #0]
 8005832:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005836:	2b3e      	cmp	r3, #62	; 0x3e
 8005838:	d921      	bls.n	800587e <USB_EPStartXfer+0x806>
 800583a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800583e:	095b      	lsrs	r3, r3, #5
 8005840:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005844:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005848:	f003 031f 	and.w	r3, r3, #31
 800584c:	2b00      	cmp	r3, #0
 800584e:	d104      	bne.n	800585a <USB_EPStartXfer+0x7e2>
 8005850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005854:	3b01      	subs	r3, #1
 8005856:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800585a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800585c:	881b      	ldrh	r3, [r3, #0]
 800585e:	b29a      	uxth	r2, r3
 8005860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005864:	b29b      	uxth	r3, r3
 8005866:	029b      	lsls	r3, r3, #10
 8005868:	b29b      	uxth	r3, r3
 800586a:	4313      	orrs	r3, r2
 800586c:	b29b      	uxth	r3, r3
 800586e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005872:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005876:	b29a      	uxth	r2, r3
 8005878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800587a:	801a      	strh	r2, [r3, #0]
 800587c:	e050      	b.n	8005920 <USB_EPStartXfer+0x8a8>
 800587e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005882:	2b00      	cmp	r3, #0
 8005884:	d10a      	bne.n	800589c <USB_EPStartXfer+0x824>
 8005886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005888:	881b      	ldrh	r3, [r3, #0]
 800588a:	b29b      	uxth	r3, r3
 800588c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005890:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005894:	b29a      	uxth	r2, r3
 8005896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005898:	801a      	strh	r2, [r3, #0]
 800589a:	e041      	b.n	8005920 <USB_EPStartXfer+0x8a8>
 800589c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058a0:	085b      	lsrs	r3, r3, #1
 80058a2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80058a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058aa:	f003 0301 	and.w	r3, r3, #1
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d004      	beq.n	80058bc <USB_EPStartXfer+0x844>
 80058b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058b6:	3301      	adds	r3, #1
 80058b8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80058bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058be:	881b      	ldrh	r3, [r3, #0]
 80058c0:	b29a      	uxth	r2, r3
 80058c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	029b      	lsls	r3, r3, #10
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	4313      	orrs	r3, r2
 80058ce:	b29a      	uxth	r2, r3
 80058d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058d2:	801a      	strh	r2, [r3, #0]
 80058d4:	e024      	b.n	8005920 <USB_EPStartXfer+0x8a8>
 80058d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	785b      	ldrb	r3, [r3, #1]
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d11c      	bne.n	8005920 <USB_EPStartXfer+0x8a8>
 80058e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	461a      	mov	r2, r3
 80058f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058fa:	4413      	add	r3, r2
 80058fc:	643b      	str	r3, [r7, #64]	; 0x40
 80058fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005902:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	011a      	lsls	r2, r3, #4
 800590c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800590e:	4413      	add	r3, r2
 8005910:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005914:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005916:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800591a:	b29a      	uxth	r2, r3
 800591c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800591e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005920:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005924:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	895b      	ldrh	r3, [r3, #10]
 800592c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005930:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005934:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	6959      	ldr	r1, [r3, #20]
 800593c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005940:	b29b      	uxth	r3, r3
 8005942:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005946:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800594a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800594e:	6800      	ldr	r0, [r0, #0]
 8005950:	f001 f881 	bl	8006a56 <USB_WritePMA>
 8005954:	e227      	b.n	8005da6 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005956:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800595a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	6a1b      	ldr	r3, [r3, #32]
 8005962:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005966:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800596a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005974:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	009b      	lsls	r3, r3, #2
 800597e:	4413      	add	r3, r2
 8005980:	881b      	ldrh	r3, [r3, #0]
 8005982:	b29b      	uxth	r3, r3
 8005984:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005988:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800598c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005990:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005994:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800599e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	009b      	lsls	r3, r3, #2
 80059a8:	441a      	add	r2, r3
 80059aa:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80059ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059be:	b29b      	uxth	r3, r3
 80059c0:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80059c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059dc:	b29b      	uxth	r3, r3
 80059de:	461a      	mov	r2, r3
 80059e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059e2:	4413      	add	r3, r2
 80059e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	011a      	lsls	r2, r3, #4
 80059f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059f6:	4413      	add	r3, r2
 80059f8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80059fc:	65bb      	str	r3, [r7, #88]	; 0x58
 80059fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a02:	b29a      	uxth	r2, r3
 8005a04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a06:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005a08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	891b      	ldrh	r3, [r3, #8]
 8005a14:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	6959      	ldr	r1, [r3, #20]
 8005a24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005a2e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005a32:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005a36:	6800      	ldr	r0, [r0, #0]
 8005a38:	f001 f80d 	bl	8006a56 <USB_WritePMA>
 8005a3c:	e1b3      	b.n	8005da6 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005a3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	6a1a      	ldr	r2, [r3, #32]
 8005a4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a4e:	1ad2      	subs	r2, r2, r3
 8005a50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005a5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	4413      	add	r3, r2
 8005a76:	881b      	ldrh	r3, [r3, #0]
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	f000 80c6 	beq.w	8005c10 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005a84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	673b      	str	r3, [r7, #112]	; 0x70
 8005a90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	785b      	ldrb	r3, [r3, #1]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d177      	bne.n	8005b90 <USB_EPStartXfer+0xb18>
 8005aa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005aa4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	66bb      	str	r3, [r7, #104]	; 0x68
 8005aac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ab0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	461a      	mov	r2, r3
 8005abe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ac0:	4413      	add	r3, r2
 8005ac2:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ac4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ac8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	011a      	lsls	r2, r3, #4
 8005ad2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ad4:	4413      	add	r3, r2
 8005ad6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ada:	667b      	str	r3, [r7, #100]	; 0x64
 8005adc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ade:	881b      	ldrh	r3, [r3, #0]
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ae6:	b29a      	uxth	r2, r3
 8005ae8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005aea:	801a      	strh	r2, [r3, #0]
 8005aec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005af0:	2b3e      	cmp	r3, #62	; 0x3e
 8005af2:	d921      	bls.n	8005b38 <USB_EPStartXfer+0xac0>
 8005af4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005af8:	095b      	lsrs	r3, r3, #5
 8005afa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005afe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b02:	f003 031f 	and.w	r3, r3, #31
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d104      	bne.n	8005b14 <USB_EPStartXfer+0xa9c>
 8005b0a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005b0e:	3b01      	subs	r3, #1
 8005b10:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005b14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b16:	881b      	ldrh	r3, [r3, #0]
 8005b18:	b29a      	uxth	r2, r3
 8005b1a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	029b      	lsls	r3, r3, #10
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	4313      	orrs	r3, r2
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b30:	b29a      	uxth	r2, r3
 8005b32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b34:	801a      	strh	r2, [r3, #0]
 8005b36:	e050      	b.n	8005bda <USB_EPStartXfer+0xb62>
 8005b38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d10a      	bne.n	8005b56 <USB_EPStartXfer+0xade>
 8005b40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b42:	881b      	ldrh	r3, [r3, #0]
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b4e:	b29a      	uxth	r2, r3
 8005b50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b52:	801a      	strh	r2, [r3, #0]
 8005b54:	e041      	b.n	8005bda <USB_EPStartXfer+0xb62>
 8005b56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b5a:	085b      	lsrs	r3, r3, #1
 8005b5c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005b60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b64:	f003 0301 	and.w	r3, r3, #1
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d004      	beq.n	8005b76 <USB_EPStartXfer+0xafe>
 8005b6c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005b70:	3301      	adds	r3, #1
 8005b72:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005b76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b78:	881b      	ldrh	r3, [r3, #0]
 8005b7a:	b29a      	uxth	r2, r3
 8005b7c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	029b      	lsls	r3, r3, #10
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	4313      	orrs	r3, r2
 8005b88:	b29a      	uxth	r2, r3
 8005b8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b8c:	801a      	strh	r2, [r3, #0]
 8005b8e:	e024      	b.n	8005bda <USB_EPStartXfer+0xb62>
 8005b90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	785b      	ldrb	r3, [r3, #1]
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d11c      	bne.n	8005bda <USB_EPStartXfer+0xb62>
 8005ba0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ba4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005bb4:	4413      	add	r3, r2
 8005bb6:	673b      	str	r3, [r7, #112]	; 0x70
 8005bb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	011a      	lsls	r2, r3, #4
 8005bc6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005bc8:	4413      	add	r3, r2
 8005bca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005bce:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005bd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bd4:	b29a      	uxth	r2, r3
 8005bd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bd8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005bda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	895b      	ldrh	r3, [r3, #10]
 8005be6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005bea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	6959      	ldr	r1, [r3, #20]
 8005bf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005c00:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005c04:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005c08:	6800      	ldr	r0, [r0, #0]
 8005c0a:	f000 ff24 	bl	8006a56 <USB_WritePMA>
 8005c0e:	e0ca      	b.n	8005da6 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005c10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	785b      	ldrb	r3, [r3, #1]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d177      	bne.n	8005d10 <USB_EPStartXfer+0xc98>
 8005c20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005c2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c30:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005c40:	4413      	add	r3, r2
 8005c42:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005c44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	011a      	lsls	r2, r3, #4
 8005c52:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005c54:	4413      	add	r3, r2
 8005c56:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c5a:	67bb      	str	r3, [r7, #120]	; 0x78
 8005c5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c5e:	881b      	ldrh	r3, [r3, #0]
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c66:	b29a      	uxth	r2, r3
 8005c68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c6a:	801a      	strh	r2, [r3, #0]
 8005c6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c70:	2b3e      	cmp	r3, #62	; 0x3e
 8005c72:	d921      	bls.n	8005cb8 <USB_EPStartXfer+0xc40>
 8005c74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c78:	095b      	lsrs	r3, r3, #5
 8005c7a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005c7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c82:	f003 031f 	and.w	r3, r3, #31
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d104      	bne.n	8005c94 <USB_EPStartXfer+0xc1c>
 8005c8a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005c8e:	3b01      	subs	r3, #1
 8005c90:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005c94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c96:	881b      	ldrh	r3, [r3, #0]
 8005c98:	b29a      	uxth	r2, r3
 8005c9a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	029b      	lsls	r3, r3, #10
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cb0:	b29a      	uxth	r2, r3
 8005cb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cb4:	801a      	strh	r2, [r3, #0]
 8005cb6:	e05c      	b.n	8005d72 <USB_EPStartXfer+0xcfa>
 8005cb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d10a      	bne.n	8005cd6 <USB_EPStartXfer+0xc5e>
 8005cc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cc2:	881b      	ldrh	r3, [r3, #0]
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cce:	b29a      	uxth	r2, r3
 8005cd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cd2:	801a      	strh	r2, [r3, #0]
 8005cd4:	e04d      	b.n	8005d72 <USB_EPStartXfer+0xcfa>
 8005cd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cda:	085b      	lsrs	r3, r3, #1
 8005cdc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005ce0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ce4:	f003 0301 	and.w	r3, r3, #1
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d004      	beq.n	8005cf6 <USB_EPStartXfer+0xc7e>
 8005cec:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005cf0:	3301      	adds	r3, #1
 8005cf2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005cf6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cf8:	881b      	ldrh	r3, [r3, #0]
 8005cfa:	b29a      	uxth	r2, r3
 8005cfc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	029b      	lsls	r3, r3, #10
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	4313      	orrs	r3, r2
 8005d08:	b29a      	uxth	r2, r3
 8005d0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d0c:	801a      	strh	r2, [r3, #0]
 8005d0e:	e030      	b.n	8005d72 <USB_EPStartXfer+0xcfa>
 8005d10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	785b      	ldrb	r3, [r3, #1]
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d128      	bne.n	8005d72 <USB_EPStartXfer+0xcfa>
 8005d20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005d2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	461a      	mov	r2, r3
 8005d40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d44:	4413      	add	r3, r2
 8005d46:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005d4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	011a      	lsls	r2, r3, #4
 8005d58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d5c:	4413      	add	r3, r2
 8005d5e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d62:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005d66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d6a:	b29a      	uxth	r2, r3
 8005d6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005d70:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005d72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	891b      	ldrh	r3, [r3, #8]
 8005d7e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	6959      	ldr	r1, [r3, #20]
 8005d8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005d98:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005d9c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005da0:	6800      	ldr	r0, [r0, #0]
 8005da2:	f000 fe58 	bl	8006a56 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005da6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005daa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005db4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	4413      	add	r3, r2
 8005dc0:	881b      	ldrh	r3, [r3, #0]
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dcc:	817b      	strh	r3, [r7, #10]
 8005dce:	897b      	ldrh	r3, [r7, #10]
 8005dd0:	f083 0310 	eor.w	r3, r3, #16
 8005dd4:	817b      	strh	r3, [r7, #10]
 8005dd6:	897b      	ldrh	r3, [r7, #10]
 8005dd8:	f083 0320 	eor.w	r3, r3, #32
 8005ddc:	817b      	strh	r3, [r7, #10]
 8005dde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005de2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	441a      	add	r2, r3
 8005df8:	897b      	ldrh	r3, [r7, #10]
 8005dfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	8013      	strh	r3, [r2, #0]
 8005e0e:	f000 bcde 	b.w	80067ce <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005e12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	7b1b      	ldrb	r3, [r3, #12]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	f040 80bb 	bne.w	8005f9a <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005e24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	699a      	ldr	r2, [r3, #24]
 8005e30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	691b      	ldr	r3, [r3, #16]
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d917      	bls.n	8005e70 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005e40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	691b      	ldr	r3, [r3, #16]
 8005e4c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8005e50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	699a      	ldr	r2, [r3, #24]
 8005e5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e60:	1ad2      	subs	r2, r2, r3
 8005e62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	619a      	str	r2, [r3, #24]
 8005e6e:	e00e      	b.n	8005e8e <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005e70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	699b      	ldr	r3, [r3, #24]
 8005e7c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8005e80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005e8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005e9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ea0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	461a      	mov	r2, r3
 8005eae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005eb2:	4413      	add	r3, r2
 8005eb4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005eb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ebc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	011a      	lsls	r2, r3, #4
 8005ec6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005eca:	4413      	add	r3, r2
 8005ecc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ed0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005ed4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ed8:	881b      	ldrh	r3, [r3, #0]
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ee0:	b29a      	uxth	r2, r3
 8005ee2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ee6:	801a      	strh	r2, [r3, #0]
 8005ee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005eec:	2b3e      	cmp	r3, #62	; 0x3e
 8005eee:	d924      	bls.n	8005f3a <USB_EPStartXfer+0xec2>
 8005ef0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ef4:	095b      	lsrs	r3, r3, #5
 8005ef6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005efa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005efe:	f003 031f 	and.w	r3, r3, #31
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d104      	bne.n	8005f10 <USB_EPStartXfer+0xe98>
 8005f06:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005f0a:	3b01      	subs	r3, #1
 8005f0c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005f10:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f14:	881b      	ldrh	r3, [r3, #0]
 8005f16:	b29a      	uxth	r2, r3
 8005f18:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	029b      	lsls	r3, r3, #10
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	4313      	orrs	r3, r2
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f2e:	b29a      	uxth	r2, r3
 8005f30:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f34:	801a      	strh	r2, [r3, #0]
 8005f36:	f000 bc10 	b.w	800675a <USB_EPStartXfer+0x16e2>
 8005f3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d10c      	bne.n	8005f5c <USB_EPStartXfer+0xee4>
 8005f42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f46:	881b      	ldrh	r3, [r3, #0]
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f52:	b29a      	uxth	r2, r3
 8005f54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f58:	801a      	strh	r2, [r3, #0]
 8005f5a:	e3fe      	b.n	800675a <USB_EPStartXfer+0x16e2>
 8005f5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f60:	085b      	lsrs	r3, r3, #1
 8005f62:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005f66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f6a:	f003 0301 	and.w	r3, r3, #1
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d004      	beq.n	8005f7c <USB_EPStartXfer+0xf04>
 8005f72:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005f76:	3301      	adds	r3, #1
 8005f78:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005f7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f80:	881b      	ldrh	r3, [r3, #0]
 8005f82:	b29a      	uxth	r2, r3
 8005f84:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	029b      	lsls	r3, r3, #10
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	b29a      	uxth	r2, r3
 8005f92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f96:	801a      	strh	r2, [r3, #0]
 8005f98:	e3df      	b.n	800675a <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005f9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	78db      	ldrb	r3, [r3, #3]
 8005fa6:	2b02      	cmp	r3, #2
 8005fa8:	f040 8218 	bne.w	80063dc <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005fac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	785b      	ldrb	r3, [r3, #1]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	f040 809d 	bne.w	80060f8 <USB_EPStartXfer+0x1080>
 8005fbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fc2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005fcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fd0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	461a      	mov	r2, r3
 8005fde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005fe2:	4413      	add	r3, r2
 8005fe4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005fe8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	011a      	lsls	r2, r3, #4
 8005ff6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ffa:	4413      	add	r3, r2
 8005ffc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006000:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006004:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006008:	881b      	ldrh	r3, [r3, #0]
 800600a:	b29b      	uxth	r3, r3
 800600c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006010:	b29a      	uxth	r2, r3
 8006012:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006016:	801a      	strh	r2, [r3, #0]
 8006018:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800601c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	691b      	ldr	r3, [r3, #16]
 8006024:	2b3e      	cmp	r3, #62	; 0x3e
 8006026:	d92b      	bls.n	8006080 <USB_EPStartXfer+0x1008>
 8006028:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800602c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	691b      	ldr	r3, [r3, #16]
 8006034:	095b      	lsrs	r3, r3, #5
 8006036:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800603a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800603e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	f003 031f 	and.w	r3, r3, #31
 800604a:	2b00      	cmp	r3, #0
 800604c:	d104      	bne.n	8006058 <USB_EPStartXfer+0xfe0>
 800604e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006052:	3b01      	subs	r3, #1
 8006054:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006058:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800605c:	881b      	ldrh	r3, [r3, #0]
 800605e:	b29a      	uxth	r2, r3
 8006060:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006064:	b29b      	uxth	r3, r3
 8006066:	029b      	lsls	r3, r3, #10
 8006068:	b29b      	uxth	r3, r3
 800606a:	4313      	orrs	r3, r2
 800606c:	b29b      	uxth	r3, r3
 800606e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006072:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006076:	b29a      	uxth	r2, r3
 8006078:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800607c:	801a      	strh	r2, [r3, #0]
 800607e:	e070      	b.n	8006162 <USB_EPStartXfer+0x10ea>
 8006080:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006084:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	691b      	ldr	r3, [r3, #16]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d10c      	bne.n	80060aa <USB_EPStartXfer+0x1032>
 8006090:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006094:	881b      	ldrh	r3, [r3, #0]
 8006096:	b29b      	uxth	r3, r3
 8006098:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800609c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060a0:	b29a      	uxth	r2, r3
 80060a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80060a6:	801a      	strh	r2, [r3, #0]
 80060a8:	e05b      	b.n	8006162 <USB_EPStartXfer+0x10ea>
 80060aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	691b      	ldr	r3, [r3, #16]
 80060b6:	085b      	lsrs	r3, r3, #1
 80060b8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80060bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	691b      	ldr	r3, [r3, #16]
 80060c8:	f003 0301 	and.w	r3, r3, #1
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d004      	beq.n	80060da <USB_EPStartXfer+0x1062>
 80060d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060d4:	3301      	adds	r3, #1
 80060d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80060da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80060de:	881b      	ldrh	r3, [r3, #0]
 80060e0:	b29a      	uxth	r2, r3
 80060e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	029b      	lsls	r3, r3, #10
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	4313      	orrs	r3, r2
 80060ee:	b29a      	uxth	r2, r3
 80060f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80060f4:	801a      	strh	r2, [r3, #0]
 80060f6:	e034      	b.n	8006162 <USB_EPStartXfer+0x10ea>
 80060f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	785b      	ldrb	r3, [r3, #1]
 8006104:	2b01      	cmp	r3, #1
 8006106:	d12c      	bne.n	8006162 <USB_EPStartXfer+0x10ea>
 8006108:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800610c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006116:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800611a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006124:	b29b      	uxth	r3, r3
 8006126:	461a      	mov	r2, r3
 8006128:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800612c:	4413      	add	r3, r2
 800612e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006132:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006136:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	781b      	ldrb	r3, [r3, #0]
 800613e:	011a      	lsls	r2, r3, #4
 8006140:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006144:	4413      	add	r3, r2
 8006146:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800614a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800614e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006152:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	b29a      	uxth	r2, r3
 800615c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006160:	801a      	strh	r2, [r3, #0]
 8006162:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006166:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006170:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006174:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	785b      	ldrb	r3, [r3, #1]
 800617c:	2b00      	cmp	r3, #0
 800617e:	f040 809d 	bne.w	80062bc <USB_EPStartXfer+0x1244>
 8006182:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006186:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006190:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006194:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800619e:	b29b      	uxth	r3, r3
 80061a0:	461a      	mov	r2, r3
 80061a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80061a6:	4413      	add	r3, r2
 80061a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80061ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	011a      	lsls	r2, r3, #4
 80061ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80061be:	4413      	add	r3, r2
 80061c0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80061c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80061c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80061cc:	881b      	ldrh	r3, [r3, #0]
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061d4:	b29a      	uxth	r2, r3
 80061d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80061da:	801a      	strh	r2, [r3, #0]
 80061dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	691b      	ldr	r3, [r3, #16]
 80061e8:	2b3e      	cmp	r3, #62	; 0x3e
 80061ea:	d92b      	bls.n	8006244 <USB_EPStartXfer+0x11cc>
 80061ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	691b      	ldr	r3, [r3, #16]
 80061f8:	095b      	lsrs	r3, r3, #5
 80061fa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80061fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006202:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	f003 031f 	and.w	r3, r3, #31
 800620e:	2b00      	cmp	r3, #0
 8006210:	d104      	bne.n	800621c <USB_EPStartXfer+0x11a4>
 8006212:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006216:	3b01      	subs	r3, #1
 8006218:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800621c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006220:	881b      	ldrh	r3, [r3, #0]
 8006222:	b29a      	uxth	r2, r3
 8006224:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006228:	b29b      	uxth	r3, r3
 800622a:	029b      	lsls	r3, r3, #10
 800622c:	b29b      	uxth	r3, r3
 800622e:	4313      	orrs	r3, r2
 8006230:	b29b      	uxth	r3, r3
 8006232:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006236:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800623a:	b29a      	uxth	r2, r3
 800623c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006240:	801a      	strh	r2, [r3, #0]
 8006242:	e069      	b.n	8006318 <USB_EPStartXfer+0x12a0>
 8006244:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006248:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	691b      	ldr	r3, [r3, #16]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d10c      	bne.n	800626e <USB_EPStartXfer+0x11f6>
 8006254:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006258:	881b      	ldrh	r3, [r3, #0]
 800625a:	b29b      	uxth	r3, r3
 800625c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006260:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006264:	b29a      	uxth	r2, r3
 8006266:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800626a:	801a      	strh	r2, [r3, #0]
 800626c:	e054      	b.n	8006318 <USB_EPStartXfer+0x12a0>
 800626e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006272:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	691b      	ldr	r3, [r3, #16]
 800627a:	085b      	lsrs	r3, r3, #1
 800627c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006280:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006284:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	691b      	ldr	r3, [r3, #16]
 800628c:	f003 0301 	and.w	r3, r3, #1
 8006290:	2b00      	cmp	r3, #0
 8006292:	d004      	beq.n	800629e <USB_EPStartXfer+0x1226>
 8006294:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006298:	3301      	adds	r3, #1
 800629a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800629e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062a2:	881b      	ldrh	r3, [r3, #0]
 80062a4:	b29a      	uxth	r2, r3
 80062a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	029b      	lsls	r3, r3, #10
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	4313      	orrs	r3, r2
 80062b2:	b29a      	uxth	r2, r3
 80062b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062b8:	801a      	strh	r2, [r3, #0]
 80062ba:	e02d      	b.n	8006318 <USB_EPStartXfer+0x12a0>
 80062bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	785b      	ldrb	r3, [r3, #1]
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	d125      	bne.n	8006318 <USB_EPStartXfer+0x12a0>
 80062cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062da:	b29b      	uxth	r3, r3
 80062dc:	461a      	mov	r2, r3
 80062de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80062e2:	4413      	add	r3, r2
 80062e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80062e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	011a      	lsls	r2, r3, #4
 80062f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80062fa:	4413      	add	r3, r2
 80062fc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006300:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006304:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006308:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	691b      	ldr	r3, [r3, #16]
 8006310:	b29a      	uxth	r2, r3
 8006312:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006316:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006318:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800631c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	69db      	ldr	r3, [r3, #28]
 8006324:	2b00      	cmp	r3, #0
 8006326:	f000 8218 	beq.w	800675a <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800632a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800632e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006338:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	009b      	lsls	r3, r3, #2
 8006342:	4413      	add	r3, r2
 8006344:	881b      	ldrh	r3, [r3, #0]
 8006346:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800634a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800634e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006352:	2b00      	cmp	r3, #0
 8006354:	d005      	beq.n	8006362 <USB_EPStartXfer+0x12ea>
 8006356:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800635a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800635e:	2b00      	cmp	r3, #0
 8006360:	d10d      	bne.n	800637e <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006362:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006366:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800636a:	2b00      	cmp	r3, #0
 800636c:	f040 81f5 	bne.w	800675a <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006370:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006378:	2b00      	cmp	r3, #0
 800637a:	f040 81ee 	bne.w	800675a <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800637e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006382:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800638c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	009b      	lsls	r3, r3, #2
 8006396:	4413      	add	r3, r2
 8006398:	881b      	ldrh	r3, [r3, #0]
 800639a:	b29b      	uxth	r3, r3
 800639c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063a4:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80063a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	441a      	add	r2, r3
 80063c2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80063c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063d2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	8013      	strh	r3, [r2, #0]
 80063da:	e1be      	b.n	800675a <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80063dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	78db      	ldrb	r3, [r3, #3]
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	f040 81b4 	bne.w	8006756 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80063ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	699a      	ldr	r2, [r3, #24]
 80063fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	429a      	cmp	r2, r3
 8006408:	d917      	bls.n	800643a <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800640a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800640e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	691b      	ldr	r3, [r3, #16]
 8006416:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800641a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800641e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	699a      	ldr	r2, [r3, #24]
 8006426:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800642a:	1ad2      	subs	r2, r2, r3
 800642c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006430:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	619a      	str	r2, [r3, #24]
 8006438:	e00e      	b.n	8006458 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800643a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800643e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	699b      	ldr	r3, [r3, #24]
 8006446:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800644a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800644e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	2200      	movs	r2, #0
 8006456:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006458:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800645c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	785b      	ldrb	r3, [r3, #1]
 8006464:	2b00      	cmp	r3, #0
 8006466:	f040 8085 	bne.w	8006574 <USB_EPStartXfer+0x14fc>
 800646a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800646e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006478:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800647c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006486:	b29b      	uxth	r3, r3
 8006488:	461a      	mov	r2, r3
 800648a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800648e:	4413      	add	r3, r2
 8006490:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006494:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006498:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	011a      	lsls	r2, r3, #4
 80064a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80064a6:	4413      	add	r3, r2
 80064a8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80064ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80064b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80064b4:	881b      	ldrh	r3, [r3, #0]
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064bc:	b29a      	uxth	r2, r3
 80064be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80064c2:	801a      	strh	r2, [r3, #0]
 80064c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064c8:	2b3e      	cmp	r3, #62	; 0x3e
 80064ca:	d923      	bls.n	8006514 <USB_EPStartXfer+0x149c>
 80064cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064d0:	095b      	lsrs	r3, r3, #5
 80064d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80064d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064da:	f003 031f 	and.w	r3, r3, #31
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d104      	bne.n	80064ec <USB_EPStartXfer+0x1474>
 80064e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064e6:	3b01      	subs	r3, #1
 80064e8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80064ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80064f0:	881b      	ldrh	r3, [r3, #0]
 80064f2:	b29a      	uxth	r2, r3
 80064f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	029b      	lsls	r3, r3, #10
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	4313      	orrs	r3, r2
 8006500:	b29b      	uxth	r3, r3
 8006502:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006506:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800650a:	b29a      	uxth	r2, r3
 800650c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006510:	801a      	strh	r2, [r3, #0]
 8006512:	e060      	b.n	80065d6 <USB_EPStartXfer+0x155e>
 8006514:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006518:	2b00      	cmp	r3, #0
 800651a:	d10c      	bne.n	8006536 <USB_EPStartXfer+0x14be>
 800651c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006520:	881b      	ldrh	r3, [r3, #0]
 8006522:	b29b      	uxth	r3, r3
 8006524:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006528:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800652c:	b29a      	uxth	r2, r3
 800652e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006532:	801a      	strh	r2, [r3, #0]
 8006534:	e04f      	b.n	80065d6 <USB_EPStartXfer+0x155e>
 8006536:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800653a:	085b      	lsrs	r3, r3, #1
 800653c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006540:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006544:	f003 0301 	and.w	r3, r3, #1
 8006548:	2b00      	cmp	r3, #0
 800654a:	d004      	beq.n	8006556 <USB_EPStartXfer+0x14de>
 800654c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006550:	3301      	adds	r3, #1
 8006552:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006556:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800655a:	881b      	ldrh	r3, [r3, #0]
 800655c:	b29a      	uxth	r2, r3
 800655e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006562:	b29b      	uxth	r3, r3
 8006564:	029b      	lsls	r3, r3, #10
 8006566:	b29b      	uxth	r3, r3
 8006568:	4313      	orrs	r3, r2
 800656a:	b29a      	uxth	r2, r3
 800656c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006570:	801a      	strh	r2, [r3, #0]
 8006572:	e030      	b.n	80065d6 <USB_EPStartXfer+0x155e>
 8006574:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006578:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	785b      	ldrb	r3, [r3, #1]
 8006580:	2b01      	cmp	r3, #1
 8006582:	d128      	bne.n	80065d6 <USB_EPStartXfer+0x155e>
 8006584:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006588:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006592:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006596:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	461a      	mov	r2, r3
 80065a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065a8:	4413      	add	r3, r2
 80065aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80065ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	011a      	lsls	r2, r3, #4
 80065bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065c0:	4413      	add	r3, r2
 80065c2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80065c6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80065ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065ce:	b29a      	uxth	r2, r3
 80065d0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80065d4:	801a      	strh	r2, [r3, #0]
 80065d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80065e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	785b      	ldrb	r3, [r3, #1]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	f040 8085 	bne.w	8006700 <USB_EPStartXfer+0x1688>
 80065f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006604:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006608:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006612:	b29b      	uxth	r3, r3
 8006614:	461a      	mov	r2, r3
 8006616:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800661a:	4413      	add	r3, r2
 800661c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006620:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006624:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	011a      	lsls	r2, r3, #4
 800662e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006632:	4413      	add	r3, r2
 8006634:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006638:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800663c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006640:	881b      	ldrh	r3, [r3, #0]
 8006642:	b29b      	uxth	r3, r3
 8006644:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006648:	b29a      	uxth	r2, r3
 800664a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800664e:	801a      	strh	r2, [r3, #0]
 8006650:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006654:	2b3e      	cmp	r3, #62	; 0x3e
 8006656:	d923      	bls.n	80066a0 <USB_EPStartXfer+0x1628>
 8006658:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800665c:	095b      	lsrs	r3, r3, #5
 800665e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006662:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006666:	f003 031f 	and.w	r3, r3, #31
 800666a:	2b00      	cmp	r3, #0
 800666c:	d104      	bne.n	8006678 <USB_EPStartXfer+0x1600>
 800666e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006672:	3b01      	subs	r3, #1
 8006674:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006678:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800667c:	881b      	ldrh	r3, [r3, #0]
 800667e:	b29a      	uxth	r2, r3
 8006680:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006684:	b29b      	uxth	r3, r3
 8006686:	029b      	lsls	r3, r3, #10
 8006688:	b29b      	uxth	r3, r3
 800668a:	4313      	orrs	r3, r2
 800668c:	b29b      	uxth	r3, r3
 800668e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006692:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006696:	b29a      	uxth	r2, r3
 8006698:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800669c:	801a      	strh	r2, [r3, #0]
 800669e:	e05c      	b.n	800675a <USB_EPStartXfer+0x16e2>
 80066a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d10c      	bne.n	80066c2 <USB_EPStartXfer+0x164a>
 80066a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80066ac:	881b      	ldrh	r3, [r3, #0]
 80066ae:	b29b      	uxth	r3, r3
 80066b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066b8:	b29a      	uxth	r2, r3
 80066ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80066be:	801a      	strh	r2, [r3, #0]
 80066c0:	e04b      	b.n	800675a <USB_EPStartXfer+0x16e2>
 80066c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066c6:	085b      	lsrs	r3, r3, #1
 80066c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80066cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066d0:	f003 0301 	and.w	r3, r3, #1
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d004      	beq.n	80066e2 <USB_EPStartXfer+0x166a>
 80066d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066dc:	3301      	adds	r3, #1
 80066de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80066e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80066e6:	881b      	ldrh	r3, [r3, #0]
 80066e8:	b29a      	uxth	r2, r3
 80066ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	029b      	lsls	r3, r3, #10
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	4313      	orrs	r3, r2
 80066f6:	b29a      	uxth	r2, r3
 80066f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80066fc:	801a      	strh	r2, [r3, #0]
 80066fe:	e02c      	b.n	800675a <USB_EPStartXfer+0x16e2>
 8006700:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006704:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	785b      	ldrb	r3, [r3, #1]
 800670c:	2b01      	cmp	r3, #1
 800670e:	d124      	bne.n	800675a <USB_EPStartXfer+0x16e2>
 8006710:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006714:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800671e:	b29b      	uxth	r3, r3
 8006720:	461a      	mov	r2, r3
 8006722:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006726:	4413      	add	r3, r2
 8006728:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800672c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006730:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	011a      	lsls	r2, r3, #4
 800673a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800673e:	4413      	add	r3, r2
 8006740:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006744:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006748:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800674c:	b29a      	uxth	r2, r3
 800674e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006752:	801a      	strh	r2, [r3, #0]
 8006754:	e001      	b.n	800675a <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	e03a      	b.n	80067d0 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800675a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800675e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006768:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	781b      	ldrb	r3, [r3, #0]
 8006770:	009b      	lsls	r3, r3, #2
 8006772:	4413      	add	r3, r2
 8006774:	881b      	ldrh	r3, [r3, #0]
 8006776:	b29b      	uxth	r3, r3
 8006778:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800677c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006780:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006784:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006788:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800678c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006790:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006794:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006798:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800679c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	009b      	lsls	r3, r3, #2
 80067b4:	441a      	add	r2, r3
 80067b6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80067ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80067ce:	2300      	movs	r3, #0
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}

080067da <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80067da:	b480      	push	{r7}
 80067dc:	b085      	sub	sp, #20
 80067de:	af00      	add	r7, sp, #0
 80067e0:	6078      	str	r0, [r7, #4]
 80067e2:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	785b      	ldrb	r3, [r3, #1]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d020      	beq.n	800682e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	009b      	lsls	r3, r3, #2
 80067f4:	4413      	add	r3, r2
 80067f6:	881b      	ldrh	r3, [r3, #0]
 80067f8:	b29b      	uxth	r3, r3
 80067fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006802:	81bb      	strh	r3, [r7, #12]
 8006804:	89bb      	ldrh	r3, [r7, #12]
 8006806:	f083 0310 	eor.w	r3, r3, #16
 800680a:	81bb      	strh	r3, [r7, #12]
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	441a      	add	r2, r3
 8006816:	89bb      	ldrh	r3, [r7, #12]
 8006818:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800681c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006820:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006828:	b29b      	uxth	r3, r3
 800682a:	8013      	strh	r3, [r2, #0]
 800682c:	e01f      	b.n	800686e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800682e:	687a      	ldr	r2, [r7, #4]
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	009b      	lsls	r3, r3, #2
 8006836:	4413      	add	r3, r2
 8006838:	881b      	ldrh	r3, [r3, #0]
 800683a:	b29b      	uxth	r3, r3
 800683c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006840:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006844:	81fb      	strh	r3, [r7, #14]
 8006846:	89fb      	ldrh	r3, [r7, #14]
 8006848:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800684c:	81fb      	strh	r3, [r7, #14]
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	781b      	ldrb	r3, [r3, #0]
 8006854:	009b      	lsls	r3, r3, #2
 8006856:	441a      	add	r2, r3
 8006858:	89fb      	ldrh	r3, [r7, #14]
 800685a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800685e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006862:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006866:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800686a:	b29b      	uxth	r3, r3
 800686c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800686e:	2300      	movs	r3, #0
}
 8006870:	4618      	mov	r0, r3
 8006872:	3714      	adds	r7, #20
 8006874:	46bd      	mov	sp, r7
 8006876:	bc80      	pop	{r7}
 8006878:	4770      	bx	lr

0800687a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800687a:	b480      	push	{r7}
 800687c:	b087      	sub	sp, #28
 800687e:	af00      	add	r7, sp, #0
 8006880:	6078      	str	r0, [r7, #4]
 8006882:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	7b1b      	ldrb	r3, [r3, #12]
 8006888:	2b00      	cmp	r3, #0
 800688a:	f040 809d 	bne.w	80069c8 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	785b      	ldrb	r3, [r3, #1]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d04c      	beq.n	8006930 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006896:	687a      	ldr	r2, [r7, #4]
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	4413      	add	r3, r2
 80068a0:	881b      	ldrh	r3, [r3, #0]
 80068a2:	823b      	strh	r3, [r7, #16]
 80068a4:	8a3b      	ldrh	r3, [r7, #16]
 80068a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d01b      	beq.n	80068e6 <USB_EPClearStall+0x6c>
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	781b      	ldrb	r3, [r3, #0]
 80068b4:	009b      	lsls	r3, r3, #2
 80068b6:	4413      	add	r3, r2
 80068b8:	881b      	ldrh	r3, [r3, #0]
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068c4:	81fb      	strh	r3, [r7, #14]
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	441a      	add	r2, r3
 80068d0:	89fb      	ldrh	r3, [r7, #14]
 80068d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	78db      	ldrb	r3, [r3, #3]
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d06c      	beq.n	80069c8 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80068ee:	687a      	ldr	r2, [r7, #4]
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	781b      	ldrb	r3, [r3, #0]
 80068f4:	009b      	lsls	r3, r3, #2
 80068f6:	4413      	add	r3, r2
 80068f8:	881b      	ldrh	r3, [r3, #0]
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006900:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006904:	81bb      	strh	r3, [r7, #12]
 8006906:	89bb      	ldrh	r3, [r7, #12]
 8006908:	f083 0320 	eor.w	r3, r3, #32
 800690c:	81bb      	strh	r3, [r7, #12]
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	009b      	lsls	r3, r3, #2
 8006916:	441a      	add	r2, r3
 8006918:	89bb      	ldrh	r3, [r7, #12]
 800691a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800691e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006922:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006926:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800692a:	b29b      	uxth	r3, r3
 800692c:	8013      	strh	r3, [r2, #0]
 800692e:	e04b      	b.n	80069c8 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	781b      	ldrb	r3, [r3, #0]
 8006936:	009b      	lsls	r3, r3, #2
 8006938:	4413      	add	r3, r2
 800693a:	881b      	ldrh	r3, [r3, #0]
 800693c:	82fb      	strh	r3, [r7, #22]
 800693e:	8afb      	ldrh	r3, [r7, #22]
 8006940:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006944:	2b00      	cmp	r3, #0
 8006946:	d01b      	beq.n	8006980 <USB_EPClearStall+0x106>
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	4413      	add	r3, r2
 8006952:	881b      	ldrh	r3, [r3, #0]
 8006954:	b29b      	uxth	r3, r3
 8006956:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800695a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800695e:	82bb      	strh	r3, [r7, #20]
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	441a      	add	r2, r3
 800696a:	8abb      	ldrh	r3, [r7, #20]
 800696c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006970:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006974:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006978:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800697c:	b29b      	uxth	r3, r3
 800697e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006980:	687a      	ldr	r2, [r7, #4]
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	781b      	ldrb	r3, [r3, #0]
 8006986:	009b      	lsls	r3, r3, #2
 8006988:	4413      	add	r3, r2
 800698a:	881b      	ldrh	r3, [r3, #0]
 800698c:	b29b      	uxth	r3, r3
 800698e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006996:	827b      	strh	r3, [r7, #18]
 8006998:	8a7b      	ldrh	r3, [r7, #18]
 800699a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800699e:	827b      	strh	r3, [r7, #18]
 80069a0:	8a7b      	ldrh	r3, [r7, #18]
 80069a2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80069a6:	827b      	strh	r3, [r7, #18]
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	009b      	lsls	r3, r3, #2
 80069b0:	441a      	add	r2, r3
 80069b2:	8a7b      	ldrh	r3, [r7, #18]
 80069b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80069c8:	2300      	movs	r3, #0
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	371c      	adds	r7, #28
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bc80      	pop	{r7}
 80069d2:	4770      	bx	lr

080069d4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b083      	sub	sp, #12
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	460b      	mov	r3, r1
 80069de:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80069e0:	78fb      	ldrb	r3, [r7, #3]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d103      	bne.n	80069ee <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2280      	movs	r2, #128	; 0x80
 80069ea:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80069ee:	2300      	movs	r3, #0
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	370c      	adds	r7, #12
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bc80      	pop	{r7}
 80069f8:	4770      	bx	lr

080069fa <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80069fa:	b480      	push	{r7}
 80069fc:	b083      	sub	sp, #12
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006a02:	2300      	movs	r3, #0
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	370c      	adds	r7, #12
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bc80      	pop	{r7}
 8006a0c:	4770      	bx	lr

08006a0e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006a0e:	b480      	push	{r7}
 8006a10:	b083      	sub	sp, #12
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006a16:	2300      	movs	r3, #0
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	370c      	adds	r7, #12
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bc80      	pop	{r7}
 8006a20:	4770      	bx	lr

08006a22 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8006a22:	b480      	push	{r7}
 8006a24:	b085      	sub	sp, #20
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006a30:	b29b      	uxth	r3, r3
 8006a32:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006a34:	68fb      	ldr	r3, [r7, #12]
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3714      	adds	r7, #20
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bc80      	pop	{r7}
 8006a3e:	4770      	bx	lr

08006a40 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b083      	sub	sp, #12
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
 8006a48:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006a4a:	2300      	movs	r3, #0
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	370c      	adds	r7, #12
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bc80      	pop	{r7}
 8006a54:	4770      	bx	lr

08006a56 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006a56:	b480      	push	{r7}
 8006a58:	b08b      	sub	sp, #44	; 0x2c
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	60f8      	str	r0, [r7, #12]
 8006a5e:	60b9      	str	r1, [r7, #8]
 8006a60:	4611      	mov	r1, r2
 8006a62:	461a      	mov	r2, r3
 8006a64:	460b      	mov	r3, r1
 8006a66:	80fb      	strh	r3, [r7, #6]
 8006a68:	4613      	mov	r3, r2
 8006a6a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006a6c:	88bb      	ldrh	r3, [r7, #4]
 8006a6e:	3301      	adds	r3, #1
 8006a70:	085b      	lsrs	r3, r3, #1
 8006a72:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006a7c:	88fb      	ldrh	r3, [r7, #6]
 8006a7e:	005a      	lsls	r2, r3, #1
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	4413      	add	r3, r2
 8006a84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a88:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006a8a:	69bb      	ldr	r3, [r7, #24]
 8006a8c:	627b      	str	r3, [r7, #36]	; 0x24
 8006a8e:	e01e      	b.n	8006ace <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8006a90:	69fb      	ldr	r3, [r7, #28]
 8006a92:	781b      	ldrb	r3, [r3, #0]
 8006a94:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006a96:	69fb      	ldr	r3, [r7, #28]
 8006a98:	3301      	adds	r3, #1
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	021b      	lsls	r3, r3, #8
 8006a9e:	b21a      	sxth	r2, r3
 8006aa0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	b21b      	sxth	r3, r3
 8006aa8:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006aaa:	6a3b      	ldr	r3, [r7, #32]
 8006aac:	8a7a      	ldrh	r2, [r7, #18]
 8006aae:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006ab0:	6a3b      	ldr	r3, [r7, #32]
 8006ab2:	3302      	adds	r3, #2
 8006ab4:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006ab6:	6a3b      	ldr	r3, [r7, #32]
 8006ab8:	3302      	adds	r3, #2
 8006aba:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8006abc:	69fb      	ldr	r3, [r7, #28]
 8006abe:	3301      	adds	r3, #1
 8006ac0:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006ac2:	69fb      	ldr	r3, [r7, #28]
 8006ac4:	3301      	adds	r3, #1
 8006ac6:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aca:	3b01      	subs	r3, #1
 8006acc:	627b      	str	r3, [r7, #36]	; 0x24
 8006ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d1dd      	bne.n	8006a90 <USB_WritePMA+0x3a>
  }
}
 8006ad4:	bf00      	nop
 8006ad6:	bf00      	nop
 8006ad8:	372c      	adds	r7, #44	; 0x2c
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bc80      	pop	{r7}
 8006ade:	4770      	bx	lr

08006ae0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b08b      	sub	sp, #44	; 0x2c
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	60f8      	str	r0, [r7, #12]
 8006ae8:	60b9      	str	r1, [r7, #8]
 8006aea:	4611      	mov	r1, r2
 8006aec:	461a      	mov	r2, r3
 8006aee:	460b      	mov	r3, r1
 8006af0:	80fb      	strh	r3, [r7, #6]
 8006af2:	4613      	mov	r3, r2
 8006af4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006af6:	88bb      	ldrh	r3, [r7, #4]
 8006af8:	085b      	lsrs	r3, r3, #1
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006b06:	88fb      	ldrh	r3, [r7, #6]
 8006b08:	005a      	lsls	r2, r3, #1
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	4413      	add	r3, r2
 8006b0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b12:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006b14:	69bb      	ldr	r3, [r7, #24]
 8006b16:	627b      	str	r3, [r7, #36]	; 0x24
 8006b18:	e01b      	b.n	8006b52 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006b1a:	6a3b      	ldr	r3, [r7, #32]
 8006b1c:	881b      	ldrh	r3, [r3, #0]
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006b22:	6a3b      	ldr	r3, [r7, #32]
 8006b24:	3302      	adds	r3, #2
 8006b26:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	b2da      	uxtb	r2, r3
 8006b2c:	69fb      	ldr	r3, [r7, #28]
 8006b2e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006b30:	69fb      	ldr	r3, [r7, #28]
 8006b32:	3301      	adds	r3, #1
 8006b34:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	0a1b      	lsrs	r3, r3, #8
 8006b3a:	b2da      	uxtb	r2, r3
 8006b3c:	69fb      	ldr	r3, [r7, #28]
 8006b3e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006b40:	69fb      	ldr	r3, [r7, #28]
 8006b42:	3301      	adds	r3, #1
 8006b44:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006b46:	6a3b      	ldr	r3, [r7, #32]
 8006b48:	3302      	adds	r3, #2
 8006b4a:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8006b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4e:	3b01      	subs	r3, #1
 8006b50:	627b      	str	r3, [r7, #36]	; 0x24
 8006b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d1e0      	bne.n	8006b1a <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006b58:	88bb      	ldrh	r3, [r7, #4]
 8006b5a:	f003 0301 	and.w	r3, r3, #1
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d007      	beq.n	8006b74 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8006b64:	6a3b      	ldr	r3, [r7, #32]
 8006b66:	881b      	ldrh	r3, [r3, #0]
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	b2da      	uxtb	r2, r3
 8006b70:	69fb      	ldr	r3, [r7, #28]
 8006b72:	701a      	strb	r2, [r3, #0]
  }
}
 8006b74:	bf00      	nop
 8006b76:	372c      	adds	r7, #44	; 0x2c
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bc80      	pop	{r7}
 8006b7c:	4770      	bx	lr

08006b7e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b7e:	b580      	push	{r7, lr}
 8006b80:	b084      	sub	sp, #16
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]
 8006b86:	460b      	mov	r3, r1
 8006b88:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	7c1b      	ldrb	r3, [r3, #16]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d115      	bne.n	8006bc2 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006b96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b9a:	2202      	movs	r2, #2
 8006b9c:	2181      	movs	r1, #129	; 0x81
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f001 fe87 	bl	80088b2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006baa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006bae:	2202      	movs	r2, #2
 8006bb0:	2101      	movs	r1, #1
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f001 fe7d 	bl	80088b2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006bc0:	e012      	b.n	8006be8 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006bc2:	2340      	movs	r3, #64	; 0x40
 8006bc4:	2202      	movs	r2, #2
 8006bc6:	2181      	movs	r1, #129	; 0x81
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f001 fe72 	bl	80088b2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006bd4:	2340      	movs	r3, #64	; 0x40
 8006bd6:	2202      	movs	r2, #2
 8006bd8:	2101      	movs	r1, #1
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f001 fe69 	bl	80088b2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2201      	movs	r2, #1
 8006be4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006be8:	2308      	movs	r3, #8
 8006bea:	2203      	movs	r2, #3
 8006bec:	2182      	movs	r1, #130	; 0x82
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f001 fe5f 	bl	80088b2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006bfa:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006bfe:	f001 ff7f 	bl	8008b00 <USBD_static_malloc>
 8006c02:	4602      	mov	r2, r0
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d102      	bne.n	8006c1a <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006c14:	2301      	movs	r3, #1
 8006c16:	73fb      	strb	r3, [r7, #15]
 8006c18:	e026      	b.n	8006c68 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c20:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	2200      	movs	r2, #0
 8006c38:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	7c1b      	ldrb	r3, [r3, #16]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d109      	bne.n	8006c58 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c4e:	2101      	movs	r1, #1
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f001 ff1f 	bl	8008a94 <USBD_LL_PrepareReceive>
 8006c56:	e007      	b.n	8006c68 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c5e:	2340      	movs	r3, #64	; 0x40
 8006c60:	2101      	movs	r1, #1
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f001 ff16 	bl	8008a94 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3710      	adds	r7, #16
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}

08006c72 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c72:	b580      	push	{r7, lr}
 8006c74:	b084      	sub	sp, #16
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	6078      	str	r0, [r7, #4]
 8006c7a:	460b      	mov	r3, r1
 8006c7c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006c82:	2181      	movs	r1, #129	; 0x81
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f001 fe3a 	bl	80088fe <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006c90:	2101      	movs	r1, #1
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f001 fe33 	bl	80088fe <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006ca0:	2182      	movs	r1, #130	; 0x82
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f001 fe2b 	bl	80088fe <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2200      	movs	r2, #0
 8006cac:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d00e      	beq.n	8006cd6 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cc8:	4618      	mov	r0, r3
 8006cca:	f001 ff25 	bl	8008b18 <USBD_static_free>
    pdev->pClassData = NULL;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3710      	adds	r7, #16
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}

08006ce0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b086      	sub	sp, #24
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cf0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	781b      	ldrb	r3, [r3, #0]
 8006d02:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d039      	beq.n	8006d7e <USBD_CDC_Setup+0x9e>
 8006d0a:	2b20      	cmp	r3, #32
 8006d0c:	d17f      	bne.n	8006e0e <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	88db      	ldrh	r3, [r3, #6]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d029      	beq.n	8006d6a <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	781b      	ldrb	r3, [r3, #0]
 8006d1a:	b25b      	sxtb	r3, r3
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	da11      	bge.n	8006d44 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	683a      	ldr	r2, [r7, #0]
 8006d2a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006d2c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006d2e:	683a      	ldr	r2, [r7, #0]
 8006d30:	88d2      	ldrh	r2, [r2, #6]
 8006d32:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006d34:	6939      	ldr	r1, [r7, #16]
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	88db      	ldrh	r3, [r3, #6]
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f001 fa0a 	bl	8008156 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006d42:	e06b      	b.n	8006e1c <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	785a      	ldrb	r2, [r3, #1]
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	88db      	ldrh	r3, [r3, #6]
 8006d52:	b2da      	uxtb	r2, r3
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006d5a:	6939      	ldr	r1, [r7, #16]
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	88db      	ldrh	r3, [r3, #6]
 8006d60:	461a      	mov	r2, r3
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f001 fa25 	bl	80081b2 <USBD_CtlPrepareRx>
      break;
 8006d68:	e058      	b.n	8006e1c <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	683a      	ldr	r2, [r7, #0]
 8006d74:	7850      	ldrb	r0, [r2, #1]
 8006d76:	2200      	movs	r2, #0
 8006d78:	6839      	ldr	r1, [r7, #0]
 8006d7a:	4798      	blx	r3
      break;
 8006d7c:	e04e      	b.n	8006e1c <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	785b      	ldrb	r3, [r3, #1]
 8006d82:	2b0b      	cmp	r3, #11
 8006d84:	d02e      	beq.n	8006de4 <USBD_CDC_Setup+0x104>
 8006d86:	2b0b      	cmp	r3, #11
 8006d88:	dc38      	bgt.n	8006dfc <USBD_CDC_Setup+0x11c>
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d002      	beq.n	8006d94 <USBD_CDC_Setup+0xb4>
 8006d8e:	2b0a      	cmp	r3, #10
 8006d90:	d014      	beq.n	8006dbc <USBD_CDC_Setup+0xdc>
 8006d92:	e033      	b.n	8006dfc <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d9a:	2b03      	cmp	r3, #3
 8006d9c:	d107      	bne.n	8006dae <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006d9e:	f107 030c 	add.w	r3, r7, #12
 8006da2:	2202      	movs	r2, #2
 8006da4:	4619      	mov	r1, r3
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f001 f9d5 	bl	8008156 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006dac:	e02e      	b.n	8006e0c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006dae:	6839      	ldr	r1, [r7, #0]
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f001 f966 	bl	8008082 <USBD_CtlError>
            ret = USBD_FAIL;
 8006db6:	2302      	movs	r3, #2
 8006db8:	75fb      	strb	r3, [r7, #23]
          break;
 8006dba:	e027      	b.n	8006e0c <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dc2:	2b03      	cmp	r3, #3
 8006dc4:	d107      	bne.n	8006dd6 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006dc6:	f107 030f 	add.w	r3, r7, #15
 8006dca:	2201      	movs	r2, #1
 8006dcc:	4619      	mov	r1, r3
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f001 f9c1 	bl	8008156 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006dd4:	e01a      	b.n	8006e0c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006dd6:	6839      	ldr	r1, [r7, #0]
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f001 f952 	bl	8008082 <USBD_CtlError>
            ret = USBD_FAIL;
 8006dde:	2302      	movs	r3, #2
 8006de0:	75fb      	strb	r3, [r7, #23]
          break;
 8006de2:	e013      	b.n	8006e0c <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dea:	2b03      	cmp	r3, #3
 8006dec:	d00d      	beq.n	8006e0a <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006dee:	6839      	ldr	r1, [r7, #0]
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f001 f946 	bl	8008082 <USBD_CtlError>
            ret = USBD_FAIL;
 8006df6:	2302      	movs	r3, #2
 8006df8:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006dfa:	e006      	b.n	8006e0a <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006dfc:	6839      	ldr	r1, [r7, #0]
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f001 f93f 	bl	8008082 <USBD_CtlError>
          ret = USBD_FAIL;
 8006e04:	2302      	movs	r3, #2
 8006e06:	75fb      	strb	r3, [r7, #23]
          break;
 8006e08:	e000      	b.n	8006e0c <USBD_CDC_Setup+0x12c>
          break;
 8006e0a:	bf00      	nop
      }
      break;
 8006e0c:	e006      	b.n	8006e1c <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006e0e:	6839      	ldr	r1, [r7, #0]
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f001 f936 	bl	8008082 <USBD_CtlError>
      ret = USBD_FAIL;
 8006e16:	2302      	movs	r3, #2
 8006e18:	75fb      	strb	r3, [r7, #23]
      break;
 8006e1a:	bf00      	nop
  }

  return ret;
 8006e1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3718      	adds	r7, #24
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}

08006e26 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006e26:	b580      	push	{r7, lr}
 8006e28:	b084      	sub	sp, #16
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	6078      	str	r0, [r7, #4]
 8006e2e:	460b      	mov	r3, r1
 8006e30:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e38:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006e40:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d03a      	beq.n	8006ec2 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006e4c:	78fa      	ldrb	r2, [r7, #3]
 8006e4e:	6879      	ldr	r1, [r7, #4]
 8006e50:	4613      	mov	r3, r2
 8006e52:	009b      	lsls	r3, r3, #2
 8006e54:	4413      	add	r3, r2
 8006e56:	009b      	lsls	r3, r3, #2
 8006e58:	440b      	add	r3, r1
 8006e5a:	331c      	adds	r3, #28
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d029      	beq.n	8006eb6 <USBD_CDC_DataIn+0x90>
 8006e62:	78fa      	ldrb	r2, [r7, #3]
 8006e64:	6879      	ldr	r1, [r7, #4]
 8006e66:	4613      	mov	r3, r2
 8006e68:	009b      	lsls	r3, r3, #2
 8006e6a:	4413      	add	r3, r2
 8006e6c:	009b      	lsls	r3, r3, #2
 8006e6e:	440b      	add	r3, r1
 8006e70:	331c      	adds	r3, #28
 8006e72:	681a      	ldr	r2, [r3, #0]
 8006e74:	78f9      	ldrb	r1, [r7, #3]
 8006e76:	68b8      	ldr	r0, [r7, #8]
 8006e78:	460b      	mov	r3, r1
 8006e7a:	009b      	lsls	r3, r3, #2
 8006e7c:	440b      	add	r3, r1
 8006e7e:	00db      	lsls	r3, r3, #3
 8006e80:	4403      	add	r3, r0
 8006e82:	3338      	adds	r3, #56	; 0x38
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	fbb2 f1f3 	udiv	r1, r2, r3
 8006e8a:	fb01 f303 	mul.w	r3, r1, r3
 8006e8e:	1ad3      	subs	r3, r2, r3
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d110      	bne.n	8006eb6 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006e94:	78fa      	ldrb	r2, [r7, #3]
 8006e96:	6879      	ldr	r1, [r7, #4]
 8006e98:	4613      	mov	r3, r2
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	4413      	add	r3, r2
 8006e9e:	009b      	lsls	r3, r3, #2
 8006ea0:	440b      	add	r3, r1
 8006ea2:	331c      	adds	r3, #28
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006ea8:	78f9      	ldrb	r1, [r7, #3]
 8006eaa:	2300      	movs	r3, #0
 8006eac:	2200      	movs	r2, #0
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f001 fdcd 	bl	8008a4e <USBD_LL_Transmit>
 8006eb4:	e003      	b.n	8006ebe <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	e000      	b.n	8006ec4 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006ec2:	2302      	movs	r3, #2
  }
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3710      	adds	r7, #16
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}

08006ecc <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b084      	sub	sp, #16
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	460b      	mov	r3, r1
 8006ed6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ede:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006ee0:	78fb      	ldrb	r3, [r7, #3]
 8006ee2:	4619      	mov	r1, r3
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f001 fdf8 	bl	8008ada <USBD_LL_GetRxDataSize>
 8006eea:	4602      	mov	r2, r0
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d00d      	beq.n	8006f18 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f02:	68db      	ldr	r3, [r3, #12]
 8006f04:	68fa      	ldr	r2, [r7, #12]
 8006f06:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006f0a:	68fa      	ldr	r2, [r7, #12]
 8006f0c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006f10:	4611      	mov	r1, r2
 8006f12:	4798      	blx	r3

    return USBD_OK;
 8006f14:	2300      	movs	r3, #0
 8006f16:	e000      	b.n	8006f1a <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006f18:	2302      	movs	r3, #2
  }
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3710      	adds	r7, #16
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}

08006f22 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006f22:	b580      	push	{r7, lr}
 8006f24:	b084      	sub	sp, #16
 8006f26:	af00      	add	r7, sp, #0
 8006f28:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f30:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d015      	beq.n	8006f68 <USBD_CDC_EP0_RxReady+0x46>
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006f42:	2bff      	cmp	r3, #255	; 0xff
 8006f44:	d010      	beq.n	8006f68 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f4c:	689b      	ldr	r3, [r3, #8]
 8006f4e:	68fa      	ldr	r2, [r7, #12]
 8006f50:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006f54:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006f56:	68fa      	ldr	r2, [r7, #12]
 8006f58:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006f5c:	b292      	uxth	r2, r2
 8006f5e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	22ff      	movs	r2, #255	; 0xff
 8006f64:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006f68:	2300      	movs	r3, #0
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3710      	adds	r7, #16
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}
	...

08006f74 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b083      	sub	sp, #12
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2243      	movs	r2, #67	; 0x43
 8006f80:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006f82:	4b03      	ldr	r3, [pc, #12]	; (8006f90 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	370c      	adds	r7, #12
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bc80      	pop	{r7}
 8006f8c:	4770      	bx	lr
 8006f8e:	bf00      	nop
 8006f90:	200000a0 	.word	0x200000a0

08006f94 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b083      	sub	sp, #12
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2243      	movs	r2, #67	; 0x43
 8006fa0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006fa2:	4b03      	ldr	r3, [pc, #12]	; (8006fb0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	370c      	adds	r7, #12
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bc80      	pop	{r7}
 8006fac:	4770      	bx	lr
 8006fae:	bf00      	nop
 8006fb0:	2000005c 	.word	0x2000005c

08006fb4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b083      	sub	sp, #12
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2243      	movs	r2, #67	; 0x43
 8006fc0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006fc2:	4b03      	ldr	r3, [pc, #12]	; (8006fd0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	370c      	adds	r7, #12
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bc80      	pop	{r7}
 8006fcc:	4770      	bx	lr
 8006fce:	bf00      	nop
 8006fd0:	200000e4 	.word	0x200000e4

08006fd4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b083      	sub	sp, #12
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	220a      	movs	r2, #10
 8006fe0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006fe2:	4b03      	ldr	r3, [pc, #12]	; (8006ff0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	370c      	adds	r7, #12
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bc80      	pop	{r7}
 8006fec:	4770      	bx	lr
 8006fee:	bf00      	nop
 8006ff0:	20000018 	.word	0x20000018

08006ff4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b085      	sub	sp, #20
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006ffe:	2302      	movs	r3, #2
 8007000:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d005      	beq.n	8007014 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	683a      	ldr	r2, [r7, #0]
 800700c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8007010:	2300      	movs	r3, #0
 8007012:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007014:	7bfb      	ldrb	r3, [r7, #15]
}
 8007016:	4618      	mov	r0, r3
 8007018:	3714      	adds	r7, #20
 800701a:	46bd      	mov	sp, r7
 800701c:	bc80      	pop	{r7}
 800701e:	4770      	bx	lr

08007020 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007020:	b480      	push	{r7}
 8007022:	b087      	sub	sp, #28
 8007024:	af00      	add	r7, sp, #0
 8007026:	60f8      	str	r0, [r7, #12]
 8007028:	60b9      	str	r1, [r7, #8]
 800702a:	4613      	mov	r3, r2
 800702c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007034:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	68ba      	ldr	r2, [r7, #8]
 800703a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800703e:	88fa      	ldrh	r2, [r7, #6]
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8007046:	2300      	movs	r3, #0
}
 8007048:	4618      	mov	r0, r3
 800704a:	371c      	adds	r7, #28
 800704c:	46bd      	mov	sp, r7
 800704e:	bc80      	pop	{r7}
 8007050:	4770      	bx	lr

08007052 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8007052:	b480      	push	{r7}
 8007054:	b085      	sub	sp, #20
 8007056:	af00      	add	r7, sp, #0
 8007058:	6078      	str	r0, [r7, #4]
 800705a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007062:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	683a      	ldr	r2, [r7, #0]
 8007068:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800706c:	2300      	movs	r3, #0
}
 800706e:	4618      	mov	r0, r3
 8007070:	3714      	adds	r7, #20
 8007072:	46bd      	mov	sp, r7
 8007074:	bc80      	pop	{r7}
 8007076:	4770      	bx	lr

08007078 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b084      	sub	sp, #16
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007086:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800708e:	2b00      	cmp	r3, #0
 8007090:	d01c      	beq.n	80070cc <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007098:	2b00      	cmp	r3, #0
 800709a:	d115      	bne.n	80070c8 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2201      	movs	r2, #1
 80070a0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	2181      	movs	r1, #129	; 0x81
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f001 fcc5 	bl	8008a4e <USBD_LL_Transmit>

      return USBD_OK;
 80070c4:	2300      	movs	r3, #0
 80070c6:	e002      	b.n	80070ce <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80070c8:	2301      	movs	r3, #1
 80070ca:	e000      	b.n	80070ce <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80070cc:	2302      	movs	r3, #2
  }
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3710      	adds	r7, #16
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}

080070d6 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80070d6:	b580      	push	{r7, lr}
 80070d8:	b084      	sub	sp, #16
 80070da:	af00      	add	r7, sp, #0
 80070dc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070e4:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d017      	beq.n	8007120 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	7c1b      	ldrb	r3, [r3, #16]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d109      	bne.n	800710c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80070fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007102:	2101      	movs	r1, #1
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f001 fcc5 	bl	8008a94 <USBD_LL_PrepareReceive>
 800710a:	e007      	b.n	800711c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007112:	2340      	movs	r3, #64	; 0x40
 8007114:	2101      	movs	r1, #1
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f001 fcbc 	bl	8008a94 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800711c:	2300      	movs	r3, #0
 800711e:	e000      	b.n	8007122 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007120:	2302      	movs	r3, #2
  }
}
 8007122:	4618      	mov	r0, r3
 8007124:	3710      	adds	r7, #16
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}

0800712a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800712a:	b580      	push	{r7, lr}
 800712c:	b084      	sub	sp, #16
 800712e:	af00      	add	r7, sp, #0
 8007130:	60f8      	str	r0, [r7, #12]
 8007132:	60b9      	str	r1, [r7, #8]
 8007134:	4613      	mov	r3, r2
 8007136:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d101      	bne.n	8007142 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800713e:	2302      	movs	r3, #2
 8007140:	e01a      	b.n	8007178 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007148:	2b00      	cmp	r3, #0
 800714a:	d003      	beq.n	8007154 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2200      	movs	r2, #0
 8007150:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d003      	beq.n	8007162 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	68ba      	ldr	r2, [r7, #8]
 800715e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2201      	movs	r2, #1
 8007166:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	79fa      	ldrb	r2, [r7, #7]
 800716e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007170:	68f8      	ldr	r0, [r7, #12]
 8007172:	f001 fb29 	bl	80087c8 <USBD_LL_Init>

  return USBD_OK;
 8007176:	2300      	movs	r3, #0
}
 8007178:	4618      	mov	r0, r3
 800717a:	3710      	adds	r7, #16
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}

08007180 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007180:	b480      	push	{r7}
 8007182:	b085      	sub	sp, #20
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800718a:	2300      	movs	r3, #0
 800718c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d006      	beq.n	80071a2 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	683a      	ldr	r2, [r7, #0]
 8007198:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800719c:	2300      	movs	r3, #0
 800719e:	73fb      	strb	r3, [r7, #15]
 80071a0:	e001      	b.n	80071a6 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80071a2:	2302      	movs	r3, #2
 80071a4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80071a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3714      	adds	r7, #20
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bc80      	pop	{r7}
 80071b0:	4770      	bx	lr

080071b2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80071b2:	b580      	push	{r7, lr}
 80071b4:	b082      	sub	sp, #8
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f001 fb5e 	bl	800887c <USBD_LL_Start>

  return USBD_OK;
 80071c0:	2300      	movs	r3, #0
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3708      	adds	r7, #8
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}

080071ca <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80071ca:	b480      	push	{r7}
 80071cc:	b083      	sub	sp, #12
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80071d2:	2300      	movs	r3, #0
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	370c      	adds	r7, #12
 80071d8:	46bd      	mov	sp, r7
 80071da:	bc80      	pop	{r7}
 80071dc:	4770      	bx	lr

080071de <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80071de:	b580      	push	{r7, lr}
 80071e0:	b084      	sub	sp, #16
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	6078      	str	r0, [r7, #4]
 80071e6:	460b      	mov	r3, r1
 80071e8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80071ea:	2302      	movs	r3, #2
 80071ec:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d00c      	beq.n	8007212 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	78fa      	ldrb	r2, [r7, #3]
 8007202:	4611      	mov	r1, r2
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	4798      	blx	r3
 8007208:	4603      	mov	r3, r0
 800720a:	2b00      	cmp	r3, #0
 800720c:	d101      	bne.n	8007212 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800720e:	2300      	movs	r3, #0
 8007210:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007212:	7bfb      	ldrb	r3, [r7, #15]
}
 8007214:	4618      	mov	r0, r3
 8007216:	3710      	adds	r7, #16
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}

0800721c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b082      	sub	sp, #8
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	460b      	mov	r3, r1
 8007226:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	78fa      	ldrb	r2, [r7, #3]
 8007232:	4611      	mov	r1, r2
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	4798      	blx	r3

  return USBD_OK;
 8007238:	2300      	movs	r3, #0
}
 800723a:	4618      	mov	r0, r3
 800723c:	3708      	adds	r7, #8
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}

08007242 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007242:	b580      	push	{r7, lr}
 8007244:	b082      	sub	sp, #8
 8007246:	af00      	add	r7, sp, #0
 8007248:	6078      	str	r0, [r7, #4]
 800724a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007252:	6839      	ldr	r1, [r7, #0]
 8007254:	4618      	mov	r0, r3
 8007256:	f000 fed8 	bl	800800a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2201      	movs	r2, #1
 800725e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007268:	461a      	mov	r2, r3
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007276:	f003 031f 	and.w	r3, r3, #31
 800727a:	2b02      	cmp	r3, #2
 800727c:	d016      	beq.n	80072ac <USBD_LL_SetupStage+0x6a>
 800727e:	2b02      	cmp	r3, #2
 8007280:	d81c      	bhi.n	80072bc <USBD_LL_SetupStage+0x7a>
 8007282:	2b00      	cmp	r3, #0
 8007284:	d002      	beq.n	800728c <USBD_LL_SetupStage+0x4a>
 8007286:	2b01      	cmp	r3, #1
 8007288:	d008      	beq.n	800729c <USBD_LL_SetupStage+0x5a>
 800728a:	e017      	b.n	80072bc <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007292:	4619      	mov	r1, r3
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f000 f9cb 	bl	8007630 <USBD_StdDevReq>
      break;
 800729a:	e01a      	b.n	80072d2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80072a2:	4619      	mov	r1, r3
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f000 fa2d 	bl	8007704 <USBD_StdItfReq>
      break;
 80072aa:	e012      	b.n	80072d2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80072b2:	4619      	mov	r1, r3
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f000 fa6d 	bl	8007794 <USBD_StdEPReq>
      break;
 80072ba:	e00a      	b.n	80072d2 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80072c2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80072c6:	b2db      	uxtb	r3, r3
 80072c8:	4619      	mov	r1, r3
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f001 fb36 	bl	800893c <USBD_LL_StallEP>
      break;
 80072d0:	bf00      	nop
  }

  return USBD_OK;
 80072d2:	2300      	movs	r3, #0
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3708      	adds	r7, #8
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}

080072dc <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b086      	sub	sp, #24
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	60f8      	str	r0, [r7, #12]
 80072e4:	460b      	mov	r3, r1
 80072e6:	607a      	str	r2, [r7, #4]
 80072e8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80072ea:	7afb      	ldrb	r3, [r7, #11]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d14b      	bne.n	8007388 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80072f6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80072fe:	2b03      	cmp	r3, #3
 8007300:	d134      	bne.n	800736c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	68da      	ldr	r2, [r3, #12]
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	691b      	ldr	r3, [r3, #16]
 800730a:	429a      	cmp	r2, r3
 800730c:	d919      	bls.n	8007342 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	68da      	ldr	r2, [r3, #12]
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	691b      	ldr	r3, [r3, #16]
 8007316:	1ad2      	subs	r2, r2, r3
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	68da      	ldr	r2, [r3, #12]
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007324:	429a      	cmp	r2, r3
 8007326:	d203      	bcs.n	8007330 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800732c:	b29b      	uxth	r3, r3
 800732e:	e002      	b.n	8007336 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007334:	b29b      	uxth	r3, r3
 8007336:	461a      	mov	r2, r3
 8007338:	6879      	ldr	r1, [r7, #4]
 800733a:	68f8      	ldr	r0, [r7, #12]
 800733c:	f000 ff57 	bl	80081ee <USBD_CtlContinueRx>
 8007340:	e038      	b.n	80073b4 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007348:	691b      	ldr	r3, [r3, #16]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d00a      	beq.n	8007364 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007354:	2b03      	cmp	r3, #3
 8007356:	d105      	bne.n	8007364 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800735e:	691b      	ldr	r3, [r3, #16]
 8007360:	68f8      	ldr	r0, [r7, #12]
 8007362:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007364:	68f8      	ldr	r0, [r7, #12]
 8007366:	f000 ff54 	bl	8008212 <USBD_CtlSendStatus>
 800736a:	e023      	b.n	80073b4 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007372:	2b05      	cmp	r3, #5
 8007374:	d11e      	bne.n	80073b4 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2200      	movs	r2, #0
 800737a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800737e:	2100      	movs	r1, #0
 8007380:	68f8      	ldr	r0, [r7, #12]
 8007382:	f001 fadb 	bl	800893c <USBD_LL_StallEP>
 8007386:	e015      	b.n	80073b4 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800738e:	699b      	ldr	r3, [r3, #24]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d00d      	beq.n	80073b0 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800739a:	2b03      	cmp	r3, #3
 800739c:	d108      	bne.n	80073b0 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073a4:	699b      	ldr	r3, [r3, #24]
 80073a6:	7afa      	ldrb	r2, [r7, #11]
 80073a8:	4611      	mov	r1, r2
 80073aa:	68f8      	ldr	r0, [r7, #12]
 80073ac:	4798      	blx	r3
 80073ae:	e001      	b.n	80073b4 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80073b0:	2302      	movs	r3, #2
 80073b2:	e000      	b.n	80073b6 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80073b4:	2300      	movs	r3, #0
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3718      	adds	r7, #24
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}

080073be <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80073be:	b580      	push	{r7, lr}
 80073c0:	b086      	sub	sp, #24
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	60f8      	str	r0, [r7, #12]
 80073c6:	460b      	mov	r3, r1
 80073c8:	607a      	str	r2, [r7, #4]
 80073ca:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80073cc:	7afb      	ldrb	r3, [r7, #11]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d17f      	bne.n	80074d2 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	3314      	adds	r3, #20
 80073d6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80073de:	2b02      	cmp	r3, #2
 80073e0:	d15c      	bne.n	800749c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	68da      	ldr	r2, [r3, #12]
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	691b      	ldr	r3, [r3, #16]
 80073ea:	429a      	cmp	r2, r3
 80073ec:	d915      	bls.n	800741a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	68da      	ldr	r2, [r3, #12]
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	691b      	ldr	r3, [r3, #16]
 80073f6:	1ad2      	subs	r2, r2, r3
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	68db      	ldr	r3, [r3, #12]
 8007400:	b29b      	uxth	r3, r3
 8007402:	461a      	mov	r2, r3
 8007404:	6879      	ldr	r1, [r7, #4]
 8007406:	68f8      	ldr	r0, [r7, #12]
 8007408:	f000 fec1 	bl	800818e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800740c:	2300      	movs	r3, #0
 800740e:	2200      	movs	r2, #0
 8007410:	2100      	movs	r1, #0
 8007412:	68f8      	ldr	r0, [r7, #12]
 8007414:	f001 fb3e 	bl	8008a94 <USBD_LL_PrepareReceive>
 8007418:	e04e      	b.n	80074b8 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	697a      	ldr	r2, [r7, #20]
 8007420:	6912      	ldr	r2, [r2, #16]
 8007422:	fbb3 f1f2 	udiv	r1, r3, r2
 8007426:	fb01 f202 	mul.w	r2, r1, r2
 800742a:	1a9b      	subs	r3, r3, r2
 800742c:	2b00      	cmp	r3, #0
 800742e:	d11c      	bne.n	800746a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	689a      	ldr	r2, [r3, #8]
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007438:	429a      	cmp	r2, r3
 800743a:	d316      	bcc.n	800746a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	689a      	ldr	r2, [r3, #8]
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007446:	429a      	cmp	r2, r3
 8007448:	d20f      	bcs.n	800746a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800744a:	2200      	movs	r2, #0
 800744c:	2100      	movs	r1, #0
 800744e:	68f8      	ldr	r0, [r7, #12]
 8007450:	f000 fe9d 	bl	800818e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	2200      	movs	r2, #0
 8007458:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800745c:	2300      	movs	r3, #0
 800745e:	2200      	movs	r2, #0
 8007460:	2100      	movs	r1, #0
 8007462:	68f8      	ldr	r0, [r7, #12]
 8007464:	f001 fb16 	bl	8008a94 <USBD_LL_PrepareReceive>
 8007468:	e026      	b.n	80074b8 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007470:	68db      	ldr	r3, [r3, #12]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d00a      	beq.n	800748c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800747c:	2b03      	cmp	r3, #3
 800747e:	d105      	bne.n	800748c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007486:	68db      	ldr	r3, [r3, #12]
 8007488:	68f8      	ldr	r0, [r7, #12]
 800748a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800748c:	2180      	movs	r1, #128	; 0x80
 800748e:	68f8      	ldr	r0, [r7, #12]
 8007490:	f001 fa54 	bl	800893c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007494:	68f8      	ldr	r0, [r7, #12]
 8007496:	f000 fecf 	bl	8008238 <USBD_CtlReceiveStatus>
 800749a:	e00d      	b.n	80074b8 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80074a2:	2b04      	cmp	r3, #4
 80074a4:	d004      	beq.n	80074b0 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d103      	bne.n	80074b8 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80074b0:	2180      	movs	r1, #128	; 0x80
 80074b2:	68f8      	ldr	r0, [r7, #12]
 80074b4:	f001 fa42 	bl	800893c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80074be:	2b01      	cmp	r3, #1
 80074c0:	d11d      	bne.n	80074fe <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80074c2:	68f8      	ldr	r0, [r7, #12]
 80074c4:	f7ff fe81 	bl	80071ca <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2200      	movs	r2, #0
 80074cc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80074d0:	e015      	b.n	80074fe <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074d8:	695b      	ldr	r3, [r3, #20]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d00d      	beq.n	80074fa <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80074e4:	2b03      	cmp	r3, #3
 80074e6:	d108      	bne.n	80074fa <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074ee:	695b      	ldr	r3, [r3, #20]
 80074f0:	7afa      	ldrb	r2, [r7, #11]
 80074f2:	4611      	mov	r1, r2
 80074f4:	68f8      	ldr	r0, [r7, #12]
 80074f6:	4798      	blx	r3
 80074f8:	e001      	b.n	80074fe <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80074fa:	2302      	movs	r3, #2
 80074fc:	e000      	b.n	8007500 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80074fe:	2300      	movs	r3, #0
}
 8007500:	4618      	mov	r0, r3
 8007502:	3718      	adds	r7, #24
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}

08007508 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b082      	sub	sp, #8
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007510:	2340      	movs	r3, #64	; 0x40
 8007512:	2200      	movs	r2, #0
 8007514:	2100      	movs	r1, #0
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f001 f9cb 	bl	80088b2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2201      	movs	r2, #1
 8007520:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2240      	movs	r2, #64	; 0x40
 8007528:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800752c:	2340      	movs	r3, #64	; 0x40
 800752e:	2200      	movs	r2, #0
 8007530:	2180      	movs	r1, #128	; 0x80
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f001 f9bd 	bl	80088b2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2201      	movs	r2, #1
 800753c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2240      	movs	r2, #64	; 0x40
 8007542:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2201      	movs	r2, #1
 8007548:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2200      	movs	r2, #0
 8007550:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2200      	movs	r2, #0
 8007558:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2200      	movs	r2, #0
 800755e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007568:	2b00      	cmp	r3, #0
 800756a:	d009      	beq.n	8007580 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	687a      	ldr	r2, [r7, #4]
 8007576:	6852      	ldr	r2, [r2, #4]
 8007578:	b2d2      	uxtb	r2, r2
 800757a:	4611      	mov	r1, r2
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	4798      	blx	r3
  }

  return USBD_OK;
 8007580:	2300      	movs	r3, #0
}
 8007582:	4618      	mov	r0, r3
 8007584:	3708      	adds	r7, #8
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}

0800758a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800758a:	b480      	push	{r7}
 800758c:	b083      	sub	sp, #12
 800758e:	af00      	add	r7, sp, #0
 8007590:	6078      	str	r0, [r7, #4]
 8007592:	460b      	mov	r3, r1
 8007594:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	78fa      	ldrb	r2, [r7, #3]
 800759a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800759c:	2300      	movs	r3, #0
}
 800759e:	4618      	mov	r0, r3
 80075a0:	370c      	adds	r7, #12
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bc80      	pop	{r7}
 80075a6:	4770      	bx	lr

080075a8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b083      	sub	sp, #12
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2204      	movs	r2, #4
 80075c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80075c4:	2300      	movs	r3, #0
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	370c      	adds	r7, #12
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bc80      	pop	{r7}
 80075ce:	4770      	bx	lr

080075d0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b083      	sub	sp, #12
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075de:	2b04      	cmp	r3, #4
 80075e0:	d105      	bne.n	80075ee <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80075ee:	2300      	movs	r3, #0
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	370c      	adds	r7, #12
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bc80      	pop	{r7}
 80075f8:	4770      	bx	lr

080075fa <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80075fa:	b580      	push	{r7, lr}
 80075fc:	b082      	sub	sp, #8
 80075fe:	af00      	add	r7, sp, #0
 8007600:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007608:	2b03      	cmp	r3, #3
 800760a:	d10b      	bne.n	8007624 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007612:	69db      	ldr	r3, [r3, #28]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d005      	beq.n	8007624 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800761e:	69db      	ldr	r3, [r3, #28]
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007624:	2300      	movs	r3, #0
}
 8007626:	4618      	mov	r0, r3
 8007628:	3708      	adds	r7, #8
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}
	...

08007630 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b084      	sub	sp, #16
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
 8007638:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800763a:	2300      	movs	r3, #0
 800763c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	781b      	ldrb	r3, [r3, #0]
 8007642:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007646:	2b40      	cmp	r3, #64	; 0x40
 8007648:	d005      	beq.n	8007656 <USBD_StdDevReq+0x26>
 800764a:	2b40      	cmp	r3, #64	; 0x40
 800764c:	d84f      	bhi.n	80076ee <USBD_StdDevReq+0xbe>
 800764e:	2b00      	cmp	r3, #0
 8007650:	d009      	beq.n	8007666 <USBD_StdDevReq+0x36>
 8007652:	2b20      	cmp	r3, #32
 8007654:	d14b      	bne.n	80076ee <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800765c:	689b      	ldr	r3, [r3, #8]
 800765e:	6839      	ldr	r1, [r7, #0]
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	4798      	blx	r3
      break;
 8007664:	e048      	b.n	80076f8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	785b      	ldrb	r3, [r3, #1]
 800766a:	2b09      	cmp	r3, #9
 800766c:	d839      	bhi.n	80076e2 <USBD_StdDevReq+0xb2>
 800766e:	a201      	add	r2, pc, #4	; (adr r2, 8007674 <USBD_StdDevReq+0x44>)
 8007670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007674:	080076c5 	.word	0x080076c5
 8007678:	080076d9 	.word	0x080076d9
 800767c:	080076e3 	.word	0x080076e3
 8007680:	080076cf 	.word	0x080076cf
 8007684:	080076e3 	.word	0x080076e3
 8007688:	080076a7 	.word	0x080076a7
 800768c:	0800769d 	.word	0x0800769d
 8007690:	080076e3 	.word	0x080076e3
 8007694:	080076bb 	.word	0x080076bb
 8007698:	080076b1 	.word	0x080076b1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800769c:	6839      	ldr	r1, [r7, #0]
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f000 f9dc 	bl	8007a5c <USBD_GetDescriptor>
          break;
 80076a4:	e022      	b.n	80076ec <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80076a6:	6839      	ldr	r1, [r7, #0]
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f000 fb3f 	bl	8007d2c <USBD_SetAddress>
          break;
 80076ae:	e01d      	b.n	80076ec <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80076b0:	6839      	ldr	r1, [r7, #0]
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f000 fb7e 	bl	8007db4 <USBD_SetConfig>
          break;
 80076b8:	e018      	b.n	80076ec <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80076ba:	6839      	ldr	r1, [r7, #0]
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f000 fc07 	bl	8007ed0 <USBD_GetConfig>
          break;
 80076c2:	e013      	b.n	80076ec <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80076c4:	6839      	ldr	r1, [r7, #0]
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f000 fc37 	bl	8007f3a <USBD_GetStatus>
          break;
 80076cc:	e00e      	b.n	80076ec <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80076ce:	6839      	ldr	r1, [r7, #0]
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f000 fc65 	bl	8007fa0 <USBD_SetFeature>
          break;
 80076d6:	e009      	b.n	80076ec <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80076d8:	6839      	ldr	r1, [r7, #0]
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f000 fc74 	bl	8007fc8 <USBD_ClrFeature>
          break;
 80076e0:	e004      	b.n	80076ec <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80076e2:	6839      	ldr	r1, [r7, #0]
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f000 fccc 	bl	8008082 <USBD_CtlError>
          break;
 80076ea:	bf00      	nop
      }
      break;
 80076ec:	e004      	b.n	80076f8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80076ee:	6839      	ldr	r1, [r7, #0]
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f000 fcc6 	bl	8008082 <USBD_CtlError>
      break;
 80076f6:	bf00      	nop
  }

  return ret;
 80076f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3710      	adds	r7, #16
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}
 8007702:	bf00      	nop

08007704 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b084      	sub	sp, #16
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800770e:	2300      	movs	r3, #0
 8007710:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800771a:	2b40      	cmp	r3, #64	; 0x40
 800771c:	d005      	beq.n	800772a <USBD_StdItfReq+0x26>
 800771e:	2b40      	cmp	r3, #64	; 0x40
 8007720:	d82e      	bhi.n	8007780 <USBD_StdItfReq+0x7c>
 8007722:	2b00      	cmp	r3, #0
 8007724:	d001      	beq.n	800772a <USBD_StdItfReq+0x26>
 8007726:	2b20      	cmp	r3, #32
 8007728:	d12a      	bne.n	8007780 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007730:	3b01      	subs	r3, #1
 8007732:	2b02      	cmp	r3, #2
 8007734:	d81d      	bhi.n	8007772 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	889b      	ldrh	r3, [r3, #4]
 800773a:	b2db      	uxtb	r3, r3
 800773c:	2b01      	cmp	r3, #1
 800773e:	d813      	bhi.n	8007768 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	6839      	ldr	r1, [r7, #0]
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	4798      	blx	r3
 800774e:	4603      	mov	r3, r0
 8007750:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	88db      	ldrh	r3, [r3, #6]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d110      	bne.n	800777c <USBD_StdItfReq+0x78>
 800775a:	7bfb      	ldrb	r3, [r7, #15]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d10d      	bne.n	800777c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f000 fd56 	bl	8008212 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007766:	e009      	b.n	800777c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007768:	6839      	ldr	r1, [r7, #0]
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f000 fc89 	bl	8008082 <USBD_CtlError>
          break;
 8007770:	e004      	b.n	800777c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007772:	6839      	ldr	r1, [r7, #0]
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f000 fc84 	bl	8008082 <USBD_CtlError>
          break;
 800777a:	e000      	b.n	800777e <USBD_StdItfReq+0x7a>
          break;
 800777c:	bf00      	nop
      }
      break;
 800777e:	e004      	b.n	800778a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007780:	6839      	ldr	r1, [r7, #0]
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 fc7d 	bl	8008082 <USBD_CtlError>
      break;
 8007788:	bf00      	nop
  }

  return USBD_OK;
 800778a:	2300      	movs	r3, #0
}
 800778c:	4618      	mov	r0, r3
 800778e:	3710      	adds	r7, #16
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b084      	sub	sp, #16
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800779e:	2300      	movs	r3, #0
 80077a0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	889b      	ldrh	r3, [r3, #4]
 80077a6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	781b      	ldrb	r3, [r3, #0]
 80077ac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077b0:	2b40      	cmp	r3, #64	; 0x40
 80077b2:	d007      	beq.n	80077c4 <USBD_StdEPReq+0x30>
 80077b4:	2b40      	cmp	r3, #64	; 0x40
 80077b6:	f200 8146 	bhi.w	8007a46 <USBD_StdEPReq+0x2b2>
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d00a      	beq.n	80077d4 <USBD_StdEPReq+0x40>
 80077be:	2b20      	cmp	r3, #32
 80077c0:	f040 8141 	bne.w	8007a46 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077ca:	689b      	ldr	r3, [r3, #8]
 80077cc:	6839      	ldr	r1, [r7, #0]
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	4798      	blx	r3
      break;
 80077d2:	e13d      	b.n	8007a50 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	781b      	ldrb	r3, [r3, #0]
 80077d8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077dc:	2b20      	cmp	r3, #32
 80077de:	d10a      	bne.n	80077f6 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077e6:	689b      	ldr	r3, [r3, #8]
 80077e8:	6839      	ldr	r1, [r7, #0]
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	4798      	blx	r3
 80077ee:	4603      	mov	r3, r0
 80077f0:	73fb      	strb	r3, [r7, #15]

        return ret;
 80077f2:	7bfb      	ldrb	r3, [r7, #15]
 80077f4:	e12d      	b.n	8007a52 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	785b      	ldrb	r3, [r3, #1]
 80077fa:	2b03      	cmp	r3, #3
 80077fc:	d007      	beq.n	800780e <USBD_StdEPReq+0x7a>
 80077fe:	2b03      	cmp	r3, #3
 8007800:	f300 811b 	bgt.w	8007a3a <USBD_StdEPReq+0x2a6>
 8007804:	2b00      	cmp	r3, #0
 8007806:	d072      	beq.n	80078ee <USBD_StdEPReq+0x15a>
 8007808:	2b01      	cmp	r3, #1
 800780a:	d03a      	beq.n	8007882 <USBD_StdEPReq+0xee>
 800780c:	e115      	b.n	8007a3a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007814:	2b02      	cmp	r3, #2
 8007816:	d002      	beq.n	800781e <USBD_StdEPReq+0x8a>
 8007818:	2b03      	cmp	r3, #3
 800781a:	d015      	beq.n	8007848 <USBD_StdEPReq+0xb4>
 800781c:	e02b      	b.n	8007876 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800781e:	7bbb      	ldrb	r3, [r7, #14]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d00c      	beq.n	800783e <USBD_StdEPReq+0xaa>
 8007824:	7bbb      	ldrb	r3, [r7, #14]
 8007826:	2b80      	cmp	r3, #128	; 0x80
 8007828:	d009      	beq.n	800783e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800782a:	7bbb      	ldrb	r3, [r7, #14]
 800782c:	4619      	mov	r1, r3
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f001 f884 	bl	800893c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007834:	2180      	movs	r1, #128	; 0x80
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f001 f880 	bl	800893c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800783c:	e020      	b.n	8007880 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800783e:	6839      	ldr	r1, [r7, #0]
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f000 fc1e 	bl	8008082 <USBD_CtlError>
              break;
 8007846:	e01b      	b.n	8007880 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	885b      	ldrh	r3, [r3, #2]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d10e      	bne.n	800786e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007850:	7bbb      	ldrb	r3, [r7, #14]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d00b      	beq.n	800786e <USBD_StdEPReq+0xda>
 8007856:	7bbb      	ldrb	r3, [r7, #14]
 8007858:	2b80      	cmp	r3, #128	; 0x80
 800785a:	d008      	beq.n	800786e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	88db      	ldrh	r3, [r3, #6]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d104      	bne.n	800786e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007864:	7bbb      	ldrb	r3, [r7, #14]
 8007866:	4619      	mov	r1, r3
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f001 f867 	bl	800893c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 fccf 	bl	8008212 <USBD_CtlSendStatus>

              break;
 8007874:	e004      	b.n	8007880 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007876:	6839      	ldr	r1, [r7, #0]
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f000 fc02 	bl	8008082 <USBD_CtlError>
              break;
 800787e:	bf00      	nop
          }
          break;
 8007880:	e0e0      	b.n	8007a44 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007888:	2b02      	cmp	r3, #2
 800788a:	d002      	beq.n	8007892 <USBD_StdEPReq+0xfe>
 800788c:	2b03      	cmp	r3, #3
 800788e:	d015      	beq.n	80078bc <USBD_StdEPReq+0x128>
 8007890:	e026      	b.n	80078e0 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007892:	7bbb      	ldrb	r3, [r7, #14]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d00c      	beq.n	80078b2 <USBD_StdEPReq+0x11e>
 8007898:	7bbb      	ldrb	r3, [r7, #14]
 800789a:	2b80      	cmp	r3, #128	; 0x80
 800789c:	d009      	beq.n	80078b2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800789e:	7bbb      	ldrb	r3, [r7, #14]
 80078a0:	4619      	mov	r1, r3
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f001 f84a 	bl	800893c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80078a8:	2180      	movs	r1, #128	; 0x80
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f001 f846 	bl	800893c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80078b0:	e01c      	b.n	80078ec <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80078b2:	6839      	ldr	r1, [r7, #0]
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f000 fbe4 	bl	8008082 <USBD_CtlError>
              break;
 80078ba:	e017      	b.n	80078ec <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	885b      	ldrh	r3, [r3, #2]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d112      	bne.n	80078ea <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80078c4:	7bbb      	ldrb	r3, [r7, #14]
 80078c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d004      	beq.n	80078d8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80078ce:	7bbb      	ldrb	r3, [r7, #14]
 80078d0:	4619      	mov	r1, r3
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f001 f851 	bl	800897a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f000 fc9a 	bl	8008212 <USBD_CtlSendStatus>
              }
              break;
 80078de:	e004      	b.n	80078ea <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80078e0:	6839      	ldr	r1, [r7, #0]
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f000 fbcd 	bl	8008082 <USBD_CtlError>
              break;
 80078e8:	e000      	b.n	80078ec <USBD_StdEPReq+0x158>
              break;
 80078ea:	bf00      	nop
          }
          break;
 80078ec:	e0aa      	b.n	8007a44 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078f4:	2b02      	cmp	r3, #2
 80078f6:	d002      	beq.n	80078fe <USBD_StdEPReq+0x16a>
 80078f8:	2b03      	cmp	r3, #3
 80078fa:	d032      	beq.n	8007962 <USBD_StdEPReq+0x1ce>
 80078fc:	e097      	b.n	8007a2e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80078fe:	7bbb      	ldrb	r3, [r7, #14]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d007      	beq.n	8007914 <USBD_StdEPReq+0x180>
 8007904:	7bbb      	ldrb	r3, [r7, #14]
 8007906:	2b80      	cmp	r3, #128	; 0x80
 8007908:	d004      	beq.n	8007914 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800790a:	6839      	ldr	r1, [r7, #0]
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f000 fbb8 	bl	8008082 <USBD_CtlError>
                break;
 8007912:	e091      	b.n	8007a38 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007914:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007918:	2b00      	cmp	r3, #0
 800791a:	da0b      	bge.n	8007934 <USBD_StdEPReq+0x1a0>
 800791c:	7bbb      	ldrb	r3, [r7, #14]
 800791e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007922:	4613      	mov	r3, r2
 8007924:	009b      	lsls	r3, r3, #2
 8007926:	4413      	add	r3, r2
 8007928:	009b      	lsls	r3, r3, #2
 800792a:	3310      	adds	r3, #16
 800792c:	687a      	ldr	r2, [r7, #4]
 800792e:	4413      	add	r3, r2
 8007930:	3304      	adds	r3, #4
 8007932:	e00b      	b.n	800794c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007934:	7bbb      	ldrb	r3, [r7, #14]
 8007936:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800793a:	4613      	mov	r3, r2
 800793c:	009b      	lsls	r3, r3, #2
 800793e:	4413      	add	r3, r2
 8007940:	009b      	lsls	r3, r3, #2
 8007942:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007946:	687a      	ldr	r2, [r7, #4]
 8007948:	4413      	add	r3, r2
 800794a:	3304      	adds	r3, #4
 800794c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	2200      	movs	r2, #0
 8007952:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	2202      	movs	r2, #2
 8007958:	4619      	mov	r1, r3
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f000 fbfb 	bl	8008156 <USBD_CtlSendData>
              break;
 8007960:	e06a      	b.n	8007a38 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007962:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007966:	2b00      	cmp	r3, #0
 8007968:	da11      	bge.n	800798e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800796a:	7bbb      	ldrb	r3, [r7, #14]
 800796c:	f003 020f 	and.w	r2, r3, #15
 8007970:	6879      	ldr	r1, [r7, #4]
 8007972:	4613      	mov	r3, r2
 8007974:	009b      	lsls	r3, r3, #2
 8007976:	4413      	add	r3, r2
 8007978:	009b      	lsls	r3, r3, #2
 800797a:	440b      	add	r3, r1
 800797c:	3318      	adds	r3, #24
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d117      	bne.n	80079b4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007984:	6839      	ldr	r1, [r7, #0]
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f000 fb7b 	bl	8008082 <USBD_CtlError>
                  break;
 800798c:	e054      	b.n	8007a38 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800798e:	7bbb      	ldrb	r3, [r7, #14]
 8007990:	f003 020f 	and.w	r2, r3, #15
 8007994:	6879      	ldr	r1, [r7, #4]
 8007996:	4613      	mov	r3, r2
 8007998:	009b      	lsls	r3, r3, #2
 800799a:	4413      	add	r3, r2
 800799c:	009b      	lsls	r3, r3, #2
 800799e:	440b      	add	r3, r1
 80079a0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d104      	bne.n	80079b4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80079aa:	6839      	ldr	r1, [r7, #0]
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f000 fb68 	bl	8008082 <USBD_CtlError>
                  break;
 80079b2:	e041      	b.n	8007a38 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	da0b      	bge.n	80079d4 <USBD_StdEPReq+0x240>
 80079bc:	7bbb      	ldrb	r3, [r7, #14]
 80079be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80079c2:	4613      	mov	r3, r2
 80079c4:	009b      	lsls	r3, r3, #2
 80079c6:	4413      	add	r3, r2
 80079c8:	009b      	lsls	r3, r3, #2
 80079ca:	3310      	adds	r3, #16
 80079cc:	687a      	ldr	r2, [r7, #4]
 80079ce:	4413      	add	r3, r2
 80079d0:	3304      	adds	r3, #4
 80079d2:	e00b      	b.n	80079ec <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80079d4:	7bbb      	ldrb	r3, [r7, #14]
 80079d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079da:	4613      	mov	r3, r2
 80079dc:	009b      	lsls	r3, r3, #2
 80079de:	4413      	add	r3, r2
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80079e6:	687a      	ldr	r2, [r7, #4]
 80079e8:	4413      	add	r3, r2
 80079ea:	3304      	adds	r3, #4
 80079ec:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80079ee:	7bbb      	ldrb	r3, [r7, #14]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d002      	beq.n	80079fa <USBD_StdEPReq+0x266>
 80079f4:	7bbb      	ldrb	r3, [r7, #14]
 80079f6:	2b80      	cmp	r3, #128	; 0x80
 80079f8:	d103      	bne.n	8007a02 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	2200      	movs	r2, #0
 80079fe:	601a      	str	r2, [r3, #0]
 8007a00:	e00e      	b.n	8007a20 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007a02:	7bbb      	ldrb	r3, [r7, #14]
 8007a04:	4619      	mov	r1, r3
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f000 ffd6 	bl	80089b8 <USBD_LL_IsStallEP>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d003      	beq.n	8007a1a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	2201      	movs	r2, #1
 8007a16:	601a      	str	r2, [r3, #0]
 8007a18:	e002      	b.n	8007a20 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	2202      	movs	r2, #2
 8007a24:	4619      	mov	r1, r3
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 fb95 	bl	8008156 <USBD_CtlSendData>
              break;
 8007a2c:	e004      	b.n	8007a38 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007a2e:	6839      	ldr	r1, [r7, #0]
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f000 fb26 	bl	8008082 <USBD_CtlError>
              break;
 8007a36:	bf00      	nop
          }
          break;
 8007a38:	e004      	b.n	8007a44 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007a3a:	6839      	ldr	r1, [r7, #0]
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f000 fb20 	bl	8008082 <USBD_CtlError>
          break;
 8007a42:	bf00      	nop
      }
      break;
 8007a44:	e004      	b.n	8007a50 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007a46:	6839      	ldr	r1, [r7, #0]
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f000 fb1a 	bl	8008082 <USBD_CtlError>
      break;
 8007a4e:	bf00      	nop
  }

  return ret;
 8007a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3710      	adds	r7, #16
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}
	...

08007a5c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b084      	sub	sp, #16
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007a66:	2300      	movs	r3, #0
 8007a68:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	885b      	ldrh	r3, [r3, #2]
 8007a76:	0a1b      	lsrs	r3, r3, #8
 8007a78:	b29b      	uxth	r3, r3
 8007a7a:	3b01      	subs	r3, #1
 8007a7c:	2b06      	cmp	r3, #6
 8007a7e:	f200 8128 	bhi.w	8007cd2 <USBD_GetDescriptor+0x276>
 8007a82:	a201      	add	r2, pc, #4	; (adr r2, 8007a88 <USBD_GetDescriptor+0x2c>)
 8007a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a88:	08007aa5 	.word	0x08007aa5
 8007a8c:	08007abd 	.word	0x08007abd
 8007a90:	08007afd 	.word	0x08007afd
 8007a94:	08007cd3 	.word	0x08007cd3
 8007a98:	08007cd3 	.word	0x08007cd3
 8007a9c:	08007c73 	.word	0x08007c73
 8007aa0:	08007c9f 	.word	0x08007c9f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	687a      	ldr	r2, [r7, #4]
 8007aae:	7c12      	ldrb	r2, [r2, #16]
 8007ab0:	f107 0108 	add.w	r1, r7, #8
 8007ab4:	4610      	mov	r0, r2
 8007ab6:	4798      	blx	r3
 8007ab8:	60f8      	str	r0, [r7, #12]
      break;
 8007aba:	e112      	b.n	8007ce2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	7c1b      	ldrb	r3, [r3, #16]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d10d      	bne.n	8007ae0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007acc:	f107 0208 	add.w	r2, r7, #8
 8007ad0:	4610      	mov	r0, r2
 8007ad2:	4798      	blx	r3
 8007ad4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	3301      	adds	r3, #1
 8007ada:	2202      	movs	r2, #2
 8007adc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007ade:	e100      	b.n	8007ce2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ae8:	f107 0208 	add.w	r2, r7, #8
 8007aec:	4610      	mov	r0, r2
 8007aee:	4798      	blx	r3
 8007af0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	3301      	adds	r3, #1
 8007af6:	2202      	movs	r2, #2
 8007af8:	701a      	strb	r2, [r3, #0]
      break;
 8007afa:	e0f2      	b.n	8007ce2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	885b      	ldrh	r3, [r3, #2]
 8007b00:	b2db      	uxtb	r3, r3
 8007b02:	2b05      	cmp	r3, #5
 8007b04:	f200 80ac 	bhi.w	8007c60 <USBD_GetDescriptor+0x204>
 8007b08:	a201      	add	r2, pc, #4	; (adr r2, 8007b10 <USBD_GetDescriptor+0xb4>)
 8007b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b0e:	bf00      	nop
 8007b10:	08007b29 	.word	0x08007b29
 8007b14:	08007b5d 	.word	0x08007b5d
 8007b18:	08007b91 	.word	0x08007b91
 8007b1c:	08007bc5 	.word	0x08007bc5
 8007b20:	08007bf9 	.word	0x08007bf9
 8007b24:	08007c2d 	.word	0x08007c2d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d00b      	beq.n	8007b4c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b3a:	685b      	ldr	r3, [r3, #4]
 8007b3c:	687a      	ldr	r2, [r7, #4]
 8007b3e:	7c12      	ldrb	r2, [r2, #16]
 8007b40:	f107 0108 	add.w	r1, r7, #8
 8007b44:	4610      	mov	r0, r2
 8007b46:	4798      	blx	r3
 8007b48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b4a:	e091      	b.n	8007c70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b4c:	6839      	ldr	r1, [r7, #0]
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f000 fa97 	bl	8008082 <USBD_CtlError>
            err++;
 8007b54:	7afb      	ldrb	r3, [r7, #11]
 8007b56:	3301      	adds	r3, #1
 8007b58:	72fb      	strb	r3, [r7, #11]
          break;
 8007b5a:	e089      	b.n	8007c70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b62:	689b      	ldr	r3, [r3, #8]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d00b      	beq.n	8007b80 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b6e:	689b      	ldr	r3, [r3, #8]
 8007b70:	687a      	ldr	r2, [r7, #4]
 8007b72:	7c12      	ldrb	r2, [r2, #16]
 8007b74:	f107 0108 	add.w	r1, r7, #8
 8007b78:	4610      	mov	r0, r2
 8007b7a:	4798      	blx	r3
 8007b7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b7e:	e077      	b.n	8007c70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b80:	6839      	ldr	r1, [r7, #0]
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 fa7d 	bl	8008082 <USBD_CtlError>
            err++;
 8007b88:	7afb      	ldrb	r3, [r7, #11]
 8007b8a:	3301      	adds	r3, #1
 8007b8c:	72fb      	strb	r3, [r7, #11]
          break;
 8007b8e:	e06f      	b.n	8007c70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b96:	68db      	ldr	r3, [r3, #12]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d00b      	beq.n	8007bb4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007ba2:	68db      	ldr	r3, [r3, #12]
 8007ba4:	687a      	ldr	r2, [r7, #4]
 8007ba6:	7c12      	ldrb	r2, [r2, #16]
 8007ba8:	f107 0108 	add.w	r1, r7, #8
 8007bac:	4610      	mov	r0, r2
 8007bae:	4798      	blx	r3
 8007bb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bb2:	e05d      	b.n	8007c70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007bb4:	6839      	ldr	r1, [r7, #0]
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 fa63 	bl	8008082 <USBD_CtlError>
            err++;
 8007bbc:	7afb      	ldrb	r3, [r7, #11]
 8007bbe:	3301      	adds	r3, #1
 8007bc0:	72fb      	strb	r3, [r7, #11]
          break;
 8007bc2:	e055      	b.n	8007c70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007bca:	691b      	ldr	r3, [r3, #16]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d00b      	beq.n	8007be8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007bd6:	691b      	ldr	r3, [r3, #16]
 8007bd8:	687a      	ldr	r2, [r7, #4]
 8007bda:	7c12      	ldrb	r2, [r2, #16]
 8007bdc:	f107 0108 	add.w	r1, r7, #8
 8007be0:	4610      	mov	r0, r2
 8007be2:	4798      	blx	r3
 8007be4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007be6:	e043      	b.n	8007c70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007be8:	6839      	ldr	r1, [r7, #0]
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f000 fa49 	bl	8008082 <USBD_CtlError>
            err++;
 8007bf0:	7afb      	ldrb	r3, [r7, #11]
 8007bf2:	3301      	adds	r3, #1
 8007bf4:	72fb      	strb	r3, [r7, #11]
          break;
 8007bf6:	e03b      	b.n	8007c70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007bfe:	695b      	ldr	r3, [r3, #20]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d00b      	beq.n	8007c1c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c0a:	695b      	ldr	r3, [r3, #20]
 8007c0c:	687a      	ldr	r2, [r7, #4]
 8007c0e:	7c12      	ldrb	r2, [r2, #16]
 8007c10:	f107 0108 	add.w	r1, r7, #8
 8007c14:	4610      	mov	r0, r2
 8007c16:	4798      	blx	r3
 8007c18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c1a:	e029      	b.n	8007c70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c1c:	6839      	ldr	r1, [r7, #0]
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 fa2f 	bl	8008082 <USBD_CtlError>
            err++;
 8007c24:	7afb      	ldrb	r3, [r7, #11]
 8007c26:	3301      	adds	r3, #1
 8007c28:	72fb      	strb	r3, [r7, #11]
          break;
 8007c2a:	e021      	b.n	8007c70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c32:	699b      	ldr	r3, [r3, #24]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d00b      	beq.n	8007c50 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c3e:	699b      	ldr	r3, [r3, #24]
 8007c40:	687a      	ldr	r2, [r7, #4]
 8007c42:	7c12      	ldrb	r2, [r2, #16]
 8007c44:	f107 0108 	add.w	r1, r7, #8
 8007c48:	4610      	mov	r0, r2
 8007c4a:	4798      	blx	r3
 8007c4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c4e:	e00f      	b.n	8007c70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c50:	6839      	ldr	r1, [r7, #0]
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f000 fa15 	bl	8008082 <USBD_CtlError>
            err++;
 8007c58:	7afb      	ldrb	r3, [r7, #11]
 8007c5a:	3301      	adds	r3, #1
 8007c5c:	72fb      	strb	r3, [r7, #11]
          break;
 8007c5e:	e007      	b.n	8007c70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007c60:	6839      	ldr	r1, [r7, #0]
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 fa0d 	bl	8008082 <USBD_CtlError>
          err++;
 8007c68:	7afb      	ldrb	r3, [r7, #11]
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007c6e:	e038      	b.n	8007ce2 <USBD_GetDescriptor+0x286>
 8007c70:	e037      	b.n	8007ce2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	7c1b      	ldrb	r3, [r3, #16]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d109      	bne.n	8007c8e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c82:	f107 0208 	add.w	r2, r7, #8
 8007c86:	4610      	mov	r0, r2
 8007c88:	4798      	blx	r3
 8007c8a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c8c:	e029      	b.n	8007ce2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007c8e:	6839      	ldr	r1, [r7, #0]
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f000 f9f6 	bl	8008082 <USBD_CtlError>
        err++;
 8007c96:	7afb      	ldrb	r3, [r7, #11]
 8007c98:	3301      	adds	r3, #1
 8007c9a:	72fb      	strb	r3, [r7, #11]
      break;
 8007c9c:	e021      	b.n	8007ce2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	7c1b      	ldrb	r3, [r3, #16]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d10d      	bne.n	8007cc2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cae:	f107 0208 	add.w	r2, r7, #8
 8007cb2:	4610      	mov	r0, r2
 8007cb4:	4798      	blx	r3
 8007cb6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	3301      	adds	r3, #1
 8007cbc:	2207      	movs	r2, #7
 8007cbe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007cc0:	e00f      	b.n	8007ce2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007cc2:	6839      	ldr	r1, [r7, #0]
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f000 f9dc 	bl	8008082 <USBD_CtlError>
        err++;
 8007cca:	7afb      	ldrb	r3, [r7, #11]
 8007ccc:	3301      	adds	r3, #1
 8007cce:	72fb      	strb	r3, [r7, #11]
      break;
 8007cd0:	e007      	b.n	8007ce2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007cd2:	6839      	ldr	r1, [r7, #0]
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f000 f9d4 	bl	8008082 <USBD_CtlError>
      err++;
 8007cda:	7afb      	ldrb	r3, [r7, #11]
 8007cdc:	3301      	adds	r3, #1
 8007cde:	72fb      	strb	r3, [r7, #11]
      break;
 8007ce0:	bf00      	nop
  }

  if (err != 0U)
 8007ce2:	7afb      	ldrb	r3, [r7, #11]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d11c      	bne.n	8007d22 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007ce8:	893b      	ldrh	r3, [r7, #8]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d011      	beq.n	8007d12 <USBD_GetDescriptor+0x2b6>
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	88db      	ldrh	r3, [r3, #6]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d00d      	beq.n	8007d12 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	88da      	ldrh	r2, [r3, #6]
 8007cfa:	893b      	ldrh	r3, [r7, #8]
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	bf28      	it	cs
 8007d00:	4613      	movcs	r3, r2
 8007d02:	b29b      	uxth	r3, r3
 8007d04:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007d06:	893b      	ldrh	r3, [r7, #8]
 8007d08:	461a      	mov	r2, r3
 8007d0a:	68f9      	ldr	r1, [r7, #12]
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f000 fa22 	bl	8008156 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	88db      	ldrh	r3, [r3, #6]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d104      	bne.n	8007d24 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 fa79 	bl	8008212 <USBD_CtlSendStatus>
 8007d20:	e000      	b.n	8007d24 <USBD_GetDescriptor+0x2c8>
    return;
 8007d22:	bf00      	nop
    }
  }
}
 8007d24:	3710      	adds	r7, #16
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}
 8007d2a:	bf00      	nop

08007d2c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b084      	sub	sp, #16
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
 8007d34:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	889b      	ldrh	r3, [r3, #4]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d130      	bne.n	8007da0 <USBD_SetAddress+0x74>
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	88db      	ldrh	r3, [r3, #6]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d12c      	bne.n	8007da0 <USBD_SetAddress+0x74>
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	885b      	ldrh	r3, [r3, #2]
 8007d4a:	2b7f      	cmp	r3, #127	; 0x7f
 8007d4c:	d828      	bhi.n	8007da0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	885b      	ldrh	r3, [r3, #2]
 8007d52:	b2db      	uxtb	r3, r3
 8007d54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d58:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d60:	2b03      	cmp	r3, #3
 8007d62:	d104      	bne.n	8007d6e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007d64:	6839      	ldr	r1, [r7, #0]
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f000 f98b 	bl	8008082 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d6c:	e01d      	b.n	8007daa <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	7bfa      	ldrb	r2, [r7, #15]
 8007d72:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007d76:	7bfb      	ldrb	r3, [r7, #15]
 8007d78:	4619      	mov	r1, r3
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f000 fe48 	bl	8008a10 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f000 fa46 	bl	8008212 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007d86:	7bfb      	ldrb	r3, [r7, #15]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d004      	beq.n	8007d96 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2202      	movs	r2, #2
 8007d90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d94:	e009      	b.n	8007daa <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2201      	movs	r2, #1
 8007d9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d9e:	e004      	b.n	8007daa <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007da0:	6839      	ldr	r1, [r7, #0]
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 f96d 	bl	8008082 <USBD_CtlError>
  }
}
 8007da8:	bf00      	nop
 8007daa:	bf00      	nop
 8007dac:	3710      	adds	r7, #16
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}
	...

08007db4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b082      	sub	sp, #8
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
 8007dbc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	885b      	ldrh	r3, [r3, #2]
 8007dc2:	b2da      	uxtb	r2, r3
 8007dc4:	4b41      	ldr	r3, [pc, #260]	; (8007ecc <USBD_SetConfig+0x118>)
 8007dc6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007dc8:	4b40      	ldr	r3, [pc, #256]	; (8007ecc <USBD_SetConfig+0x118>)
 8007dca:	781b      	ldrb	r3, [r3, #0]
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d904      	bls.n	8007dda <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007dd0:	6839      	ldr	r1, [r7, #0]
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 f955 	bl	8008082 <USBD_CtlError>
 8007dd8:	e075      	b.n	8007ec6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007de0:	2b02      	cmp	r3, #2
 8007de2:	d002      	beq.n	8007dea <USBD_SetConfig+0x36>
 8007de4:	2b03      	cmp	r3, #3
 8007de6:	d023      	beq.n	8007e30 <USBD_SetConfig+0x7c>
 8007de8:	e062      	b.n	8007eb0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007dea:	4b38      	ldr	r3, [pc, #224]	; (8007ecc <USBD_SetConfig+0x118>)
 8007dec:	781b      	ldrb	r3, [r3, #0]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d01a      	beq.n	8007e28 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007df2:	4b36      	ldr	r3, [pc, #216]	; (8007ecc <USBD_SetConfig+0x118>)
 8007df4:	781b      	ldrb	r3, [r3, #0]
 8007df6:	461a      	mov	r2, r3
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2203      	movs	r2, #3
 8007e00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007e04:	4b31      	ldr	r3, [pc, #196]	; (8007ecc <USBD_SetConfig+0x118>)
 8007e06:	781b      	ldrb	r3, [r3, #0]
 8007e08:	4619      	mov	r1, r3
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f7ff f9e7 	bl	80071de <USBD_SetClassConfig>
 8007e10:	4603      	mov	r3, r0
 8007e12:	2b02      	cmp	r3, #2
 8007e14:	d104      	bne.n	8007e20 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007e16:	6839      	ldr	r1, [r7, #0]
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f000 f932 	bl	8008082 <USBD_CtlError>
            return;
 8007e1e:	e052      	b.n	8007ec6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f000 f9f6 	bl	8008212 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007e26:	e04e      	b.n	8007ec6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f000 f9f2 	bl	8008212 <USBD_CtlSendStatus>
        break;
 8007e2e:	e04a      	b.n	8007ec6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007e30:	4b26      	ldr	r3, [pc, #152]	; (8007ecc <USBD_SetConfig+0x118>)
 8007e32:	781b      	ldrb	r3, [r3, #0]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d112      	bne.n	8007e5e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2202      	movs	r2, #2
 8007e3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007e40:	4b22      	ldr	r3, [pc, #136]	; (8007ecc <USBD_SetConfig+0x118>)
 8007e42:	781b      	ldrb	r3, [r3, #0]
 8007e44:	461a      	mov	r2, r3
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007e4a:	4b20      	ldr	r3, [pc, #128]	; (8007ecc <USBD_SetConfig+0x118>)
 8007e4c:	781b      	ldrb	r3, [r3, #0]
 8007e4e:	4619      	mov	r1, r3
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f7ff f9e3 	bl	800721c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f000 f9db 	bl	8008212 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007e5c:	e033      	b.n	8007ec6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007e5e:	4b1b      	ldr	r3, [pc, #108]	; (8007ecc <USBD_SetConfig+0x118>)
 8007e60:	781b      	ldrb	r3, [r3, #0]
 8007e62:	461a      	mov	r2, r3
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	429a      	cmp	r2, r3
 8007e6a:	d01d      	beq.n	8007ea8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	b2db      	uxtb	r3, r3
 8007e72:	4619      	mov	r1, r3
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f7ff f9d1 	bl	800721c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007e7a:	4b14      	ldr	r3, [pc, #80]	; (8007ecc <USBD_SetConfig+0x118>)
 8007e7c:	781b      	ldrb	r3, [r3, #0]
 8007e7e:	461a      	mov	r2, r3
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007e84:	4b11      	ldr	r3, [pc, #68]	; (8007ecc <USBD_SetConfig+0x118>)
 8007e86:	781b      	ldrb	r3, [r3, #0]
 8007e88:	4619      	mov	r1, r3
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f7ff f9a7 	bl	80071de <USBD_SetClassConfig>
 8007e90:	4603      	mov	r3, r0
 8007e92:	2b02      	cmp	r3, #2
 8007e94:	d104      	bne.n	8007ea0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007e96:	6839      	ldr	r1, [r7, #0]
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f000 f8f2 	bl	8008082 <USBD_CtlError>
            return;
 8007e9e:	e012      	b.n	8007ec6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f000 f9b6 	bl	8008212 <USBD_CtlSendStatus>
        break;
 8007ea6:	e00e      	b.n	8007ec6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f000 f9b2 	bl	8008212 <USBD_CtlSendStatus>
        break;
 8007eae:	e00a      	b.n	8007ec6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007eb0:	6839      	ldr	r1, [r7, #0]
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f000 f8e5 	bl	8008082 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007eb8:	4b04      	ldr	r3, [pc, #16]	; (8007ecc <USBD_SetConfig+0x118>)
 8007eba:	781b      	ldrb	r3, [r3, #0]
 8007ebc:	4619      	mov	r1, r3
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f7ff f9ac 	bl	800721c <USBD_ClrClassConfig>
        break;
 8007ec4:	bf00      	nop
    }
  }
}
 8007ec6:	3708      	adds	r7, #8
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}
 8007ecc:	2000028c 	.word	0x2000028c

08007ed0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b082      	sub	sp, #8
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
 8007ed8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	88db      	ldrh	r3, [r3, #6]
 8007ede:	2b01      	cmp	r3, #1
 8007ee0:	d004      	beq.n	8007eec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007ee2:	6839      	ldr	r1, [r7, #0]
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f000 f8cc 	bl	8008082 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007eea:	e022      	b.n	8007f32 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ef2:	2b02      	cmp	r3, #2
 8007ef4:	dc02      	bgt.n	8007efc <USBD_GetConfig+0x2c>
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	dc03      	bgt.n	8007f02 <USBD_GetConfig+0x32>
 8007efa:	e015      	b.n	8007f28 <USBD_GetConfig+0x58>
 8007efc:	2b03      	cmp	r3, #3
 8007efe:	d00b      	beq.n	8007f18 <USBD_GetConfig+0x48>
 8007f00:	e012      	b.n	8007f28 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2200      	movs	r2, #0
 8007f06:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	3308      	adds	r3, #8
 8007f0c:	2201      	movs	r2, #1
 8007f0e:	4619      	mov	r1, r3
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f000 f920 	bl	8008156 <USBD_CtlSendData>
        break;
 8007f16:	e00c      	b.n	8007f32 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	3304      	adds	r3, #4
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	4619      	mov	r1, r3
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f000 f918 	bl	8008156 <USBD_CtlSendData>
        break;
 8007f26:	e004      	b.n	8007f32 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007f28:	6839      	ldr	r1, [r7, #0]
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f000 f8a9 	bl	8008082 <USBD_CtlError>
        break;
 8007f30:	bf00      	nop
}
 8007f32:	bf00      	nop
 8007f34:	3708      	adds	r7, #8
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}

08007f3a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f3a:	b580      	push	{r7, lr}
 8007f3c:	b082      	sub	sp, #8
 8007f3e:	af00      	add	r7, sp, #0
 8007f40:	6078      	str	r0, [r7, #4]
 8007f42:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f4a:	3b01      	subs	r3, #1
 8007f4c:	2b02      	cmp	r3, #2
 8007f4e:	d81e      	bhi.n	8007f8e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	88db      	ldrh	r3, [r3, #6]
 8007f54:	2b02      	cmp	r3, #2
 8007f56:	d004      	beq.n	8007f62 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007f58:	6839      	ldr	r1, [r7, #0]
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f000 f891 	bl	8008082 <USBD_CtlError>
        break;
 8007f60:	e01a      	b.n	8007f98 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2201      	movs	r2, #1
 8007f66:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d005      	beq.n	8007f7e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	68db      	ldr	r3, [r3, #12]
 8007f76:	f043 0202 	orr.w	r2, r3, #2
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	330c      	adds	r3, #12
 8007f82:	2202      	movs	r2, #2
 8007f84:	4619      	mov	r1, r3
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f000 f8e5 	bl	8008156 <USBD_CtlSendData>
      break;
 8007f8c:	e004      	b.n	8007f98 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007f8e:	6839      	ldr	r1, [r7, #0]
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f000 f876 	bl	8008082 <USBD_CtlError>
      break;
 8007f96:	bf00      	nop
  }
}
 8007f98:	bf00      	nop
 8007f9a:	3708      	adds	r7, #8
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}

08007fa0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b082      	sub	sp, #8
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	885b      	ldrh	r3, [r3, #2]
 8007fae:	2b01      	cmp	r3, #1
 8007fb0:	d106      	bne.n	8007fc0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2201      	movs	r2, #1
 8007fb6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f000 f929 	bl	8008212 <USBD_CtlSendStatus>
  }
}
 8007fc0:	bf00      	nop
 8007fc2:	3708      	adds	r7, #8
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}

08007fc8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b082      	sub	sp, #8
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
 8007fd0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fd8:	3b01      	subs	r3, #1
 8007fda:	2b02      	cmp	r3, #2
 8007fdc:	d80b      	bhi.n	8007ff6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	885b      	ldrh	r3, [r3, #2]
 8007fe2:	2b01      	cmp	r3, #1
 8007fe4:	d10c      	bne.n	8008000 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 f90f 	bl	8008212 <USBD_CtlSendStatus>
      }
      break;
 8007ff4:	e004      	b.n	8008000 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007ff6:	6839      	ldr	r1, [r7, #0]
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f000 f842 	bl	8008082 <USBD_CtlError>
      break;
 8007ffe:	e000      	b.n	8008002 <USBD_ClrFeature+0x3a>
      break;
 8008000:	bf00      	nop
  }
}
 8008002:	bf00      	nop
 8008004:	3708      	adds	r7, #8
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}

0800800a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800800a:	b480      	push	{r7}
 800800c:	b083      	sub	sp, #12
 800800e:	af00      	add	r7, sp, #0
 8008010:	6078      	str	r0, [r7, #4]
 8008012:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	781a      	ldrb	r2, [r3, #0]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	785a      	ldrb	r2, [r3, #1]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	3302      	adds	r3, #2
 8008028:	781b      	ldrb	r3, [r3, #0]
 800802a:	b29a      	uxth	r2, r3
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	3303      	adds	r3, #3
 8008030:	781b      	ldrb	r3, [r3, #0]
 8008032:	b29b      	uxth	r3, r3
 8008034:	021b      	lsls	r3, r3, #8
 8008036:	b29b      	uxth	r3, r3
 8008038:	4413      	add	r3, r2
 800803a:	b29a      	uxth	r2, r3
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	3304      	adds	r3, #4
 8008044:	781b      	ldrb	r3, [r3, #0]
 8008046:	b29a      	uxth	r2, r3
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	3305      	adds	r3, #5
 800804c:	781b      	ldrb	r3, [r3, #0]
 800804e:	b29b      	uxth	r3, r3
 8008050:	021b      	lsls	r3, r3, #8
 8008052:	b29b      	uxth	r3, r3
 8008054:	4413      	add	r3, r2
 8008056:	b29a      	uxth	r2, r3
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	3306      	adds	r3, #6
 8008060:	781b      	ldrb	r3, [r3, #0]
 8008062:	b29a      	uxth	r2, r3
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	3307      	adds	r3, #7
 8008068:	781b      	ldrb	r3, [r3, #0]
 800806a:	b29b      	uxth	r3, r3
 800806c:	021b      	lsls	r3, r3, #8
 800806e:	b29b      	uxth	r3, r3
 8008070:	4413      	add	r3, r2
 8008072:	b29a      	uxth	r2, r3
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	80da      	strh	r2, [r3, #6]

}
 8008078:	bf00      	nop
 800807a:	370c      	adds	r7, #12
 800807c:	46bd      	mov	sp, r7
 800807e:	bc80      	pop	{r7}
 8008080:	4770      	bx	lr

08008082 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008082:	b580      	push	{r7, lr}
 8008084:	b082      	sub	sp, #8
 8008086:	af00      	add	r7, sp, #0
 8008088:	6078      	str	r0, [r7, #4]
 800808a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800808c:	2180      	movs	r1, #128	; 0x80
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f000 fc54 	bl	800893c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008094:	2100      	movs	r1, #0
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f000 fc50 	bl	800893c <USBD_LL_StallEP>
}
 800809c:	bf00      	nop
 800809e:	3708      	adds	r7, #8
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b086      	sub	sp, #24
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	60f8      	str	r0, [r7, #12]
 80080ac:	60b9      	str	r1, [r7, #8]
 80080ae:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80080b0:	2300      	movs	r3, #0
 80080b2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d032      	beq.n	8008120 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80080ba:	68f8      	ldr	r0, [r7, #12]
 80080bc:	f000 f834 	bl	8008128 <USBD_GetLen>
 80080c0:	4603      	mov	r3, r0
 80080c2:	3301      	adds	r3, #1
 80080c4:	b29b      	uxth	r3, r3
 80080c6:	005b      	lsls	r3, r3, #1
 80080c8:	b29a      	uxth	r2, r3
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80080ce:	7dfb      	ldrb	r3, [r7, #23]
 80080d0:	1c5a      	adds	r2, r3, #1
 80080d2:	75fa      	strb	r2, [r7, #23]
 80080d4:	461a      	mov	r2, r3
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	4413      	add	r3, r2
 80080da:	687a      	ldr	r2, [r7, #4]
 80080dc:	7812      	ldrb	r2, [r2, #0]
 80080de:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80080e0:	7dfb      	ldrb	r3, [r7, #23]
 80080e2:	1c5a      	adds	r2, r3, #1
 80080e4:	75fa      	strb	r2, [r7, #23]
 80080e6:	461a      	mov	r2, r3
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	4413      	add	r3, r2
 80080ec:	2203      	movs	r2, #3
 80080ee:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80080f0:	e012      	b.n	8008118 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	1c5a      	adds	r2, r3, #1
 80080f6:	60fa      	str	r2, [r7, #12]
 80080f8:	7dfa      	ldrb	r2, [r7, #23]
 80080fa:	1c51      	adds	r1, r2, #1
 80080fc:	75f9      	strb	r1, [r7, #23]
 80080fe:	4611      	mov	r1, r2
 8008100:	68ba      	ldr	r2, [r7, #8]
 8008102:	440a      	add	r2, r1
 8008104:	781b      	ldrb	r3, [r3, #0]
 8008106:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008108:	7dfb      	ldrb	r3, [r7, #23]
 800810a:	1c5a      	adds	r2, r3, #1
 800810c:	75fa      	strb	r2, [r7, #23]
 800810e:	461a      	mov	r2, r3
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	4413      	add	r3, r2
 8008114:	2200      	movs	r2, #0
 8008116:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	781b      	ldrb	r3, [r3, #0]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d1e8      	bne.n	80080f2 <USBD_GetString+0x4e>
    }
  }
}
 8008120:	bf00      	nop
 8008122:	3718      	adds	r7, #24
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}

08008128 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008128:	b480      	push	{r7}
 800812a:	b085      	sub	sp, #20
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008130:	2300      	movs	r3, #0
 8008132:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008134:	e005      	b.n	8008142 <USBD_GetLen+0x1a>
  {
    len++;
 8008136:	7bfb      	ldrb	r3, [r7, #15]
 8008138:	3301      	adds	r3, #1
 800813a:	73fb      	strb	r3, [r7, #15]
    buf++;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	3301      	adds	r3, #1
 8008140:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	781b      	ldrb	r3, [r3, #0]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d1f5      	bne.n	8008136 <USBD_GetLen+0xe>
  }

  return len;
 800814a:	7bfb      	ldrb	r3, [r7, #15]
}
 800814c:	4618      	mov	r0, r3
 800814e:	3714      	adds	r7, #20
 8008150:	46bd      	mov	sp, r7
 8008152:	bc80      	pop	{r7}
 8008154:	4770      	bx	lr

08008156 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008156:	b580      	push	{r7, lr}
 8008158:	b084      	sub	sp, #16
 800815a:	af00      	add	r7, sp, #0
 800815c:	60f8      	str	r0, [r7, #12]
 800815e:	60b9      	str	r1, [r7, #8]
 8008160:	4613      	mov	r3, r2
 8008162:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	2202      	movs	r2, #2
 8008168:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800816c:	88fa      	ldrh	r2, [r7, #6]
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008172:	88fa      	ldrh	r2, [r7, #6]
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008178:	88fb      	ldrh	r3, [r7, #6]
 800817a:	68ba      	ldr	r2, [r7, #8]
 800817c:	2100      	movs	r1, #0
 800817e:	68f8      	ldr	r0, [r7, #12]
 8008180:	f000 fc65 	bl	8008a4e <USBD_LL_Transmit>

  return USBD_OK;
 8008184:	2300      	movs	r3, #0
}
 8008186:	4618      	mov	r0, r3
 8008188:	3710      	adds	r7, #16
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}

0800818e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800818e:	b580      	push	{r7, lr}
 8008190:	b084      	sub	sp, #16
 8008192:	af00      	add	r7, sp, #0
 8008194:	60f8      	str	r0, [r7, #12]
 8008196:	60b9      	str	r1, [r7, #8]
 8008198:	4613      	mov	r3, r2
 800819a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800819c:	88fb      	ldrh	r3, [r7, #6]
 800819e:	68ba      	ldr	r2, [r7, #8]
 80081a0:	2100      	movs	r1, #0
 80081a2:	68f8      	ldr	r0, [r7, #12]
 80081a4:	f000 fc53 	bl	8008a4e <USBD_LL_Transmit>

  return USBD_OK;
 80081a8:	2300      	movs	r3, #0
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3710      	adds	r7, #16
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}

080081b2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80081b2:	b580      	push	{r7, lr}
 80081b4:	b084      	sub	sp, #16
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	60f8      	str	r0, [r7, #12]
 80081ba:	60b9      	str	r1, [r7, #8]
 80081bc:	4613      	mov	r3, r2
 80081be:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	2203      	movs	r2, #3
 80081c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80081c8:	88fa      	ldrh	r2, [r7, #6]
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80081d0:	88fa      	ldrh	r2, [r7, #6]
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80081d8:	88fb      	ldrh	r3, [r7, #6]
 80081da:	68ba      	ldr	r2, [r7, #8]
 80081dc:	2100      	movs	r1, #0
 80081de:	68f8      	ldr	r0, [r7, #12]
 80081e0:	f000 fc58 	bl	8008a94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80081e4:	2300      	movs	r3, #0
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	3710      	adds	r7, #16
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}

080081ee <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80081ee:	b580      	push	{r7, lr}
 80081f0:	b084      	sub	sp, #16
 80081f2:	af00      	add	r7, sp, #0
 80081f4:	60f8      	str	r0, [r7, #12]
 80081f6:	60b9      	str	r1, [r7, #8]
 80081f8:	4613      	mov	r3, r2
 80081fa:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80081fc:	88fb      	ldrh	r3, [r7, #6]
 80081fe:	68ba      	ldr	r2, [r7, #8]
 8008200:	2100      	movs	r1, #0
 8008202:	68f8      	ldr	r0, [r7, #12]
 8008204:	f000 fc46 	bl	8008a94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008208:	2300      	movs	r3, #0
}
 800820a:	4618      	mov	r0, r3
 800820c:	3710      	adds	r7, #16
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}

08008212 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008212:	b580      	push	{r7, lr}
 8008214:	b082      	sub	sp, #8
 8008216:	af00      	add	r7, sp, #0
 8008218:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2204      	movs	r2, #4
 800821e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008222:	2300      	movs	r3, #0
 8008224:	2200      	movs	r2, #0
 8008226:	2100      	movs	r1, #0
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f000 fc10 	bl	8008a4e <USBD_LL_Transmit>

  return USBD_OK;
 800822e:	2300      	movs	r3, #0
}
 8008230:	4618      	mov	r0, r3
 8008232:	3708      	adds	r7, #8
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}

08008238 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b082      	sub	sp, #8
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2205      	movs	r2, #5
 8008244:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008248:	2300      	movs	r3, #0
 800824a:	2200      	movs	r2, #0
 800824c:	2100      	movs	r1, #0
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f000 fc20 	bl	8008a94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008254:	2300      	movs	r3, #0
}
 8008256:	4618      	mov	r0, r3
 8008258:	3708      	adds	r7, #8
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}
	...

08008260 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008264:	2200      	movs	r2, #0
 8008266:	4912      	ldr	r1, [pc, #72]	; (80082b0 <MX_USB_DEVICE_Init+0x50>)
 8008268:	4812      	ldr	r0, [pc, #72]	; (80082b4 <MX_USB_DEVICE_Init+0x54>)
 800826a:	f7fe ff5e 	bl	800712a <USBD_Init>
 800826e:	4603      	mov	r3, r0
 8008270:	2b00      	cmp	r3, #0
 8008272:	d001      	beq.n	8008278 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008274:	f7f8 f986 	bl	8000584 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008278:	490f      	ldr	r1, [pc, #60]	; (80082b8 <MX_USB_DEVICE_Init+0x58>)
 800827a:	480e      	ldr	r0, [pc, #56]	; (80082b4 <MX_USB_DEVICE_Init+0x54>)
 800827c:	f7fe ff80 	bl	8007180 <USBD_RegisterClass>
 8008280:	4603      	mov	r3, r0
 8008282:	2b00      	cmp	r3, #0
 8008284:	d001      	beq.n	800828a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008286:	f7f8 f97d 	bl	8000584 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800828a:	490c      	ldr	r1, [pc, #48]	; (80082bc <MX_USB_DEVICE_Init+0x5c>)
 800828c:	4809      	ldr	r0, [pc, #36]	; (80082b4 <MX_USB_DEVICE_Init+0x54>)
 800828e:	f7fe feb1 	bl	8006ff4 <USBD_CDC_RegisterInterface>
 8008292:	4603      	mov	r3, r0
 8008294:	2b00      	cmp	r3, #0
 8008296:	d001      	beq.n	800829c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008298:	f7f8 f974 	bl	8000584 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800829c:	4805      	ldr	r0, [pc, #20]	; (80082b4 <MX_USB_DEVICE_Init+0x54>)
 800829e:	f7fe ff88 	bl	80071b2 <USBD_Start>
 80082a2:	4603      	mov	r3, r0
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d001      	beq.n	80082ac <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80082a8:	f7f8 f96c 	bl	8000584 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80082ac:	bf00      	nop
 80082ae:	bd80      	pop	{r7, pc}
 80082b0:	20000138 	.word	0x20000138
 80082b4:	20000290 	.word	0x20000290
 80082b8:	20000024 	.word	0x20000024
 80082bc:	20000128 	.word	0x20000128

080082c0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80082c4:	2200      	movs	r2, #0
 80082c6:	4905      	ldr	r1, [pc, #20]	; (80082dc <CDC_Init_FS+0x1c>)
 80082c8:	4805      	ldr	r0, [pc, #20]	; (80082e0 <CDC_Init_FS+0x20>)
 80082ca:	f7fe fea9 	bl	8007020 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80082ce:	4905      	ldr	r1, [pc, #20]	; (80082e4 <CDC_Init_FS+0x24>)
 80082d0:	4803      	ldr	r0, [pc, #12]	; (80082e0 <CDC_Init_FS+0x20>)
 80082d2:	f7fe febe 	bl	8007052 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80082d6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80082d8:	4618      	mov	r0, r3
 80082da:	bd80      	pop	{r7, pc}
 80082dc:	20000954 	.word	0x20000954
 80082e0:	20000290 	.word	0x20000290
 80082e4:	20000554 	.word	0x20000554

080082e8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80082e8:	b480      	push	{r7}
 80082ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80082ec:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bc80      	pop	{r7}
 80082f4:	4770      	bx	lr
	...

080082f8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80082f8:	b480      	push	{r7}
 80082fa:	b083      	sub	sp, #12
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	4603      	mov	r3, r0
 8008300:	6039      	str	r1, [r7, #0]
 8008302:	71fb      	strb	r3, [r7, #7]
 8008304:	4613      	mov	r3, r2
 8008306:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008308:	79fb      	ldrb	r3, [r7, #7]
 800830a:	2b23      	cmp	r3, #35	; 0x23
 800830c:	d84a      	bhi.n	80083a4 <CDC_Control_FS+0xac>
 800830e:	a201      	add	r2, pc, #4	; (adr r2, 8008314 <CDC_Control_FS+0x1c>)
 8008310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008314:	080083a5 	.word	0x080083a5
 8008318:	080083a5 	.word	0x080083a5
 800831c:	080083a5 	.word	0x080083a5
 8008320:	080083a5 	.word	0x080083a5
 8008324:	080083a5 	.word	0x080083a5
 8008328:	080083a5 	.word	0x080083a5
 800832c:	080083a5 	.word	0x080083a5
 8008330:	080083a5 	.word	0x080083a5
 8008334:	080083a5 	.word	0x080083a5
 8008338:	080083a5 	.word	0x080083a5
 800833c:	080083a5 	.word	0x080083a5
 8008340:	080083a5 	.word	0x080083a5
 8008344:	080083a5 	.word	0x080083a5
 8008348:	080083a5 	.word	0x080083a5
 800834c:	080083a5 	.word	0x080083a5
 8008350:	080083a5 	.word	0x080083a5
 8008354:	080083a5 	.word	0x080083a5
 8008358:	080083a5 	.word	0x080083a5
 800835c:	080083a5 	.word	0x080083a5
 8008360:	080083a5 	.word	0x080083a5
 8008364:	080083a5 	.word	0x080083a5
 8008368:	080083a5 	.word	0x080083a5
 800836c:	080083a5 	.word	0x080083a5
 8008370:	080083a5 	.word	0x080083a5
 8008374:	080083a5 	.word	0x080083a5
 8008378:	080083a5 	.word	0x080083a5
 800837c:	080083a5 	.word	0x080083a5
 8008380:	080083a5 	.word	0x080083a5
 8008384:	080083a5 	.word	0x080083a5
 8008388:	080083a5 	.word	0x080083a5
 800838c:	080083a5 	.word	0x080083a5
 8008390:	080083a5 	.word	0x080083a5
 8008394:	080083a5 	.word	0x080083a5
 8008398:	080083a5 	.word	0x080083a5
 800839c:	080083a5 	.word	0x080083a5
 80083a0:	080083a5 	.word	0x080083a5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80083a4:	bf00      	nop
  }

  return (USBD_OK);
 80083a6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	370c      	adds	r7, #12
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bc80      	pop	{r7}
 80083b0:	4770      	bx	lr
 80083b2:	bf00      	nop

080083b4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b082      	sub	sp, #8
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
 80083bc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80083be:	6879      	ldr	r1, [r7, #4]
 80083c0:	4805      	ldr	r0, [pc, #20]	; (80083d8 <CDC_Receive_FS+0x24>)
 80083c2:	f7fe fe46 	bl	8007052 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80083c6:	4804      	ldr	r0, [pc, #16]	; (80083d8 <CDC_Receive_FS+0x24>)
 80083c8:	f7fe fe85 	bl	80070d6 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80083cc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3708      	adds	r7, #8
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}
 80083d6:	bf00      	nop
 80083d8:	20000290 	.word	0x20000290

080083dc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b084      	sub	sp, #16
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
 80083e4:	460b      	mov	r3, r1
 80083e6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80083e8:	2300      	movs	r3, #0
 80083ea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80083ec:	4b0d      	ldr	r3, [pc, #52]	; (8008424 <CDC_Transmit_FS+0x48>)
 80083ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083f2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d001      	beq.n	8008402 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80083fe:	2301      	movs	r3, #1
 8008400:	e00b      	b.n	800841a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008402:	887b      	ldrh	r3, [r7, #2]
 8008404:	461a      	mov	r2, r3
 8008406:	6879      	ldr	r1, [r7, #4]
 8008408:	4806      	ldr	r0, [pc, #24]	; (8008424 <CDC_Transmit_FS+0x48>)
 800840a:	f7fe fe09 	bl	8007020 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800840e:	4805      	ldr	r0, [pc, #20]	; (8008424 <CDC_Transmit_FS+0x48>)
 8008410:	f7fe fe32 	bl	8007078 <USBD_CDC_TransmitPacket>
 8008414:	4603      	mov	r3, r0
 8008416:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008418:	7bfb      	ldrb	r3, [r7, #15]
}
 800841a:	4618      	mov	r0, r3
 800841c:	3710      	adds	r7, #16
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}
 8008422:	bf00      	nop
 8008424:	20000290 	.word	0x20000290

08008428 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008428:	b480      	push	{r7}
 800842a:	b083      	sub	sp, #12
 800842c:	af00      	add	r7, sp, #0
 800842e:	4603      	mov	r3, r0
 8008430:	6039      	str	r1, [r7, #0]
 8008432:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	2212      	movs	r2, #18
 8008438:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800843a:	4b03      	ldr	r3, [pc, #12]	; (8008448 <USBD_FS_DeviceDescriptor+0x20>)
}
 800843c:	4618      	mov	r0, r3
 800843e:	370c      	adds	r7, #12
 8008440:	46bd      	mov	sp, r7
 8008442:	bc80      	pop	{r7}
 8008444:	4770      	bx	lr
 8008446:	bf00      	nop
 8008448:	20000154 	.word	0x20000154

0800844c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800844c:	b480      	push	{r7}
 800844e:	b083      	sub	sp, #12
 8008450:	af00      	add	r7, sp, #0
 8008452:	4603      	mov	r3, r0
 8008454:	6039      	str	r1, [r7, #0]
 8008456:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	2204      	movs	r2, #4
 800845c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800845e:	4b03      	ldr	r3, [pc, #12]	; (800846c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008460:	4618      	mov	r0, r3
 8008462:	370c      	adds	r7, #12
 8008464:	46bd      	mov	sp, r7
 8008466:	bc80      	pop	{r7}
 8008468:	4770      	bx	lr
 800846a:	bf00      	nop
 800846c:	20000168 	.word	0x20000168

08008470 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b082      	sub	sp, #8
 8008474:	af00      	add	r7, sp, #0
 8008476:	4603      	mov	r3, r0
 8008478:	6039      	str	r1, [r7, #0]
 800847a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800847c:	79fb      	ldrb	r3, [r7, #7]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d105      	bne.n	800848e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008482:	683a      	ldr	r2, [r7, #0]
 8008484:	4907      	ldr	r1, [pc, #28]	; (80084a4 <USBD_FS_ProductStrDescriptor+0x34>)
 8008486:	4808      	ldr	r0, [pc, #32]	; (80084a8 <USBD_FS_ProductStrDescriptor+0x38>)
 8008488:	f7ff fe0c 	bl	80080a4 <USBD_GetString>
 800848c:	e004      	b.n	8008498 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800848e:	683a      	ldr	r2, [r7, #0]
 8008490:	4904      	ldr	r1, [pc, #16]	; (80084a4 <USBD_FS_ProductStrDescriptor+0x34>)
 8008492:	4805      	ldr	r0, [pc, #20]	; (80084a8 <USBD_FS_ProductStrDescriptor+0x38>)
 8008494:	f7ff fe06 	bl	80080a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008498:	4b02      	ldr	r3, [pc, #8]	; (80084a4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800849a:	4618      	mov	r0, r3
 800849c:	3708      	adds	r7, #8
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}
 80084a2:	bf00      	nop
 80084a4:	20000d54 	.word	0x20000d54
 80084a8:	08009530 	.word	0x08009530

080084ac <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b082      	sub	sp, #8
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	4603      	mov	r3, r0
 80084b4:	6039      	str	r1, [r7, #0]
 80084b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80084b8:	683a      	ldr	r2, [r7, #0]
 80084ba:	4904      	ldr	r1, [pc, #16]	; (80084cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80084bc:	4804      	ldr	r0, [pc, #16]	; (80084d0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80084be:	f7ff fdf1 	bl	80080a4 <USBD_GetString>
  return USBD_StrDesc;
 80084c2:	4b02      	ldr	r3, [pc, #8]	; (80084cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3708      	adds	r7, #8
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}
 80084cc:	20000d54 	.word	0x20000d54
 80084d0:	08009548 	.word	0x08009548

080084d4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b082      	sub	sp, #8
 80084d8:	af00      	add	r7, sp, #0
 80084da:	4603      	mov	r3, r0
 80084dc:	6039      	str	r1, [r7, #0]
 80084de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	221a      	movs	r2, #26
 80084e4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80084e6:	f000 f843 	bl	8008570 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80084ea:	4b02      	ldr	r3, [pc, #8]	; (80084f4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	3708      	adds	r7, #8
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}
 80084f4:	2000016c 	.word	0x2000016c

080084f8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b082      	sub	sp, #8
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	4603      	mov	r3, r0
 8008500:	6039      	str	r1, [r7, #0]
 8008502:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008504:	79fb      	ldrb	r3, [r7, #7]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d105      	bne.n	8008516 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800850a:	683a      	ldr	r2, [r7, #0]
 800850c:	4907      	ldr	r1, [pc, #28]	; (800852c <USBD_FS_ConfigStrDescriptor+0x34>)
 800850e:	4808      	ldr	r0, [pc, #32]	; (8008530 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008510:	f7ff fdc8 	bl	80080a4 <USBD_GetString>
 8008514:	e004      	b.n	8008520 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008516:	683a      	ldr	r2, [r7, #0]
 8008518:	4904      	ldr	r1, [pc, #16]	; (800852c <USBD_FS_ConfigStrDescriptor+0x34>)
 800851a:	4805      	ldr	r0, [pc, #20]	; (8008530 <USBD_FS_ConfigStrDescriptor+0x38>)
 800851c:	f7ff fdc2 	bl	80080a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008520:	4b02      	ldr	r3, [pc, #8]	; (800852c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008522:	4618      	mov	r0, r3
 8008524:	3708      	adds	r7, #8
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}
 800852a:	bf00      	nop
 800852c:	20000d54 	.word	0x20000d54
 8008530:	0800955c 	.word	0x0800955c

08008534 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b082      	sub	sp, #8
 8008538:	af00      	add	r7, sp, #0
 800853a:	4603      	mov	r3, r0
 800853c:	6039      	str	r1, [r7, #0]
 800853e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008540:	79fb      	ldrb	r3, [r7, #7]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d105      	bne.n	8008552 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008546:	683a      	ldr	r2, [r7, #0]
 8008548:	4907      	ldr	r1, [pc, #28]	; (8008568 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800854a:	4808      	ldr	r0, [pc, #32]	; (800856c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800854c:	f7ff fdaa 	bl	80080a4 <USBD_GetString>
 8008550:	e004      	b.n	800855c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008552:	683a      	ldr	r2, [r7, #0]
 8008554:	4904      	ldr	r1, [pc, #16]	; (8008568 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008556:	4805      	ldr	r0, [pc, #20]	; (800856c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008558:	f7ff fda4 	bl	80080a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800855c:	4b02      	ldr	r3, [pc, #8]	; (8008568 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800855e:	4618      	mov	r0, r3
 8008560:	3708      	adds	r7, #8
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}
 8008566:	bf00      	nop
 8008568:	20000d54 	.word	0x20000d54
 800856c:	08009568 	.word	0x08009568

08008570 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b084      	sub	sp, #16
 8008574:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008576:	4b0f      	ldr	r3, [pc, #60]	; (80085b4 <Get_SerialNum+0x44>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800857c:	4b0e      	ldr	r3, [pc, #56]	; (80085b8 <Get_SerialNum+0x48>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008582:	4b0e      	ldr	r3, [pc, #56]	; (80085bc <Get_SerialNum+0x4c>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008588:	68fa      	ldr	r2, [r7, #12]
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	4413      	add	r3, r2
 800858e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d009      	beq.n	80085aa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008596:	2208      	movs	r2, #8
 8008598:	4909      	ldr	r1, [pc, #36]	; (80085c0 <Get_SerialNum+0x50>)
 800859a:	68f8      	ldr	r0, [r7, #12]
 800859c:	f000 f814 	bl	80085c8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80085a0:	2204      	movs	r2, #4
 80085a2:	4908      	ldr	r1, [pc, #32]	; (80085c4 <Get_SerialNum+0x54>)
 80085a4:	68b8      	ldr	r0, [r7, #8]
 80085a6:	f000 f80f 	bl	80085c8 <IntToUnicode>
  }
}
 80085aa:	bf00      	nop
 80085ac:	3710      	adds	r7, #16
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}
 80085b2:	bf00      	nop
 80085b4:	1ffff7e8 	.word	0x1ffff7e8
 80085b8:	1ffff7ec 	.word	0x1ffff7ec
 80085bc:	1ffff7f0 	.word	0x1ffff7f0
 80085c0:	2000016e 	.word	0x2000016e
 80085c4:	2000017e 	.word	0x2000017e

080085c8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b087      	sub	sp, #28
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	60f8      	str	r0, [r7, #12]
 80085d0:	60b9      	str	r1, [r7, #8]
 80085d2:	4613      	mov	r3, r2
 80085d4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80085d6:	2300      	movs	r3, #0
 80085d8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80085da:	2300      	movs	r3, #0
 80085dc:	75fb      	strb	r3, [r7, #23]
 80085de:	e027      	b.n	8008630 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	0f1b      	lsrs	r3, r3, #28
 80085e4:	2b09      	cmp	r3, #9
 80085e6:	d80b      	bhi.n	8008600 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	0f1b      	lsrs	r3, r3, #28
 80085ec:	b2da      	uxtb	r2, r3
 80085ee:	7dfb      	ldrb	r3, [r7, #23]
 80085f0:	005b      	lsls	r3, r3, #1
 80085f2:	4619      	mov	r1, r3
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	440b      	add	r3, r1
 80085f8:	3230      	adds	r2, #48	; 0x30
 80085fa:	b2d2      	uxtb	r2, r2
 80085fc:	701a      	strb	r2, [r3, #0]
 80085fe:	e00a      	b.n	8008616 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	0f1b      	lsrs	r3, r3, #28
 8008604:	b2da      	uxtb	r2, r3
 8008606:	7dfb      	ldrb	r3, [r7, #23]
 8008608:	005b      	lsls	r3, r3, #1
 800860a:	4619      	mov	r1, r3
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	440b      	add	r3, r1
 8008610:	3237      	adds	r2, #55	; 0x37
 8008612:	b2d2      	uxtb	r2, r2
 8008614:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	011b      	lsls	r3, r3, #4
 800861a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800861c:	7dfb      	ldrb	r3, [r7, #23]
 800861e:	005b      	lsls	r3, r3, #1
 8008620:	3301      	adds	r3, #1
 8008622:	68ba      	ldr	r2, [r7, #8]
 8008624:	4413      	add	r3, r2
 8008626:	2200      	movs	r2, #0
 8008628:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800862a:	7dfb      	ldrb	r3, [r7, #23]
 800862c:	3301      	adds	r3, #1
 800862e:	75fb      	strb	r3, [r7, #23]
 8008630:	7dfa      	ldrb	r2, [r7, #23]
 8008632:	79fb      	ldrb	r3, [r7, #7]
 8008634:	429a      	cmp	r2, r3
 8008636:	d3d3      	bcc.n	80085e0 <IntToUnicode+0x18>
  }
}
 8008638:	bf00      	nop
 800863a:	bf00      	nop
 800863c:	371c      	adds	r7, #28
 800863e:	46bd      	mov	sp, r7
 8008640:	bc80      	pop	{r7}
 8008642:	4770      	bx	lr

08008644 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b084      	sub	sp, #16
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a0d      	ldr	r2, [pc, #52]	; (8008688 <HAL_PCD_MspInit+0x44>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d113      	bne.n	800867e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008656:	4b0d      	ldr	r3, [pc, #52]	; (800868c <HAL_PCD_MspInit+0x48>)
 8008658:	69db      	ldr	r3, [r3, #28]
 800865a:	4a0c      	ldr	r2, [pc, #48]	; (800868c <HAL_PCD_MspInit+0x48>)
 800865c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008660:	61d3      	str	r3, [r2, #28]
 8008662:	4b0a      	ldr	r3, [pc, #40]	; (800868c <HAL_PCD_MspInit+0x48>)
 8008664:	69db      	ldr	r3, [r3, #28]
 8008666:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800866a:	60fb      	str	r3, [r7, #12]
 800866c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800866e:	2200      	movs	r2, #0
 8008670:	2100      	movs	r1, #0
 8008672:	2014      	movs	r0, #20
 8008674:	f7f8 fa69 	bl	8000b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008678:	2014      	movs	r0, #20
 800867a:	f7f8 fa82 	bl	8000b82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800867e:	bf00      	nop
 8008680:	3710      	adds	r7, #16
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}
 8008686:	bf00      	nop
 8008688:	40005c00 	.word	0x40005c00
 800868c:	40021000 	.word	0x40021000

08008690 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b082      	sub	sp, #8
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80086a4:	4619      	mov	r1, r3
 80086a6:	4610      	mov	r0, r2
 80086a8:	f7fe fdcb 	bl	8007242 <USBD_LL_SetupStage>
}
 80086ac:	bf00      	nop
 80086ae:	3708      	adds	r7, #8
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}

080086b4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b082      	sub	sp, #8
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
 80086bc:	460b      	mov	r3, r1
 80086be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 80086c6:	78fa      	ldrb	r2, [r7, #3]
 80086c8:	6879      	ldr	r1, [r7, #4]
 80086ca:	4613      	mov	r3, r2
 80086cc:	009b      	lsls	r3, r3, #2
 80086ce:	4413      	add	r3, r2
 80086d0:	00db      	lsls	r3, r3, #3
 80086d2:	440b      	add	r3, r1
 80086d4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80086d8:	681a      	ldr	r2, [r3, #0]
 80086da:	78fb      	ldrb	r3, [r7, #3]
 80086dc:	4619      	mov	r1, r3
 80086de:	f7fe fdfd 	bl	80072dc <USBD_LL_DataOutStage>
}
 80086e2:	bf00      	nop
 80086e4:	3708      	adds	r7, #8
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}

080086ea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086ea:	b580      	push	{r7, lr}
 80086ec:	b082      	sub	sp, #8
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	6078      	str	r0, [r7, #4]
 80086f2:	460b      	mov	r3, r1
 80086f4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 80086fc:	78fa      	ldrb	r2, [r7, #3]
 80086fe:	6879      	ldr	r1, [r7, #4]
 8008700:	4613      	mov	r3, r2
 8008702:	009b      	lsls	r3, r3, #2
 8008704:	4413      	add	r3, r2
 8008706:	00db      	lsls	r3, r3, #3
 8008708:	440b      	add	r3, r1
 800870a:	333c      	adds	r3, #60	; 0x3c
 800870c:	681a      	ldr	r2, [r3, #0]
 800870e:	78fb      	ldrb	r3, [r7, #3]
 8008710:	4619      	mov	r1, r3
 8008712:	f7fe fe54 	bl	80073be <USBD_LL_DataInStage>
}
 8008716:	bf00      	nop
 8008718:	3708      	adds	r7, #8
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}

0800871e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800871e:	b580      	push	{r7, lr}
 8008720:	b082      	sub	sp, #8
 8008722:	af00      	add	r7, sp, #0
 8008724:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800872c:	4618      	mov	r0, r3
 800872e:	f7fe ff64 	bl	80075fa <USBD_LL_SOF>
}
 8008732:	bf00      	nop
 8008734:	3708      	adds	r7, #8
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}

0800873a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800873a:	b580      	push	{r7, lr}
 800873c:	b084      	sub	sp, #16
 800873e:	af00      	add	r7, sp, #0
 8008740:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008742:	2301      	movs	r3, #1
 8008744:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	689b      	ldr	r3, [r3, #8]
 800874a:	2b02      	cmp	r3, #2
 800874c:	d001      	beq.n	8008752 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800874e:	f7f7 ff19 	bl	8000584 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8008758:	7bfa      	ldrb	r2, [r7, #15]
 800875a:	4611      	mov	r1, r2
 800875c:	4618      	mov	r0, r3
 800875e:	f7fe ff14 	bl	800758a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8008768:	4618      	mov	r0, r3
 800876a:	f7fe fecd 	bl	8007508 <USBD_LL_Reset>
}
 800876e:	bf00      	nop
 8008770:	3710      	adds	r7, #16
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}
	...

08008778 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b082      	sub	sp, #8
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8008786:	4618      	mov	r0, r3
 8008788:	f7fe ff0e 	bl	80075a8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	699b      	ldr	r3, [r3, #24]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d005      	beq.n	80087a0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008794:	4b04      	ldr	r3, [pc, #16]	; (80087a8 <HAL_PCD_SuspendCallback+0x30>)
 8008796:	691b      	ldr	r3, [r3, #16]
 8008798:	4a03      	ldr	r2, [pc, #12]	; (80087a8 <HAL_PCD_SuspendCallback+0x30>)
 800879a:	f043 0306 	orr.w	r3, r3, #6
 800879e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80087a0:	bf00      	nop
 80087a2:	3708      	adds	r7, #8
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}
 80087a8:	e000ed00 	.word	0xe000ed00

080087ac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b082      	sub	sp, #8
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80087ba:	4618      	mov	r0, r3
 80087bc:	f7fe ff08 	bl	80075d0 <USBD_LL_Resume>
}
 80087c0:	bf00      	nop
 80087c2:	3708      	adds	r7, #8
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}

080087c8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b082      	sub	sp, #8
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80087d0:	4a28      	ldr	r2, [pc, #160]	; (8008874 <USBD_LL_Init+0xac>)
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	4a26      	ldr	r2, [pc, #152]	; (8008874 <USBD_LL_Init+0xac>)
 80087dc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80087e0:	4b24      	ldr	r3, [pc, #144]	; (8008874 <USBD_LL_Init+0xac>)
 80087e2:	4a25      	ldr	r2, [pc, #148]	; (8008878 <USBD_LL_Init+0xb0>)
 80087e4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80087e6:	4b23      	ldr	r3, [pc, #140]	; (8008874 <USBD_LL_Init+0xac>)
 80087e8:	2208      	movs	r2, #8
 80087ea:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80087ec:	4b21      	ldr	r3, [pc, #132]	; (8008874 <USBD_LL_Init+0xac>)
 80087ee:	2202      	movs	r2, #2
 80087f0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80087f2:	4b20      	ldr	r3, [pc, #128]	; (8008874 <USBD_LL_Init+0xac>)
 80087f4:	2200      	movs	r2, #0
 80087f6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80087f8:	4b1e      	ldr	r3, [pc, #120]	; (8008874 <USBD_LL_Init+0xac>)
 80087fa:	2200      	movs	r2, #0
 80087fc:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80087fe:	4b1d      	ldr	r3, [pc, #116]	; (8008874 <USBD_LL_Init+0xac>)
 8008800:	2200      	movs	r2, #0
 8008802:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008804:	481b      	ldr	r0, [pc, #108]	; (8008874 <USBD_LL_Init+0xac>)
 8008806:	f7f8 fcef 	bl	80011e8 <HAL_PCD_Init>
 800880a:	4603      	mov	r3, r0
 800880c:	2b00      	cmp	r3, #0
 800880e:	d001      	beq.n	8008814 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008810:	f7f7 feb8 	bl	8000584 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800881a:	2318      	movs	r3, #24
 800881c:	2200      	movs	r2, #0
 800881e:	2100      	movs	r1, #0
 8008820:	f7fa fa0e 	bl	8002c40 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800882a:	2358      	movs	r3, #88	; 0x58
 800882c:	2200      	movs	r2, #0
 800882e:	2180      	movs	r1, #128	; 0x80
 8008830:	f7fa fa06 	bl	8002c40 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800883a:	23c0      	movs	r3, #192	; 0xc0
 800883c:	2200      	movs	r2, #0
 800883e:	2181      	movs	r1, #129	; 0x81
 8008840:	f7fa f9fe 	bl	8002c40 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800884a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800884e:	2200      	movs	r2, #0
 8008850:	2101      	movs	r1, #1
 8008852:	f7fa f9f5 	bl	8002c40 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800885c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008860:	2200      	movs	r2, #0
 8008862:	2182      	movs	r1, #130	; 0x82
 8008864:	f7fa f9ec 	bl	8002c40 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008868:	2300      	movs	r3, #0
}
 800886a:	4618      	mov	r0, r3
 800886c:	3708      	adds	r7, #8
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}
 8008872:	bf00      	nop
 8008874:	20000f54 	.word	0x20000f54
 8008878:	40005c00 	.word	0x40005c00

0800887c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b084      	sub	sp, #16
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008884:	2300      	movs	r3, #0
 8008886:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008888:	2300      	movs	r3, #0
 800888a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008892:	4618      	mov	r0, r3
 8008894:	f7f8 fda7 	bl	80013e6 <HAL_PCD_Start>
 8008898:	4603      	mov	r3, r0
 800889a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800889c:	7bfb      	ldrb	r3, [r7, #15]
 800889e:	4618      	mov	r0, r3
 80088a0:	f000 f94e 	bl	8008b40 <USBD_Get_USB_Status>
 80088a4:	4603      	mov	r3, r0
 80088a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	3710      	adds	r7, #16
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}

080088b2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80088b2:	b580      	push	{r7, lr}
 80088b4:	b084      	sub	sp, #16
 80088b6:	af00      	add	r7, sp, #0
 80088b8:	6078      	str	r0, [r7, #4]
 80088ba:	4608      	mov	r0, r1
 80088bc:	4611      	mov	r1, r2
 80088be:	461a      	mov	r2, r3
 80088c0:	4603      	mov	r3, r0
 80088c2:	70fb      	strb	r3, [r7, #3]
 80088c4:	460b      	mov	r3, r1
 80088c6:	70bb      	strb	r3, [r7, #2]
 80088c8:	4613      	mov	r3, r2
 80088ca:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088cc:	2300      	movs	r3, #0
 80088ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088d0:	2300      	movs	r3, #0
 80088d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80088da:	78bb      	ldrb	r3, [r7, #2]
 80088dc:	883a      	ldrh	r2, [r7, #0]
 80088de:	78f9      	ldrb	r1, [r7, #3]
 80088e0:	f7f8 fefc 	bl	80016dc <HAL_PCD_EP_Open>
 80088e4:	4603      	mov	r3, r0
 80088e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088e8:	7bfb      	ldrb	r3, [r7, #15]
 80088ea:	4618      	mov	r0, r3
 80088ec:	f000 f928 	bl	8008b40 <USBD_Get_USB_Status>
 80088f0:	4603      	mov	r3, r0
 80088f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3710      	adds	r7, #16
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}

080088fe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088fe:	b580      	push	{r7, lr}
 8008900:	b084      	sub	sp, #16
 8008902:	af00      	add	r7, sp, #0
 8008904:	6078      	str	r0, [r7, #4]
 8008906:	460b      	mov	r3, r1
 8008908:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800890a:	2300      	movs	r3, #0
 800890c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800890e:	2300      	movs	r3, #0
 8008910:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008918:	78fa      	ldrb	r2, [r7, #3]
 800891a:	4611      	mov	r1, r2
 800891c:	4618      	mov	r0, r3
 800891e:	f7f8 ff3a 	bl	8001796 <HAL_PCD_EP_Close>
 8008922:	4603      	mov	r3, r0
 8008924:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008926:	7bfb      	ldrb	r3, [r7, #15]
 8008928:	4618      	mov	r0, r3
 800892a:	f000 f909 	bl	8008b40 <USBD_Get_USB_Status>
 800892e:	4603      	mov	r3, r0
 8008930:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008932:	7bbb      	ldrb	r3, [r7, #14]
}
 8008934:	4618      	mov	r0, r3
 8008936:	3710      	adds	r7, #16
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}

0800893c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b084      	sub	sp, #16
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
 8008944:	460b      	mov	r3, r1
 8008946:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008948:	2300      	movs	r3, #0
 800894a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800894c:	2300      	movs	r3, #0
 800894e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008956:	78fa      	ldrb	r2, [r7, #3]
 8008958:	4611      	mov	r1, r2
 800895a:	4618      	mov	r0, r3
 800895c:	f7f8 ffe2 	bl	8001924 <HAL_PCD_EP_SetStall>
 8008960:	4603      	mov	r3, r0
 8008962:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008964:	7bfb      	ldrb	r3, [r7, #15]
 8008966:	4618      	mov	r0, r3
 8008968:	f000 f8ea 	bl	8008b40 <USBD_Get_USB_Status>
 800896c:	4603      	mov	r3, r0
 800896e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008970:	7bbb      	ldrb	r3, [r7, #14]
}
 8008972:	4618      	mov	r0, r3
 8008974:	3710      	adds	r7, #16
 8008976:	46bd      	mov	sp, r7
 8008978:	bd80      	pop	{r7, pc}

0800897a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800897a:	b580      	push	{r7, lr}
 800897c:	b084      	sub	sp, #16
 800897e:	af00      	add	r7, sp, #0
 8008980:	6078      	str	r0, [r7, #4]
 8008982:	460b      	mov	r3, r1
 8008984:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008986:	2300      	movs	r3, #0
 8008988:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800898a:	2300      	movs	r3, #0
 800898c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008994:	78fa      	ldrb	r2, [r7, #3]
 8008996:	4611      	mov	r1, r2
 8008998:	4618      	mov	r0, r3
 800899a:	f7f9 f823 	bl	80019e4 <HAL_PCD_EP_ClrStall>
 800899e:	4603      	mov	r3, r0
 80089a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089a2:	7bfb      	ldrb	r3, [r7, #15]
 80089a4:	4618      	mov	r0, r3
 80089a6:	f000 f8cb 	bl	8008b40 <USBD_Get_USB_Status>
 80089aa:	4603      	mov	r3, r0
 80089ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80089b0:	4618      	mov	r0, r3
 80089b2:	3710      	adds	r7, #16
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd80      	pop	{r7, pc}

080089b8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b085      	sub	sp, #20
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
 80089c0:	460b      	mov	r3, r1
 80089c2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80089ca:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80089cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	da0c      	bge.n	80089ee <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80089d4:	78fb      	ldrb	r3, [r7, #3]
 80089d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089da:	68f9      	ldr	r1, [r7, #12]
 80089dc:	1c5a      	adds	r2, r3, #1
 80089de:	4613      	mov	r3, r2
 80089e0:	009b      	lsls	r3, r3, #2
 80089e2:	4413      	add	r3, r2
 80089e4:	00db      	lsls	r3, r3, #3
 80089e6:	440b      	add	r3, r1
 80089e8:	3302      	adds	r3, #2
 80089ea:	781b      	ldrb	r3, [r3, #0]
 80089ec:	e00b      	b.n	8008a06 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80089ee:	78fb      	ldrb	r3, [r7, #3]
 80089f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80089f4:	68f9      	ldr	r1, [r7, #12]
 80089f6:	4613      	mov	r3, r2
 80089f8:	009b      	lsls	r3, r3, #2
 80089fa:	4413      	add	r3, r2
 80089fc:	00db      	lsls	r3, r3, #3
 80089fe:	440b      	add	r3, r1
 8008a00:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008a04:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3714      	adds	r7, #20
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bc80      	pop	{r7}
 8008a0e:	4770      	bx	lr

08008a10 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b084      	sub	sp, #16
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
 8008a18:	460b      	mov	r3, r1
 8008a1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a20:	2300      	movs	r3, #0
 8008a22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a2a:	78fa      	ldrb	r2, [r7, #3]
 8008a2c:	4611      	mov	r1, r2
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f7f8 fe2f 	bl	8001692 <HAL_PCD_SetAddress>
 8008a34:	4603      	mov	r3, r0
 8008a36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a38:	7bfb      	ldrb	r3, [r7, #15]
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f000 f880 	bl	8008b40 <USBD_Get_USB_Status>
 8008a40:	4603      	mov	r3, r0
 8008a42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a44:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3710      	adds	r7, #16
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}

08008a4e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008a4e:	b580      	push	{r7, lr}
 8008a50:	b086      	sub	sp, #24
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	60f8      	str	r0, [r7, #12]
 8008a56:	607a      	str	r2, [r7, #4]
 8008a58:	461a      	mov	r2, r3
 8008a5a:	460b      	mov	r3, r1
 8008a5c:	72fb      	strb	r3, [r7, #11]
 8008a5e:	4613      	mov	r3, r2
 8008a60:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a62:	2300      	movs	r3, #0
 8008a64:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a66:	2300      	movs	r3, #0
 8008a68:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008a70:	893b      	ldrh	r3, [r7, #8]
 8008a72:	7af9      	ldrb	r1, [r7, #11]
 8008a74:	687a      	ldr	r2, [r7, #4]
 8008a76:	f7f8 ff1e 	bl	80018b6 <HAL_PCD_EP_Transmit>
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a7e:	7dfb      	ldrb	r3, [r7, #23]
 8008a80:	4618      	mov	r0, r3
 8008a82:	f000 f85d 	bl	8008b40 <USBD_Get_USB_Status>
 8008a86:	4603      	mov	r3, r0
 8008a88:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008a8a:	7dbb      	ldrb	r3, [r7, #22]
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	3718      	adds	r7, #24
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}

08008a94 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b086      	sub	sp, #24
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	60f8      	str	r0, [r7, #12]
 8008a9c:	607a      	str	r2, [r7, #4]
 8008a9e:	461a      	mov	r2, r3
 8008aa0:	460b      	mov	r3, r1
 8008aa2:	72fb      	strb	r3, [r7, #11]
 8008aa4:	4613      	mov	r3, r2
 8008aa6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008aac:	2300      	movs	r3, #0
 8008aae:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008ab6:	893b      	ldrh	r3, [r7, #8]
 8008ab8:	7af9      	ldrb	r1, [r7, #11]
 8008aba:	687a      	ldr	r2, [r7, #4]
 8008abc:	f7f8 feb3 	bl	8001826 <HAL_PCD_EP_Receive>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ac4:	7dfb      	ldrb	r3, [r7, #23]
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	f000 f83a 	bl	8008b40 <USBD_Get_USB_Status>
 8008acc:	4603      	mov	r3, r0
 8008ace:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008ad0:	7dbb      	ldrb	r3, [r7, #22]
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3718      	adds	r7, #24
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}

08008ada <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ada:	b580      	push	{r7, lr}
 8008adc:	b082      	sub	sp, #8
 8008ade:	af00      	add	r7, sp, #0
 8008ae0:	6078      	str	r0, [r7, #4]
 8008ae2:	460b      	mov	r3, r1
 8008ae4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008aec:	78fa      	ldrb	r2, [r7, #3]
 8008aee:	4611      	mov	r1, r2
 8008af0:	4618      	mov	r0, r3
 8008af2:	f7f8 fec9 	bl	8001888 <HAL_PCD_EP_GetRxCount>
 8008af6:	4603      	mov	r3, r0
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	3708      	adds	r7, #8
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd80      	pop	{r7, pc}

08008b00 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008b00:	b480      	push	{r7}
 8008b02:	b083      	sub	sp, #12
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008b08:	4b02      	ldr	r3, [pc, #8]	; (8008b14 <USBD_static_malloc+0x14>)
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	370c      	adds	r7, #12
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bc80      	pop	{r7}
 8008b12:	4770      	bx	lr
 8008b14:	20001244 	.word	0x20001244

08008b18 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008b18:	b480      	push	{r7}
 8008b1a:	b083      	sub	sp, #12
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]

}
 8008b20:	bf00      	nop
 8008b22:	370c      	adds	r7, #12
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bc80      	pop	{r7}
 8008b28:	4770      	bx	lr

08008b2a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b2a:	b480      	push	{r7}
 8008b2c:	b083      	sub	sp, #12
 8008b2e:	af00      	add	r7, sp, #0
 8008b30:	6078      	str	r0, [r7, #4]
 8008b32:	460b      	mov	r3, r1
 8008b34:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008b36:	bf00      	nop
 8008b38:	370c      	adds	r7, #12
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bc80      	pop	{r7}
 8008b3e:	4770      	bx	lr

08008b40 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b085      	sub	sp, #20
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	4603      	mov	r3, r0
 8008b48:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008b4e:	79fb      	ldrb	r3, [r7, #7]
 8008b50:	2b03      	cmp	r3, #3
 8008b52:	d817      	bhi.n	8008b84 <USBD_Get_USB_Status+0x44>
 8008b54:	a201      	add	r2, pc, #4	; (adr r2, 8008b5c <USBD_Get_USB_Status+0x1c>)
 8008b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b5a:	bf00      	nop
 8008b5c:	08008b6d 	.word	0x08008b6d
 8008b60:	08008b73 	.word	0x08008b73
 8008b64:	08008b79 	.word	0x08008b79
 8008b68:	08008b7f 	.word	0x08008b7f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	73fb      	strb	r3, [r7, #15]
    break;
 8008b70:	e00b      	b.n	8008b8a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008b72:	2302      	movs	r3, #2
 8008b74:	73fb      	strb	r3, [r7, #15]
    break;
 8008b76:	e008      	b.n	8008b8a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008b78:	2301      	movs	r3, #1
 8008b7a:	73fb      	strb	r3, [r7, #15]
    break;
 8008b7c:	e005      	b.n	8008b8a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008b7e:	2302      	movs	r3, #2
 8008b80:	73fb      	strb	r3, [r7, #15]
    break;
 8008b82:	e002      	b.n	8008b8a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008b84:	2302      	movs	r3, #2
 8008b86:	73fb      	strb	r3, [r7, #15]
    break;
 8008b88:	bf00      	nop
  }
  return usb_status;
 8008b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	3714      	adds	r7, #20
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bc80      	pop	{r7}
 8008b94:	4770      	bx	lr
 8008b96:	bf00      	nop

08008b98 <__errno>:
 8008b98:	4b01      	ldr	r3, [pc, #4]	; (8008ba0 <__errno+0x8>)
 8008b9a:	6818      	ldr	r0, [r3, #0]
 8008b9c:	4770      	bx	lr
 8008b9e:	bf00      	nop
 8008ba0:	20000188 	.word	0x20000188

08008ba4 <__libc_init_array>:
 8008ba4:	b570      	push	{r4, r5, r6, lr}
 8008ba6:	2600      	movs	r6, #0
 8008ba8:	4d0c      	ldr	r5, [pc, #48]	; (8008bdc <__libc_init_array+0x38>)
 8008baa:	4c0d      	ldr	r4, [pc, #52]	; (8008be0 <__libc_init_array+0x3c>)
 8008bac:	1b64      	subs	r4, r4, r5
 8008bae:	10a4      	asrs	r4, r4, #2
 8008bb0:	42a6      	cmp	r6, r4
 8008bb2:	d109      	bne.n	8008bc8 <__libc_init_array+0x24>
 8008bb4:	f000 fcac 	bl	8009510 <_init>
 8008bb8:	2600      	movs	r6, #0
 8008bba:	4d0a      	ldr	r5, [pc, #40]	; (8008be4 <__libc_init_array+0x40>)
 8008bbc:	4c0a      	ldr	r4, [pc, #40]	; (8008be8 <__libc_init_array+0x44>)
 8008bbe:	1b64      	subs	r4, r4, r5
 8008bc0:	10a4      	asrs	r4, r4, #2
 8008bc2:	42a6      	cmp	r6, r4
 8008bc4:	d105      	bne.n	8008bd2 <__libc_init_array+0x2e>
 8008bc6:	bd70      	pop	{r4, r5, r6, pc}
 8008bc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bcc:	4798      	blx	r3
 8008bce:	3601      	adds	r6, #1
 8008bd0:	e7ee      	b.n	8008bb0 <__libc_init_array+0xc>
 8008bd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bd6:	4798      	blx	r3
 8008bd8:	3601      	adds	r6, #1
 8008bda:	e7f2      	b.n	8008bc2 <__libc_init_array+0x1e>
 8008bdc:	080095d8 	.word	0x080095d8
 8008be0:	080095d8 	.word	0x080095d8
 8008be4:	080095d8 	.word	0x080095d8
 8008be8:	080095dc 	.word	0x080095dc

08008bec <malloc>:
 8008bec:	4b02      	ldr	r3, [pc, #8]	; (8008bf8 <malloc+0xc>)
 8008bee:	4601      	mov	r1, r0
 8008bf0:	6818      	ldr	r0, [r3, #0]
 8008bf2:	f000 b87b 	b.w	8008cec <_malloc_r>
 8008bf6:	bf00      	nop
 8008bf8:	20000188 	.word	0x20000188

08008bfc <free>:
 8008bfc:	4b02      	ldr	r3, [pc, #8]	; (8008c08 <free+0xc>)
 8008bfe:	4601      	mov	r1, r0
 8008c00:	6818      	ldr	r0, [r3, #0]
 8008c02:	f000 b80b 	b.w	8008c1c <_free_r>
 8008c06:	bf00      	nop
 8008c08:	20000188 	.word	0x20000188

08008c0c <memset>:
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	4402      	add	r2, r0
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d100      	bne.n	8008c16 <memset+0xa>
 8008c14:	4770      	bx	lr
 8008c16:	f803 1b01 	strb.w	r1, [r3], #1
 8008c1a:	e7f9      	b.n	8008c10 <memset+0x4>

08008c1c <_free_r>:
 8008c1c:	b538      	push	{r3, r4, r5, lr}
 8008c1e:	4605      	mov	r5, r0
 8008c20:	2900      	cmp	r1, #0
 8008c22:	d040      	beq.n	8008ca6 <_free_r+0x8a>
 8008c24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c28:	1f0c      	subs	r4, r1, #4
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	bfb8      	it	lt
 8008c2e:	18e4      	addlt	r4, r4, r3
 8008c30:	f000 f900 	bl	8008e34 <__malloc_lock>
 8008c34:	4a1c      	ldr	r2, [pc, #112]	; (8008ca8 <_free_r+0x8c>)
 8008c36:	6813      	ldr	r3, [r2, #0]
 8008c38:	b933      	cbnz	r3, 8008c48 <_free_r+0x2c>
 8008c3a:	6063      	str	r3, [r4, #4]
 8008c3c:	6014      	str	r4, [r2, #0]
 8008c3e:	4628      	mov	r0, r5
 8008c40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c44:	f000 b8fc 	b.w	8008e40 <__malloc_unlock>
 8008c48:	42a3      	cmp	r3, r4
 8008c4a:	d908      	bls.n	8008c5e <_free_r+0x42>
 8008c4c:	6820      	ldr	r0, [r4, #0]
 8008c4e:	1821      	adds	r1, r4, r0
 8008c50:	428b      	cmp	r3, r1
 8008c52:	bf01      	itttt	eq
 8008c54:	6819      	ldreq	r1, [r3, #0]
 8008c56:	685b      	ldreq	r3, [r3, #4]
 8008c58:	1809      	addeq	r1, r1, r0
 8008c5a:	6021      	streq	r1, [r4, #0]
 8008c5c:	e7ed      	b.n	8008c3a <_free_r+0x1e>
 8008c5e:	461a      	mov	r2, r3
 8008c60:	685b      	ldr	r3, [r3, #4]
 8008c62:	b10b      	cbz	r3, 8008c68 <_free_r+0x4c>
 8008c64:	42a3      	cmp	r3, r4
 8008c66:	d9fa      	bls.n	8008c5e <_free_r+0x42>
 8008c68:	6811      	ldr	r1, [r2, #0]
 8008c6a:	1850      	adds	r0, r2, r1
 8008c6c:	42a0      	cmp	r0, r4
 8008c6e:	d10b      	bne.n	8008c88 <_free_r+0x6c>
 8008c70:	6820      	ldr	r0, [r4, #0]
 8008c72:	4401      	add	r1, r0
 8008c74:	1850      	adds	r0, r2, r1
 8008c76:	4283      	cmp	r3, r0
 8008c78:	6011      	str	r1, [r2, #0]
 8008c7a:	d1e0      	bne.n	8008c3e <_free_r+0x22>
 8008c7c:	6818      	ldr	r0, [r3, #0]
 8008c7e:	685b      	ldr	r3, [r3, #4]
 8008c80:	4401      	add	r1, r0
 8008c82:	6011      	str	r1, [r2, #0]
 8008c84:	6053      	str	r3, [r2, #4]
 8008c86:	e7da      	b.n	8008c3e <_free_r+0x22>
 8008c88:	d902      	bls.n	8008c90 <_free_r+0x74>
 8008c8a:	230c      	movs	r3, #12
 8008c8c:	602b      	str	r3, [r5, #0]
 8008c8e:	e7d6      	b.n	8008c3e <_free_r+0x22>
 8008c90:	6820      	ldr	r0, [r4, #0]
 8008c92:	1821      	adds	r1, r4, r0
 8008c94:	428b      	cmp	r3, r1
 8008c96:	bf01      	itttt	eq
 8008c98:	6819      	ldreq	r1, [r3, #0]
 8008c9a:	685b      	ldreq	r3, [r3, #4]
 8008c9c:	1809      	addeq	r1, r1, r0
 8008c9e:	6021      	streq	r1, [r4, #0]
 8008ca0:	6063      	str	r3, [r4, #4]
 8008ca2:	6054      	str	r4, [r2, #4]
 8008ca4:	e7cb      	b.n	8008c3e <_free_r+0x22>
 8008ca6:	bd38      	pop	{r3, r4, r5, pc}
 8008ca8:	20001464 	.word	0x20001464

08008cac <sbrk_aligned>:
 8008cac:	b570      	push	{r4, r5, r6, lr}
 8008cae:	4e0e      	ldr	r6, [pc, #56]	; (8008ce8 <sbrk_aligned+0x3c>)
 8008cb0:	460c      	mov	r4, r1
 8008cb2:	6831      	ldr	r1, [r6, #0]
 8008cb4:	4605      	mov	r5, r0
 8008cb6:	b911      	cbnz	r1, 8008cbe <sbrk_aligned+0x12>
 8008cb8:	f000 f88c 	bl	8008dd4 <_sbrk_r>
 8008cbc:	6030      	str	r0, [r6, #0]
 8008cbe:	4621      	mov	r1, r4
 8008cc0:	4628      	mov	r0, r5
 8008cc2:	f000 f887 	bl	8008dd4 <_sbrk_r>
 8008cc6:	1c43      	adds	r3, r0, #1
 8008cc8:	d00a      	beq.n	8008ce0 <sbrk_aligned+0x34>
 8008cca:	1cc4      	adds	r4, r0, #3
 8008ccc:	f024 0403 	bic.w	r4, r4, #3
 8008cd0:	42a0      	cmp	r0, r4
 8008cd2:	d007      	beq.n	8008ce4 <sbrk_aligned+0x38>
 8008cd4:	1a21      	subs	r1, r4, r0
 8008cd6:	4628      	mov	r0, r5
 8008cd8:	f000 f87c 	bl	8008dd4 <_sbrk_r>
 8008cdc:	3001      	adds	r0, #1
 8008cde:	d101      	bne.n	8008ce4 <sbrk_aligned+0x38>
 8008ce0:	f04f 34ff 	mov.w	r4, #4294967295
 8008ce4:	4620      	mov	r0, r4
 8008ce6:	bd70      	pop	{r4, r5, r6, pc}
 8008ce8:	20001468 	.word	0x20001468

08008cec <_malloc_r>:
 8008cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cf0:	1ccd      	adds	r5, r1, #3
 8008cf2:	f025 0503 	bic.w	r5, r5, #3
 8008cf6:	3508      	adds	r5, #8
 8008cf8:	2d0c      	cmp	r5, #12
 8008cfa:	bf38      	it	cc
 8008cfc:	250c      	movcc	r5, #12
 8008cfe:	2d00      	cmp	r5, #0
 8008d00:	4607      	mov	r7, r0
 8008d02:	db01      	blt.n	8008d08 <_malloc_r+0x1c>
 8008d04:	42a9      	cmp	r1, r5
 8008d06:	d905      	bls.n	8008d14 <_malloc_r+0x28>
 8008d08:	230c      	movs	r3, #12
 8008d0a:	2600      	movs	r6, #0
 8008d0c:	603b      	str	r3, [r7, #0]
 8008d0e:	4630      	mov	r0, r6
 8008d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d14:	4e2e      	ldr	r6, [pc, #184]	; (8008dd0 <_malloc_r+0xe4>)
 8008d16:	f000 f88d 	bl	8008e34 <__malloc_lock>
 8008d1a:	6833      	ldr	r3, [r6, #0]
 8008d1c:	461c      	mov	r4, r3
 8008d1e:	bb34      	cbnz	r4, 8008d6e <_malloc_r+0x82>
 8008d20:	4629      	mov	r1, r5
 8008d22:	4638      	mov	r0, r7
 8008d24:	f7ff ffc2 	bl	8008cac <sbrk_aligned>
 8008d28:	1c43      	adds	r3, r0, #1
 8008d2a:	4604      	mov	r4, r0
 8008d2c:	d14d      	bne.n	8008dca <_malloc_r+0xde>
 8008d2e:	6834      	ldr	r4, [r6, #0]
 8008d30:	4626      	mov	r6, r4
 8008d32:	2e00      	cmp	r6, #0
 8008d34:	d140      	bne.n	8008db8 <_malloc_r+0xcc>
 8008d36:	6823      	ldr	r3, [r4, #0]
 8008d38:	4631      	mov	r1, r6
 8008d3a:	4638      	mov	r0, r7
 8008d3c:	eb04 0803 	add.w	r8, r4, r3
 8008d40:	f000 f848 	bl	8008dd4 <_sbrk_r>
 8008d44:	4580      	cmp	r8, r0
 8008d46:	d13a      	bne.n	8008dbe <_malloc_r+0xd2>
 8008d48:	6821      	ldr	r1, [r4, #0]
 8008d4a:	3503      	adds	r5, #3
 8008d4c:	1a6d      	subs	r5, r5, r1
 8008d4e:	f025 0503 	bic.w	r5, r5, #3
 8008d52:	3508      	adds	r5, #8
 8008d54:	2d0c      	cmp	r5, #12
 8008d56:	bf38      	it	cc
 8008d58:	250c      	movcc	r5, #12
 8008d5a:	4638      	mov	r0, r7
 8008d5c:	4629      	mov	r1, r5
 8008d5e:	f7ff ffa5 	bl	8008cac <sbrk_aligned>
 8008d62:	3001      	adds	r0, #1
 8008d64:	d02b      	beq.n	8008dbe <_malloc_r+0xd2>
 8008d66:	6823      	ldr	r3, [r4, #0]
 8008d68:	442b      	add	r3, r5
 8008d6a:	6023      	str	r3, [r4, #0]
 8008d6c:	e00e      	b.n	8008d8c <_malloc_r+0xa0>
 8008d6e:	6822      	ldr	r2, [r4, #0]
 8008d70:	1b52      	subs	r2, r2, r5
 8008d72:	d41e      	bmi.n	8008db2 <_malloc_r+0xc6>
 8008d74:	2a0b      	cmp	r2, #11
 8008d76:	d916      	bls.n	8008da6 <_malloc_r+0xba>
 8008d78:	1961      	adds	r1, r4, r5
 8008d7a:	42a3      	cmp	r3, r4
 8008d7c:	6025      	str	r5, [r4, #0]
 8008d7e:	bf18      	it	ne
 8008d80:	6059      	strne	r1, [r3, #4]
 8008d82:	6863      	ldr	r3, [r4, #4]
 8008d84:	bf08      	it	eq
 8008d86:	6031      	streq	r1, [r6, #0]
 8008d88:	5162      	str	r2, [r4, r5]
 8008d8a:	604b      	str	r3, [r1, #4]
 8008d8c:	4638      	mov	r0, r7
 8008d8e:	f104 060b 	add.w	r6, r4, #11
 8008d92:	f000 f855 	bl	8008e40 <__malloc_unlock>
 8008d96:	f026 0607 	bic.w	r6, r6, #7
 8008d9a:	1d23      	adds	r3, r4, #4
 8008d9c:	1af2      	subs	r2, r6, r3
 8008d9e:	d0b6      	beq.n	8008d0e <_malloc_r+0x22>
 8008da0:	1b9b      	subs	r3, r3, r6
 8008da2:	50a3      	str	r3, [r4, r2]
 8008da4:	e7b3      	b.n	8008d0e <_malloc_r+0x22>
 8008da6:	6862      	ldr	r2, [r4, #4]
 8008da8:	42a3      	cmp	r3, r4
 8008daa:	bf0c      	ite	eq
 8008dac:	6032      	streq	r2, [r6, #0]
 8008dae:	605a      	strne	r2, [r3, #4]
 8008db0:	e7ec      	b.n	8008d8c <_malloc_r+0xa0>
 8008db2:	4623      	mov	r3, r4
 8008db4:	6864      	ldr	r4, [r4, #4]
 8008db6:	e7b2      	b.n	8008d1e <_malloc_r+0x32>
 8008db8:	4634      	mov	r4, r6
 8008dba:	6876      	ldr	r6, [r6, #4]
 8008dbc:	e7b9      	b.n	8008d32 <_malloc_r+0x46>
 8008dbe:	230c      	movs	r3, #12
 8008dc0:	4638      	mov	r0, r7
 8008dc2:	603b      	str	r3, [r7, #0]
 8008dc4:	f000 f83c 	bl	8008e40 <__malloc_unlock>
 8008dc8:	e7a1      	b.n	8008d0e <_malloc_r+0x22>
 8008dca:	6025      	str	r5, [r4, #0]
 8008dcc:	e7de      	b.n	8008d8c <_malloc_r+0xa0>
 8008dce:	bf00      	nop
 8008dd0:	20001464 	.word	0x20001464

08008dd4 <_sbrk_r>:
 8008dd4:	b538      	push	{r3, r4, r5, lr}
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	4d05      	ldr	r5, [pc, #20]	; (8008df0 <_sbrk_r+0x1c>)
 8008dda:	4604      	mov	r4, r0
 8008ddc:	4608      	mov	r0, r1
 8008dde:	602b      	str	r3, [r5, #0]
 8008de0:	f7f7 fcd0 	bl	8000784 <_sbrk>
 8008de4:	1c43      	adds	r3, r0, #1
 8008de6:	d102      	bne.n	8008dee <_sbrk_r+0x1a>
 8008de8:	682b      	ldr	r3, [r5, #0]
 8008dea:	b103      	cbz	r3, 8008dee <_sbrk_r+0x1a>
 8008dec:	6023      	str	r3, [r4, #0]
 8008dee:	bd38      	pop	{r3, r4, r5, pc}
 8008df0:	2000146c 	.word	0x2000146c

08008df4 <siprintf>:
 8008df4:	b40e      	push	{r1, r2, r3}
 8008df6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008dfa:	b500      	push	{lr}
 8008dfc:	b09c      	sub	sp, #112	; 0x70
 8008dfe:	ab1d      	add	r3, sp, #116	; 0x74
 8008e00:	9002      	str	r0, [sp, #8]
 8008e02:	9006      	str	r0, [sp, #24]
 8008e04:	9107      	str	r1, [sp, #28]
 8008e06:	9104      	str	r1, [sp, #16]
 8008e08:	4808      	ldr	r0, [pc, #32]	; (8008e2c <siprintf+0x38>)
 8008e0a:	4909      	ldr	r1, [pc, #36]	; (8008e30 <siprintf+0x3c>)
 8008e0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e10:	9105      	str	r1, [sp, #20]
 8008e12:	6800      	ldr	r0, [r0, #0]
 8008e14:	a902      	add	r1, sp, #8
 8008e16:	9301      	str	r3, [sp, #4]
 8008e18:	f000 f874 	bl	8008f04 <_svfiprintf_r>
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	9b02      	ldr	r3, [sp, #8]
 8008e20:	701a      	strb	r2, [r3, #0]
 8008e22:	b01c      	add	sp, #112	; 0x70
 8008e24:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e28:	b003      	add	sp, #12
 8008e2a:	4770      	bx	lr
 8008e2c:	20000188 	.word	0x20000188
 8008e30:	ffff0208 	.word	0xffff0208

08008e34 <__malloc_lock>:
 8008e34:	4801      	ldr	r0, [pc, #4]	; (8008e3c <__malloc_lock+0x8>)
 8008e36:	f000 bafb 	b.w	8009430 <__retarget_lock_acquire_recursive>
 8008e3a:	bf00      	nop
 8008e3c:	20001470 	.word	0x20001470

08008e40 <__malloc_unlock>:
 8008e40:	4801      	ldr	r0, [pc, #4]	; (8008e48 <__malloc_unlock+0x8>)
 8008e42:	f000 baf6 	b.w	8009432 <__retarget_lock_release_recursive>
 8008e46:	bf00      	nop
 8008e48:	20001470 	.word	0x20001470

08008e4c <__ssputs_r>:
 8008e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e50:	688e      	ldr	r6, [r1, #8]
 8008e52:	4682      	mov	sl, r0
 8008e54:	429e      	cmp	r6, r3
 8008e56:	460c      	mov	r4, r1
 8008e58:	4690      	mov	r8, r2
 8008e5a:	461f      	mov	r7, r3
 8008e5c:	d838      	bhi.n	8008ed0 <__ssputs_r+0x84>
 8008e5e:	898a      	ldrh	r2, [r1, #12]
 8008e60:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008e64:	d032      	beq.n	8008ecc <__ssputs_r+0x80>
 8008e66:	6825      	ldr	r5, [r4, #0]
 8008e68:	6909      	ldr	r1, [r1, #16]
 8008e6a:	3301      	adds	r3, #1
 8008e6c:	eba5 0901 	sub.w	r9, r5, r1
 8008e70:	6965      	ldr	r5, [r4, #20]
 8008e72:	444b      	add	r3, r9
 8008e74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008e78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008e7c:	106d      	asrs	r5, r5, #1
 8008e7e:	429d      	cmp	r5, r3
 8008e80:	bf38      	it	cc
 8008e82:	461d      	movcc	r5, r3
 8008e84:	0553      	lsls	r3, r2, #21
 8008e86:	d531      	bpl.n	8008eec <__ssputs_r+0xa0>
 8008e88:	4629      	mov	r1, r5
 8008e8a:	f7ff ff2f 	bl	8008cec <_malloc_r>
 8008e8e:	4606      	mov	r6, r0
 8008e90:	b950      	cbnz	r0, 8008ea8 <__ssputs_r+0x5c>
 8008e92:	230c      	movs	r3, #12
 8008e94:	f04f 30ff 	mov.w	r0, #4294967295
 8008e98:	f8ca 3000 	str.w	r3, [sl]
 8008e9c:	89a3      	ldrh	r3, [r4, #12]
 8008e9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ea2:	81a3      	strh	r3, [r4, #12]
 8008ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ea8:	464a      	mov	r2, r9
 8008eaa:	6921      	ldr	r1, [r4, #16]
 8008eac:	f000 fad0 	bl	8009450 <memcpy>
 8008eb0:	89a3      	ldrh	r3, [r4, #12]
 8008eb2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008eb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008eba:	81a3      	strh	r3, [r4, #12]
 8008ebc:	6126      	str	r6, [r4, #16]
 8008ebe:	444e      	add	r6, r9
 8008ec0:	6026      	str	r6, [r4, #0]
 8008ec2:	463e      	mov	r6, r7
 8008ec4:	6165      	str	r5, [r4, #20]
 8008ec6:	eba5 0509 	sub.w	r5, r5, r9
 8008eca:	60a5      	str	r5, [r4, #8]
 8008ecc:	42be      	cmp	r6, r7
 8008ece:	d900      	bls.n	8008ed2 <__ssputs_r+0x86>
 8008ed0:	463e      	mov	r6, r7
 8008ed2:	4632      	mov	r2, r6
 8008ed4:	4641      	mov	r1, r8
 8008ed6:	6820      	ldr	r0, [r4, #0]
 8008ed8:	f000 fac8 	bl	800946c <memmove>
 8008edc:	68a3      	ldr	r3, [r4, #8]
 8008ede:	2000      	movs	r0, #0
 8008ee0:	1b9b      	subs	r3, r3, r6
 8008ee2:	60a3      	str	r3, [r4, #8]
 8008ee4:	6823      	ldr	r3, [r4, #0]
 8008ee6:	4433      	add	r3, r6
 8008ee8:	6023      	str	r3, [r4, #0]
 8008eea:	e7db      	b.n	8008ea4 <__ssputs_r+0x58>
 8008eec:	462a      	mov	r2, r5
 8008eee:	f000 fad7 	bl	80094a0 <_realloc_r>
 8008ef2:	4606      	mov	r6, r0
 8008ef4:	2800      	cmp	r0, #0
 8008ef6:	d1e1      	bne.n	8008ebc <__ssputs_r+0x70>
 8008ef8:	4650      	mov	r0, sl
 8008efa:	6921      	ldr	r1, [r4, #16]
 8008efc:	f7ff fe8e 	bl	8008c1c <_free_r>
 8008f00:	e7c7      	b.n	8008e92 <__ssputs_r+0x46>
	...

08008f04 <_svfiprintf_r>:
 8008f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f08:	4698      	mov	r8, r3
 8008f0a:	898b      	ldrh	r3, [r1, #12]
 8008f0c:	4607      	mov	r7, r0
 8008f0e:	061b      	lsls	r3, r3, #24
 8008f10:	460d      	mov	r5, r1
 8008f12:	4614      	mov	r4, r2
 8008f14:	b09d      	sub	sp, #116	; 0x74
 8008f16:	d50e      	bpl.n	8008f36 <_svfiprintf_r+0x32>
 8008f18:	690b      	ldr	r3, [r1, #16]
 8008f1a:	b963      	cbnz	r3, 8008f36 <_svfiprintf_r+0x32>
 8008f1c:	2140      	movs	r1, #64	; 0x40
 8008f1e:	f7ff fee5 	bl	8008cec <_malloc_r>
 8008f22:	6028      	str	r0, [r5, #0]
 8008f24:	6128      	str	r0, [r5, #16]
 8008f26:	b920      	cbnz	r0, 8008f32 <_svfiprintf_r+0x2e>
 8008f28:	230c      	movs	r3, #12
 8008f2a:	603b      	str	r3, [r7, #0]
 8008f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f30:	e0d1      	b.n	80090d6 <_svfiprintf_r+0x1d2>
 8008f32:	2340      	movs	r3, #64	; 0x40
 8008f34:	616b      	str	r3, [r5, #20]
 8008f36:	2300      	movs	r3, #0
 8008f38:	9309      	str	r3, [sp, #36]	; 0x24
 8008f3a:	2320      	movs	r3, #32
 8008f3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f40:	2330      	movs	r3, #48	; 0x30
 8008f42:	f04f 0901 	mov.w	r9, #1
 8008f46:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f4a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80090f0 <_svfiprintf_r+0x1ec>
 8008f4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f52:	4623      	mov	r3, r4
 8008f54:	469a      	mov	sl, r3
 8008f56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f5a:	b10a      	cbz	r2, 8008f60 <_svfiprintf_r+0x5c>
 8008f5c:	2a25      	cmp	r2, #37	; 0x25
 8008f5e:	d1f9      	bne.n	8008f54 <_svfiprintf_r+0x50>
 8008f60:	ebba 0b04 	subs.w	fp, sl, r4
 8008f64:	d00b      	beq.n	8008f7e <_svfiprintf_r+0x7a>
 8008f66:	465b      	mov	r3, fp
 8008f68:	4622      	mov	r2, r4
 8008f6a:	4629      	mov	r1, r5
 8008f6c:	4638      	mov	r0, r7
 8008f6e:	f7ff ff6d 	bl	8008e4c <__ssputs_r>
 8008f72:	3001      	adds	r0, #1
 8008f74:	f000 80aa 	beq.w	80090cc <_svfiprintf_r+0x1c8>
 8008f78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f7a:	445a      	add	r2, fp
 8008f7c:	9209      	str	r2, [sp, #36]	; 0x24
 8008f7e:	f89a 3000 	ldrb.w	r3, [sl]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	f000 80a2 	beq.w	80090cc <_svfiprintf_r+0x1c8>
 8008f88:	2300      	movs	r3, #0
 8008f8a:	f04f 32ff 	mov.w	r2, #4294967295
 8008f8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f92:	f10a 0a01 	add.w	sl, sl, #1
 8008f96:	9304      	str	r3, [sp, #16]
 8008f98:	9307      	str	r3, [sp, #28]
 8008f9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f9e:	931a      	str	r3, [sp, #104]	; 0x68
 8008fa0:	4654      	mov	r4, sl
 8008fa2:	2205      	movs	r2, #5
 8008fa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fa8:	4851      	ldr	r0, [pc, #324]	; (80090f0 <_svfiprintf_r+0x1ec>)
 8008faa:	f000 fa43 	bl	8009434 <memchr>
 8008fae:	9a04      	ldr	r2, [sp, #16]
 8008fb0:	b9d8      	cbnz	r0, 8008fea <_svfiprintf_r+0xe6>
 8008fb2:	06d0      	lsls	r0, r2, #27
 8008fb4:	bf44      	itt	mi
 8008fb6:	2320      	movmi	r3, #32
 8008fb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fbc:	0711      	lsls	r1, r2, #28
 8008fbe:	bf44      	itt	mi
 8008fc0:	232b      	movmi	r3, #43	; 0x2b
 8008fc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fc6:	f89a 3000 	ldrb.w	r3, [sl]
 8008fca:	2b2a      	cmp	r3, #42	; 0x2a
 8008fcc:	d015      	beq.n	8008ffa <_svfiprintf_r+0xf6>
 8008fce:	4654      	mov	r4, sl
 8008fd0:	2000      	movs	r0, #0
 8008fd2:	f04f 0c0a 	mov.w	ip, #10
 8008fd6:	9a07      	ldr	r2, [sp, #28]
 8008fd8:	4621      	mov	r1, r4
 8008fda:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008fde:	3b30      	subs	r3, #48	; 0x30
 8008fe0:	2b09      	cmp	r3, #9
 8008fe2:	d94e      	bls.n	8009082 <_svfiprintf_r+0x17e>
 8008fe4:	b1b0      	cbz	r0, 8009014 <_svfiprintf_r+0x110>
 8008fe6:	9207      	str	r2, [sp, #28]
 8008fe8:	e014      	b.n	8009014 <_svfiprintf_r+0x110>
 8008fea:	eba0 0308 	sub.w	r3, r0, r8
 8008fee:	fa09 f303 	lsl.w	r3, r9, r3
 8008ff2:	4313      	orrs	r3, r2
 8008ff4:	46a2      	mov	sl, r4
 8008ff6:	9304      	str	r3, [sp, #16]
 8008ff8:	e7d2      	b.n	8008fa0 <_svfiprintf_r+0x9c>
 8008ffa:	9b03      	ldr	r3, [sp, #12]
 8008ffc:	1d19      	adds	r1, r3, #4
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	9103      	str	r1, [sp, #12]
 8009002:	2b00      	cmp	r3, #0
 8009004:	bfbb      	ittet	lt
 8009006:	425b      	neglt	r3, r3
 8009008:	f042 0202 	orrlt.w	r2, r2, #2
 800900c:	9307      	strge	r3, [sp, #28]
 800900e:	9307      	strlt	r3, [sp, #28]
 8009010:	bfb8      	it	lt
 8009012:	9204      	strlt	r2, [sp, #16]
 8009014:	7823      	ldrb	r3, [r4, #0]
 8009016:	2b2e      	cmp	r3, #46	; 0x2e
 8009018:	d10c      	bne.n	8009034 <_svfiprintf_r+0x130>
 800901a:	7863      	ldrb	r3, [r4, #1]
 800901c:	2b2a      	cmp	r3, #42	; 0x2a
 800901e:	d135      	bne.n	800908c <_svfiprintf_r+0x188>
 8009020:	9b03      	ldr	r3, [sp, #12]
 8009022:	3402      	adds	r4, #2
 8009024:	1d1a      	adds	r2, r3, #4
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	9203      	str	r2, [sp, #12]
 800902a:	2b00      	cmp	r3, #0
 800902c:	bfb8      	it	lt
 800902e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009032:	9305      	str	r3, [sp, #20]
 8009034:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80090f4 <_svfiprintf_r+0x1f0>
 8009038:	2203      	movs	r2, #3
 800903a:	4650      	mov	r0, sl
 800903c:	7821      	ldrb	r1, [r4, #0]
 800903e:	f000 f9f9 	bl	8009434 <memchr>
 8009042:	b140      	cbz	r0, 8009056 <_svfiprintf_r+0x152>
 8009044:	2340      	movs	r3, #64	; 0x40
 8009046:	eba0 000a 	sub.w	r0, r0, sl
 800904a:	fa03 f000 	lsl.w	r0, r3, r0
 800904e:	9b04      	ldr	r3, [sp, #16]
 8009050:	3401      	adds	r4, #1
 8009052:	4303      	orrs	r3, r0
 8009054:	9304      	str	r3, [sp, #16]
 8009056:	f814 1b01 	ldrb.w	r1, [r4], #1
 800905a:	2206      	movs	r2, #6
 800905c:	4826      	ldr	r0, [pc, #152]	; (80090f8 <_svfiprintf_r+0x1f4>)
 800905e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009062:	f000 f9e7 	bl	8009434 <memchr>
 8009066:	2800      	cmp	r0, #0
 8009068:	d038      	beq.n	80090dc <_svfiprintf_r+0x1d8>
 800906a:	4b24      	ldr	r3, [pc, #144]	; (80090fc <_svfiprintf_r+0x1f8>)
 800906c:	bb1b      	cbnz	r3, 80090b6 <_svfiprintf_r+0x1b2>
 800906e:	9b03      	ldr	r3, [sp, #12]
 8009070:	3307      	adds	r3, #7
 8009072:	f023 0307 	bic.w	r3, r3, #7
 8009076:	3308      	adds	r3, #8
 8009078:	9303      	str	r3, [sp, #12]
 800907a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800907c:	4433      	add	r3, r6
 800907e:	9309      	str	r3, [sp, #36]	; 0x24
 8009080:	e767      	b.n	8008f52 <_svfiprintf_r+0x4e>
 8009082:	460c      	mov	r4, r1
 8009084:	2001      	movs	r0, #1
 8009086:	fb0c 3202 	mla	r2, ip, r2, r3
 800908a:	e7a5      	b.n	8008fd8 <_svfiprintf_r+0xd4>
 800908c:	2300      	movs	r3, #0
 800908e:	f04f 0c0a 	mov.w	ip, #10
 8009092:	4619      	mov	r1, r3
 8009094:	3401      	adds	r4, #1
 8009096:	9305      	str	r3, [sp, #20]
 8009098:	4620      	mov	r0, r4
 800909a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800909e:	3a30      	subs	r2, #48	; 0x30
 80090a0:	2a09      	cmp	r2, #9
 80090a2:	d903      	bls.n	80090ac <_svfiprintf_r+0x1a8>
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d0c5      	beq.n	8009034 <_svfiprintf_r+0x130>
 80090a8:	9105      	str	r1, [sp, #20]
 80090aa:	e7c3      	b.n	8009034 <_svfiprintf_r+0x130>
 80090ac:	4604      	mov	r4, r0
 80090ae:	2301      	movs	r3, #1
 80090b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80090b4:	e7f0      	b.n	8009098 <_svfiprintf_r+0x194>
 80090b6:	ab03      	add	r3, sp, #12
 80090b8:	9300      	str	r3, [sp, #0]
 80090ba:	462a      	mov	r2, r5
 80090bc:	4638      	mov	r0, r7
 80090be:	4b10      	ldr	r3, [pc, #64]	; (8009100 <_svfiprintf_r+0x1fc>)
 80090c0:	a904      	add	r1, sp, #16
 80090c2:	f3af 8000 	nop.w
 80090c6:	1c42      	adds	r2, r0, #1
 80090c8:	4606      	mov	r6, r0
 80090ca:	d1d6      	bne.n	800907a <_svfiprintf_r+0x176>
 80090cc:	89ab      	ldrh	r3, [r5, #12]
 80090ce:	065b      	lsls	r3, r3, #25
 80090d0:	f53f af2c 	bmi.w	8008f2c <_svfiprintf_r+0x28>
 80090d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090d6:	b01d      	add	sp, #116	; 0x74
 80090d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090dc:	ab03      	add	r3, sp, #12
 80090de:	9300      	str	r3, [sp, #0]
 80090e0:	462a      	mov	r2, r5
 80090e2:	4638      	mov	r0, r7
 80090e4:	4b06      	ldr	r3, [pc, #24]	; (8009100 <_svfiprintf_r+0x1fc>)
 80090e6:	a904      	add	r1, sp, #16
 80090e8:	f000 f87c 	bl	80091e4 <_printf_i>
 80090ec:	e7eb      	b.n	80090c6 <_svfiprintf_r+0x1c2>
 80090ee:	bf00      	nop
 80090f0:	080095a2 	.word	0x080095a2
 80090f4:	080095a8 	.word	0x080095a8
 80090f8:	080095ac 	.word	0x080095ac
 80090fc:	00000000 	.word	0x00000000
 8009100:	08008e4d 	.word	0x08008e4d

08009104 <_printf_common>:
 8009104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009108:	4616      	mov	r6, r2
 800910a:	4699      	mov	r9, r3
 800910c:	688a      	ldr	r2, [r1, #8]
 800910e:	690b      	ldr	r3, [r1, #16]
 8009110:	4607      	mov	r7, r0
 8009112:	4293      	cmp	r3, r2
 8009114:	bfb8      	it	lt
 8009116:	4613      	movlt	r3, r2
 8009118:	6033      	str	r3, [r6, #0]
 800911a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800911e:	460c      	mov	r4, r1
 8009120:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009124:	b10a      	cbz	r2, 800912a <_printf_common+0x26>
 8009126:	3301      	adds	r3, #1
 8009128:	6033      	str	r3, [r6, #0]
 800912a:	6823      	ldr	r3, [r4, #0]
 800912c:	0699      	lsls	r1, r3, #26
 800912e:	bf42      	ittt	mi
 8009130:	6833      	ldrmi	r3, [r6, #0]
 8009132:	3302      	addmi	r3, #2
 8009134:	6033      	strmi	r3, [r6, #0]
 8009136:	6825      	ldr	r5, [r4, #0]
 8009138:	f015 0506 	ands.w	r5, r5, #6
 800913c:	d106      	bne.n	800914c <_printf_common+0x48>
 800913e:	f104 0a19 	add.w	sl, r4, #25
 8009142:	68e3      	ldr	r3, [r4, #12]
 8009144:	6832      	ldr	r2, [r6, #0]
 8009146:	1a9b      	subs	r3, r3, r2
 8009148:	42ab      	cmp	r3, r5
 800914a:	dc28      	bgt.n	800919e <_printf_common+0x9a>
 800914c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009150:	1e13      	subs	r3, r2, #0
 8009152:	6822      	ldr	r2, [r4, #0]
 8009154:	bf18      	it	ne
 8009156:	2301      	movne	r3, #1
 8009158:	0692      	lsls	r2, r2, #26
 800915a:	d42d      	bmi.n	80091b8 <_printf_common+0xb4>
 800915c:	4649      	mov	r1, r9
 800915e:	4638      	mov	r0, r7
 8009160:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009164:	47c0      	blx	r8
 8009166:	3001      	adds	r0, #1
 8009168:	d020      	beq.n	80091ac <_printf_common+0xa8>
 800916a:	6823      	ldr	r3, [r4, #0]
 800916c:	68e5      	ldr	r5, [r4, #12]
 800916e:	f003 0306 	and.w	r3, r3, #6
 8009172:	2b04      	cmp	r3, #4
 8009174:	bf18      	it	ne
 8009176:	2500      	movne	r5, #0
 8009178:	6832      	ldr	r2, [r6, #0]
 800917a:	f04f 0600 	mov.w	r6, #0
 800917e:	68a3      	ldr	r3, [r4, #8]
 8009180:	bf08      	it	eq
 8009182:	1aad      	subeq	r5, r5, r2
 8009184:	6922      	ldr	r2, [r4, #16]
 8009186:	bf08      	it	eq
 8009188:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800918c:	4293      	cmp	r3, r2
 800918e:	bfc4      	itt	gt
 8009190:	1a9b      	subgt	r3, r3, r2
 8009192:	18ed      	addgt	r5, r5, r3
 8009194:	341a      	adds	r4, #26
 8009196:	42b5      	cmp	r5, r6
 8009198:	d11a      	bne.n	80091d0 <_printf_common+0xcc>
 800919a:	2000      	movs	r0, #0
 800919c:	e008      	b.n	80091b0 <_printf_common+0xac>
 800919e:	2301      	movs	r3, #1
 80091a0:	4652      	mov	r2, sl
 80091a2:	4649      	mov	r1, r9
 80091a4:	4638      	mov	r0, r7
 80091a6:	47c0      	blx	r8
 80091a8:	3001      	adds	r0, #1
 80091aa:	d103      	bne.n	80091b4 <_printf_common+0xb0>
 80091ac:	f04f 30ff 	mov.w	r0, #4294967295
 80091b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091b4:	3501      	adds	r5, #1
 80091b6:	e7c4      	b.n	8009142 <_printf_common+0x3e>
 80091b8:	2030      	movs	r0, #48	; 0x30
 80091ba:	18e1      	adds	r1, r4, r3
 80091bc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80091c0:	1c5a      	adds	r2, r3, #1
 80091c2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80091c6:	4422      	add	r2, r4
 80091c8:	3302      	adds	r3, #2
 80091ca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80091ce:	e7c5      	b.n	800915c <_printf_common+0x58>
 80091d0:	2301      	movs	r3, #1
 80091d2:	4622      	mov	r2, r4
 80091d4:	4649      	mov	r1, r9
 80091d6:	4638      	mov	r0, r7
 80091d8:	47c0      	blx	r8
 80091da:	3001      	adds	r0, #1
 80091dc:	d0e6      	beq.n	80091ac <_printf_common+0xa8>
 80091de:	3601      	adds	r6, #1
 80091e0:	e7d9      	b.n	8009196 <_printf_common+0x92>
	...

080091e4 <_printf_i>:
 80091e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80091e8:	7e0f      	ldrb	r7, [r1, #24]
 80091ea:	4691      	mov	r9, r2
 80091ec:	2f78      	cmp	r7, #120	; 0x78
 80091ee:	4680      	mov	r8, r0
 80091f0:	460c      	mov	r4, r1
 80091f2:	469a      	mov	sl, r3
 80091f4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80091f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80091fa:	d807      	bhi.n	800920c <_printf_i+0x28>
 80091fc:	2f62      	cmp	r7, #98	; 0x62
 80091fe:	d80a      	bhi.n	8009216 <_printf_i+0x32>
 8009200:	2f00      	cmp	r7, #0
 8009202:	f000 80d9 	beq.w	80093b8 <_printf_i+0x1d4>
 8009206:	2f58      	cmp	r7, #88	; 0x58
 8009208:	f000 80a4 	beq.w	8009354 <_printf_i+0x170>
 800920c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009210:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009214:	e03a      	b.n	800928c <_printf_i+0xa8>
 8009216:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800921a:	2b15      	cmp	r3, #21
 800921c:	d8f6      	bhi.n	800920c <_printf_i+0x28>
 800921e:	a101      	add	r1, pc, #4	; (adr r1, 8009224 <_printf_i+0x40>)
 8009220:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009224:	0800927d 	.word	0x0800927d
 8009228:	08009291 	.word	0x08009291
 800922c:	0800920d 	.word	0x0800920d
 8009230:	0800920d 	.word	0x0800920d
 8009234:	0800920d 	.word	0x0800920d
 8009238:	0800920d 	.word	0x0800920d
 800923c:	08009291 	.word	0x08009291
 8009240:	0800920d 	.word	0x0800920d
 8009244:	0800920d 	.word	0x0800920d
 8009248:	0800920d 	.word	0x0800920d
 800924c:	0800920d 	.word	0x0800920d
 8009250:	0800939f 	.word	0x0800939f
 8009254:	080092c1 	.word	0x080092c1
 8009258:	08009381 	.word	0x08009381
 800925c:	0800920d 	.word	0x0800920d
 8009260:	0800920d 	.word	0x0800920d
 8009264:	080093c1 	.word	0x080093c1
 8009268:	0800920d 	.word	0x0800920d
 800926c:	080092c1 	.word	0x080092c1
 8009270:	0800920d 	.word	0x0800920d
 8009274:	0800920d 	.word	0x0800920d
 8009278:	08009389 	.word	0x08009389
 800927c:	682b      	ldr	r3, [r5, #0]
 800927e:	1d1a      	adds	r2, r3, #4
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	602a      	str	r2, [r5, #0]
 8009284:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009288:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800928c:	2301      	movs	r3, #1
 800928e:	e0a4      	b.n	80093da <_printf_i+0x1f6>
 8009290:	6820      	ldr	r0, [r4, #0]
 8009292:	6829      	ldr	r1, [r5, #0]
 8009294:	0606      	lsls	r6, r0, #24
 8009296:	f101 0304 	add.w	r3, r1, #4
 800929a:	d50a      	bpl.n	80092b2 <_printf_i+0xce>
 800929c:	680e      	ldr	r6, [r1, #0]
 800929e:	602b      	str	r3, [r5, #0]
 80092a0:	2e00      	cmp	r6, #0
 80092a2:	da03      	bge.n	80092ac <_printf_i+0xc8>
 80092a4:	232d      	movs	r3, #45	; 0x2d
 80092a6:	4276      	negs	r6, r6
 80092a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092ac:	230a      	movs	r3, #10
 80092ae:	485e      	ldr	r0, [pc, #376]	; (8009428 <_printf_i+0x244>)
 80092b0:	e019      	b.n	80092e6 <_printf_i+0x102>
 80092b2:	680e      	ldr	r6, [r1, #0]
 80092b4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80092b8:	602b      	str	r3, [r5, #0]
 80092ba:	bf18      	it	ne
 80092bc:	b236      	sxthne	r6, r6
 80092be:	e7ef      	b.n	80092a0 <_printf_i+0xbc>
 80092c0:	682b      	ldr	r3, [r5, #0]
 80092c2:	6820      	ldr	r0, [r4, #0]
 80092c4:	1d19      	adds	r1, r3, #4
 80092c6:	6029      	str	r1, [r5, #0]
 80092c8:	0601      	lsls	r1, r0, #24
 80092ca:	d501      	bpl.n	80092d0 <_printf_i+0xec>
 80092cc:	681e      	ldr	r6, [r3, #0]
 80092ce:	e002      	b.n	80092d6 <_printf_i+0xf2>
 80092d0:	0646      	lsls	r6, r0, #25
 80092d2:	d5fb      	bpl.n	80092cc <_printf_i+0xe8>
 80092d4:	881e      	ldrh	r6, [r3, #0]
 80092d6:	2f6f      	cmp	r7, #111	; 0x6f
 80092d8:	bf0c      	ite	eq
 80092da:	2308      	moveq	r3, #8
 80092dc:	230a      	movne	r3, #10
 80092de:	4852      	ldr	r0, [pc, #328]	; (8009428 <_printf_i+0x244>)
 80092e0:	2100      	movs	r1, #0
 80092e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80092e6:	6865      	ldr	r5, [r4, #4]
 80092e8:	2d00      	cmp	r5, #0
 80092ea:	bfa8      	it	ge
 80092ec:	6821      	ldrge	r1, [r4, #0]
 80092ee:	60a5      	str	r5, [r4, #8]
 80092f0:	bfa4      	itt	ge
 80092f2:	f021 0104 	bicge.w	r1, r1, #4
 80092f6:	6021      	strge	r1, [r4, #0]
 80092f8:	b90e      	cbnz	r6, 80092fe <_printf_i+0x11a>
 80092fa:	2d00      	cmp	r5, #0
 80092fc:	d04d      	beq.n	800939a <_printf_i+0x1b6>
 80092fe:	4615      	mov	r5, r2
 8009300:	fbb6 f1f3 	udiv	r1, r6, r3
 8009304:	fb03 6711 	mls	r7, r3, r1, r6
 8009308:	5dc7      	ldrb	r7, [r0, r7]
 800930a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800930e:	4637      	mov	r7, r6
 8009310:	42bb      	cmp	r3, r7
 8009312:	460e      	mov	r6, r1
 8009314:	d9f4      	bls.n	8009300 <_printf_i+0x11c>
 8009316:	2b08      	cmp	r3, #8
 8009318:	d10b      	bne.n	8009332 <_printf_i+0x14e>
 800931a:	6823      	ldr	r3, [r4, #0]
 800931c:	07de      	lsls	r6, r3, #31
 800931e:	d508      	bpl.n	8009332 <_printf_i+0x14e>
 8009320:	6923      	ldr	r3, [r4, #16]
 8009322:	6861      	ldr	r1, [r4, #4]
 8009324:	4299      	cmp	r1, r3
 8009326:	bfde      	ittt	le
 8009328:	2330      	movle	r3, #48	; 0x30
 800932a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800932e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009332:	1b52      	subs	r2, r2, r5
 8009334:	6122      	str	r2, [r4, #16]
 8009336:	464b      	mov	r3, r9
 8009338:	4621      	mov	r1, r4
 800933a:	4640      	mov	r0, r8
 800933c:	f8cd a000 	str.w	sl, [sp]
 8009340:	aa03      	add	r2, sp, #12
 8009342:	f7ff fedf 	bl	8009104 <_printf_common>
 8009346:	3001      	adds	r0, #1
 8009348:	d14c      	bne.n	80093e4 <_printf_i+0x200>
 800934a:	f04f 30ff 	mov.w	r0, #4294967295
 800934e:	b004      	add	sp, #16
 8009350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009354:	4834      	ldr	r0, [pc, #208]	; (8009428 <_printf_i+0x244>)
 8009356:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800935a:	6829      	ldr	r1, [r5, #0]
 800935c:	6823      	ldr	r3, [r4, #0]
 800935e:	f851 6b04 	ldr.w	r6, [r1], #4
 8009362:	6029      	str	r1, [r5, #0]
 8009364:	061d      	lsls	r5, r3, #24
 8009366:	d514      	bpl.n	8009392 <_printf_i+0x1ae>
 8009368:	07df      	lsls	r7, r3, #31
 800936a:	bf44      	itt	mi
 800936c:	f043 0320 	orrmi.w	r3, r3, #32
 8009370:	6023      	strmi	r3, [r4, #0]
 8009372:	b91e      	cbnz	r6, 800937c <_printf_i+0x198>
 8009374:	6823      	ldr	r3, [r4, #0]
 8009376:	f023 0320 	bic.w	r3, r3, #32
 800937a:	6023      	str	r3, [r4, #0]
 800937c:	2310      	movs	r3, #16
 800937e:	e7af      	b.n	80092e0 <_printf_i+0xfc>
 8009380:	6823      	ldr	r3, [r4, #0]
 8009382:	f043 0320 	orr.w	r3, r3, #32
 8009386:	6023      	str	r3, [r4, #0]
 8009388:	2378      	movs	r3, #120	; 0x78
 800938a:	4828      	ldr	r0, [pc, #160]	; (800942c <_printf_i+0x248>)
 800938c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009390:	e7e3      	b.n	800935a <_printf_i+0x176>
 8009392:	0659      	lsls	r1, r3, #25
 8009394:	bf48      	it	mi
 8009396:	b2b6      	uxthmi	r6, r6
 8009398:	e7e6      	b.n	8009368 <_printf_i+0x184>
 800939a:	4615      	mov	r5, r2
 800939c:	e7bb      	b.n	8009316 <_printf_i+0x132>
 800939e:	682b      	ldr	r3, [r5, #0]
 80093a0:	6826      	ldr	r6, [r4, #0]
 80093a2:	1d18      	adds	r0, r3, #4
 80093a4:	6961      	ldr	r1, [r4, #20]
 80093a6:	6028      	str	r0, [r5, #0]
 80093a8:	0635      	lsls	r5, r6, #24
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	d501      	bpl.n	80093b2 <_printf_i+0x1ce>
 80093ae:	6019      	str	r1, [r3, #0]
 80093b0:	e002      	b.n	80093b8 <_printf_i+0x1d4>
 80093b2:	0670      	lsls	r0, r6, #25
 80093b4:	d5fb      	bpl.n	80093ae <_printf_i+0x1ca>
 80093b6:	8019      	strh	r1, [r3, #0]
 80093b8:	2300      	movs	r3, #0
 80093ba:	4615      	mov	r5, r2
 80093bc:	6123      	str	r3, [r4, #16]
 80093be:	e7ba      	b.n	8009336 <_printf_i+0x152>
 80093c0:	682b      	ldr	r3, [r5, #0]
 80093c2:	2100      	movs	r1, #0
 80093c4:	1d1a      	adds	r2, r3, #4
 80093c6:	602a      	str	r2, [r5, #0]
 80093c8:	681d      	ldr	r5, [r3, #0]
 80093ca:	6862      	ldr	r2, [r4, #4]
 80093cc:	4628      	mov	r0, r5
 80093ce:	f000 f831 	bl	8009434 <memchr>
 80093d2:	b108      	cbz	r0, 80093d8 <_printf_i+0x1f4>
 80093d4:	1b40      	subs	r0, r0, r5
 80093d6:	6060      	str	r0, [r4, #4]
 80093d8:	6863      	ldr	r3, [r4, #4]
 80093da:	6123      	str	r3, [r4, #16]
 80093dc:	2300      	movs	r3, #0
 80093de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093e2:	e7a8      	b.n	8009336 <_printf_i+0x152>
 80093e4:	462a      	mov	r2, r5
 80093e6:	4649      	mov	r1, r9
 80093e8:	4640      	mov	r0, r8
 80093ea:	6923      	ldr	r3, [r4, #16]
 80093ec:	47d0      	blx	sl
 80093ee:	3001      	adds	r0, #1
 80093f0:	d0ab      	beq.n	800934a <_printf_i+0x166>
 80093f2:	6823      	ldr	r3, [r4, #0]
 80093f4:	079b      	lsls	r3, r3, #30
 80093f6:	d413      	bmi.n	8009420 <_printf_i+0x23c>
 80093f8:	68e0      	ldr	r0, [r4, #12]
 80093fa:	9b03      	ldr	r3, [sp, #12]
 80093fc:	4298      	cmp	r0, r3
 80093fe:	bfb8      	it	lt
 8009400:	4618      	movlt	r0, r3
 8009402:	e7a4      	b.n	800934e <_printf_i+0x16a>
 8009404:	2301      	movs	r3, #1
 8009406:	4632      	mov	r2, r6
 8009408:	4649      	mov	r1, r9
 800940a:	4640      	mov	r0, r8
 800940c:	47d0      	blx	sl
 800940e:	3001      	adds	r0, #1
 8009410:	d09b      	beq.n	800934a <_printf_i+0x166>
 8009412:	3501      	adds	r5, #1
 8009414:	68e3      	ldr	r3, [r4, #12]
 8009416:	9903      	ldr	r1, [sp, #12]
 8009418:	1a5b      	subs	r3, r3, r1
 800941a:	42ab      	cmp	r3, r5
 800941c:	dcf2      	bgt.n	8009404 <_printf_i+0x220>
 800941e:	e7eb      	b.n	80093f8 <_printf_i+0x214>
 8009420:	2500      	movs	r5, #0
 8009422:	f104 0619 	add.w	r6, r4, #25
 8009426:	e7f5      	b.n	8009414 <_printf_i+0x230>
 8009428:	080095b3 	.word	0x080095b3
 800942c:	080095c4 	.word	0x080095c4

08009430 <__retarget_lock_acquire_recursive>:
 8009430:	4770      	bx	lr

08009432 <__retarget_lock_release_recursive>:
 8009432:	4770      	bx	lr

08009434 <memchr>:
 8009434:	4603      	mov	r3, r0
 8009436:	b510      	push	{r4, lr}
 8009438:	b2c9      	uxtb	r1, r1
 800943a:	4402      	add	r2, r0
 800943c:	4293      	cmp	r3, r2
 800943e:	4618      	mov	r0, r3
 8009440:	d101      	bne.n	8009446 <memchr+0x12>
 8009442:	2000      	movs	r0, #0
 8009444:	e003      	b.n	800944e <memchr+0x1a>
 8009446:	7804      	ldrb	r4, [r0, #0]
 8009448:	3301      	adds	r3, #1
 800944a:	428c      	cmp	r4, r1
 800944c:	d1f6      	bne.n	800943c <memchr+0x8>
 800944e:	bd10      	pop	{r4, pc}

08009450 <memcpy>:
 8009450:	440a      	add	r2, r1
 8009452:	4291      	cmp	r1, r2
 8009454:	f100 33ff 	add.w	r3, r0, #4294967295
 8009458:	d100      	bne.n	800945c <memcpy+0xc>
 800945a:	4770      	bx	lr
 800945c:	b510      	push	{r4, lr}
 800945e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009462:	4291      	cmp	r1, r2
 8009464:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009468:	d1f9      	bne.n	800945e <memcpy+0xe>
 800946a:	bd10      	pop	{r4, pc}

0800946c <memmove>:
 800946c:	4288      	cmp	r0, r1
 800946e:	b510      	push	{r4, lr}
 8009470:	eb01 0402 	add.w	r4, r1, r2
 8009474:	d902      	bls.n	800947c <memmove+0x10>
 8009476:	4284      	cmp	r4, r0
 8009478:	4623      	mov	r3, r4
 800947a:	d807      	bhi.n	800948c <memmove+0x20>
 800947c:	1e43      	subs	r3, r0, #1
 800947e:	42a1      	cmp	r1, r4
 8009480:	d008      	beq.n	8009494 <memmove+0x28>
 8009482:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009486:	f803 2f01 	strb.w	r2, [r3, #1]!
 800948a:	e7f8      	b.n	800947e <memmove+0x12>
 800948c:	4601      	mov	r1, r0
 800948e:	4402      	add	r2, r0
 8009490:	428a      	cmp	r2, r1
 8009492:	d100      	bne.n	8009496 <memmove+0x2a>
 8009494:	bd10      	pop	{r4, pc}
 8009496:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800949a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800949e:	e7f7      	b.n	8009490 <memmove+0x24>

080094a0 <_realloc_r>:
 80094a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094a4:	4680      	mov	r8, r0
 80094a6:	4614      	mov	r4, r2
 80094a8:	460e      	mov	r6, r1
 80094aa:	b921      	cbnz	r1, 80094b6 <_realloc_r+0x16>
 80094ac:	4611      	mov	r1, r2
 80094ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80094b2:	f7ff bc1b 	b.w	8008cec <_malloc_r>
 80094b6:	b92a      	cbnz	r2, 80094c4 <_realloc_r+0x24>
 80094b8:	f7ff fbb0 	bl	8008c1c <_free_r>
 80094bc:	4625      	mov	r5, r4
 80094be:	4628      	mov	r0, r5
 80094c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094c4:	f000 f81b 	bl	80094fe <_malloc_usable_size_r>
 80094c8:	4284      	cmp	r4, r0
 80094ca:	4607      	mov	r7, r0
 80094cc:	d802      	bhi.n	80094d4 <_realloc_r+0x34>
 80094ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80094d2:	d812      	bhi.n	80094fa <_realloc_r+0x5a>
 80094d4:	4621      	mov	r1, r4
 80094d6:	4640      	mov	r0, r8
 80094d8:	f7ff fc08 	bl	8008cec <_malloc_r>
 80094dc:	4605      	mov	r5, r0
 80094de:	2800      	cmp	r0, #0
 80094e0:	d0ed      	beq.n	80094be <_realloc_r+0x1e>
 80094e2:	42bc      	cmp	r4, r7
 80094e4:	4622      	mov	r2, r4
 80094e6:	4631      	mov	r1, r6
 80094e8:	bf28      	it	cs
 80094ea:	463a      	movcs	r2, r7
 80094ec:	f7ff ffb0 	bl	8009450 <memcpy>
 80094f0:	4631      	mov	r1, r6
 80094f2:	4640      	mov	r0, r8
 80094f4:	f7ff fb92 	bl	8008c1c <_free_r>
 80094f8:	e7e1      	b.n	80094be <_realloc_r+0x1e>
 80094fa:	4635      	mov	r5, r6
 80094fc:	e7df      	b.n	80094be <_realloc_r+0x1e>

080094fe <_malloc_usable_size_r>:
 80094fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009502:	1f18      	subs	r0, r3, #4
 8009504:	2b00      	cmp	r3, #0
 8009506:	bfbc      	itt	lt
 8009508:	580b      	ldrlt	r3, [r1, r0]
 800950a:	18c0      	addlt	r0, r0, r3
 800950c:	4770      	bx	lr
	...

08009510 <_init>:
 8009510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009512:	bf00      	nop
 8009514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009516:	bc08      	pop	{r3}
 8009518:	469e      	mov	lr, r3
 800951a:	4770      	bx	lr

0800951c <_fini>:
 800951c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800951e:	bf00      	nop
 8009520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009522:	bc08      	pop	{r3}
 8009524:	469e      	mov	lr, r3
 8009526:	4770      	bx	lr
