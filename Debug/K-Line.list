
K-Line.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009430  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  0800953c  0800953c  0001953c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009600  08009600  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  08009600  08009600  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009600  08009600  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009600  08009600  00019600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009604  08009604  00019604  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08009608  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001288  200001ec  080097f4  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001474  080097f4  00021474  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011d28  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000322e  00000000  00000000  00031f3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc0  00000000  00000000  00035170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c58  00000000  00000000  00035f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a660  00000000  00000000  00036b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012e04  00000000  00000000  000511e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000878a1  00000000  00000000  00063fec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eb88d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039e8  00000000  00000000  000eb8e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001ec 	.word	0x200001ec
 8000128:	00000000 	.word	0x00000000
 800012c:	08009524 	.word	0x08009524

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001f0 	.word	0x200001f0
 8000148:	08009524 	.word	0x08009524

0800014c <filterData>:
		cksum -= data[i];
	}
	return cksum;
}

uint8_t* filterData(const uint8_t *data, uint8_t len) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	460b      	mov	r3, r1
 8000156:	70fb      	strb	r3, [r7, #3]
	if (len <= data[1]) {
 8000158:	687b      	ldr	r3, [r7, #4]
 800015a:	3301      	adds	r3, #1
 800015c:	781b      	ldrb	r3, [r3, #0]
 800015e:	78fa      	ldrb	r2, [r7, #3]
 8000160:	429a      	cmp	r2, r3
 8000162:	d801      	bhi.n	8000168 <filterData+0x1c>
		return NULL;
 8000164:	2300      	movs	r3, #0
 8000166:	e029      	b.n	80001bc <filterData+0x70>
	}
	uint8_t *filteredData = (uint8_t*) malloc((len - data[1]) * sizeof(uint8_t));
 8000168:	78fb      	ldrb	r3, [r7, #3]
 800016a:	687a      	ldr	r2, [r7, #4]
 800016c:	3201      	adds	r2, #1
 800016e:	7812      	ldrb	r2, [r2, #0]
 8000170:	1a9b      	subs	r3, r3, r2
 8000172:	4618      	mov	r0, r3
 8000174:	f008 fd44 	bl	8008c00 <malloc>
 8000178:	4603      	mov	r3, r0
 800017a:	60bb      	str	r3, [r7, #8]
	if (filteredData == NULL) {
 800017c:	68bb      	ldr	r3, [r7, #8]
 800017e:	2b00      	cmp	r3, #0
 8000180:	d101      	bne.n	8000186 <filterData+0x3a>
		return NULL;
 8000182:	2300      	movs	r3, #0
 8000184:	e01a      	b.n	80001bc <filterData+0x70>
	}
	for (int i = data[1]; i <= len; i++) {
 8000186:	687b      	ldr	r3, [r7, #4]
 8000188:	3301      	adds	r3, #1
 800018a:	781b      	ldrb	r3, [r3, #0]
 800018c:	60fb      	str	r3, [r7, #12]
 800018e:	e010      	b.n	80001b2 <filterData+0x66>
		filteredData[i - data[1]] = data[i];
 8000190:	68fb      	ldr	r3, [r7, #12]
 8000192:	687a      	ldr	r2, [r7, #4]
 8000194:	441a      	add	r2, r3
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	3301      	adds	r3, #1
 800019a:	781b      	ldrb	r3, [r3, #0]
 800019c:	4619      	mov	r1, r3
 800019e:	68fb      	ldr	r3, [r7, #12]
 80001a0:	1a5b      	subs	r3, r3, r1
 80001a2:	4619      	mov	r1, r3
 80001a4:	68bb      	ldr	r3, [r7, #8]
 80001a6:	440b      	add	r3, r1
 80001a8:	7812      	ldrb	r2, [r2, #0]
 80001aa:	701a      	strb	r2, [r3, #0]
	for (int i = data[1]; i <= len; i++) {
 80001ac:	68fb      	ldr	r3, [r7, #12]
 80001ae:	3301      	adds	r3, #1
 80001b0:	60fb      	str	r3, [r7, #12]
 80001b2:	78fb      	ldrb	r3, [r7, #3]
 80001b4:	68fa      	ldr	r2, [r7, #12]
 80001b6:	429a      	cmp	r2, r3
 80001b8:	ddea      	ble.n	8000190 <filterData+0x44>
	}
	return filteredData;
 80001ba:	68bb      	ldr	r3, [r7, #8]
}
 80001bc:	4618      	mov	r0, r3
 80001be:	3710      	adds	r7, #16
 80001c0:	46bd      	mov	sp, r7
 80001c2:	bd80      	pop	{r7, pc}

080001c4 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b082      	sub	sp, #8
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	6078      	str	r0, [r7, #4]
 80001cc:	460b      	mov	r3, r1
 80001ce:	807b      	strh	r3, [r7, #2]
	numDataBytes = Size;
 80001d0:	887b      	ldrh	r3, [r7, #2]
 80001d2:	b2da      	uxtb	r2, r3
 80001d4:	4b0e      	ldr	r3, [pc, #56]	; (8000210 <HAL_UARTEx_RxEventCallback+0x4c>)
 80001d6:	701a      	strb	r2, [r3, #0]
	filteredData = filterData(RxBuffer, numDataBytes);
 80001d8:	4b0d      	ldr	r3, [pc, #52]	; (8000210 <HAL_UARTEx_RxEventCallback+0x4c>)
 80001da:	781b      	ldrb	r3, [r3, #0]
 80001dc:	4619      	mov	r1, r3
 80001de:	480d      	ldr	r0, [pc, #52]	; (8000214 <HAL_UARTEx_RxEventCallback+0x50>)
 80001e0:	f7ff ffb4 	bl	800014c <filterData>
 80001e4:	4603      	mov	r3, r0
 80001e6:	4a0c      	ldr	r2, [pc, #48]	; (8000218 <HAL_UARTEx_RxEventCallback+0x54>)
 80001e8:	6013      	str	r3, [r2, #0]
	needToInit = (filteredData == NULL) ? 1 : 0;
 80001ea:	4b0b      	ldr	r3, [pc, #44]	; (8000218 <HAL_UARTEx_RxEventCallback+0x54>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	bf0c      	ite	eq
 80001f2:	2301      	moveq	r3, #1
 80001f4:	2300      	movne	r3, #0
 80001f6:	b2db      	uxtb	r3, r3
 80001f8:	461a      	mov	r2, r3
 80001fa:	4b08      	ldr	r3, [pc, #32]	; (800021c <HAL_UARTEx_RxEventCallback+0x58>)
 80001fc:	601a      	str	r2, [r3, #0]
	HAL_UARTEx_ReceiveToIdle_IT(&huart2, RxBuffer, sizeof(RxBuffer));
 80001fe:	2220      	movs	r2, #32
 8000200:	4904      	ldr	r1, [pc, #16]	; (8000214 <HAL_UARTEx_RxEventCallback+0x50>)
 8000202:	4807      	ldr	r0, [pc, #28]	; (8000220 <HAL_UARTEx_RxEventCallback+0x5c>)
 8000204:	f003 fb4f 	bl	80038a6 <HAL_UARTEx_ReceiveToIdle_IT>
}
 8000208:	bf00      	nop
 800020a:	3708      	adds	r7, #8
 800020c:	46bd      	mov	sp, r7
 800020e:	bd80      	pop	{r7, pc}
 8000210:	20000278 	.word	0x20000278
 8000214:	20000258 	.word	0x20000258
 8000218:	2000027c 	.word	0x2000027c
 800021c:	20000280 	.word	0x20000280
 8000220:	20000208 	.word	0x20000208

08000224 <initEcu>:

void initEcu(void) {
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
 8000228:	2200      	movs	r2, #0
 800022a:	2104      	movs	r1, #4
 800022c:	480a      	ldr	r0, [pc, #40]	; (8000258 <initEcu+0x34>)
 800022e:	f000 ffcd 	bl	80011cc <HAL_GPIO_WritePin>
	HAL_Delay(70);
 8000232:	2046      	movs	r0, #70	; 0x46
 8000234:	f000 fb74 	bl	8000920 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);
 8000238:	2201      	movs	r2, #1
 800023a:	2104      	movs	r1, #4
 800023c:	4806      	ldr	r0, [pc, #24]	; (8000258 <initEcu+0x34>)
 800023e:	f000 ffc5 	bl	80011cc <HAL_GPIO_WritePin>
	HAL_Delay(130);
 8000242:	2082      	movs	r0, #130	; 0x82
 8000244:	f000 fb6c 	bl	8000920 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8000248:	2200      	movs	r2, #0
 800024a:	2104      	movs	r1, #4
 800024c:	4802      	ldr	r0, [pc, #8]	; (8000258 <initEcu+0x34>)
 800024e:	f000 ffbd 	bl	80011cc <HAL_GPIO_WritePin>
}
 8000252:	bf00      	nop
 8000254:	bd80      	pop	{r7, pc}
 8000256:	bf00      	nop
 8000258:	40010800 	.word	0x40010800

0800025c <pingECU>:

void pingECU(void) {
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
	HAL_UART_Transmit_IT(&huart2, ECU_WAKEUP_MESSAGE, sizeof(ECU_WAKEUP_MESSAGE));
 8000260:	2204      	movs	r2, #4
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <pingECU+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <pingECU+0x18>)
 8000266:	f003 fae9 	bl	800383c <HAL_UART_Transmit_IT>
}
 800026a:	bf00      	nop
 800026c:	bd80      	pop	{r7, pc}
 800026e:	bf00      	nop
 8000270:	20000000 	.word	0x20000000
 8000274:	20000208 	.word	0x20000208

08000278 <UART_TURN_OFF>:

void UART_TURN_OFF(void) {
 8000278:	b580      	push	{r7, lr}
 800027a:	b084      	sub	sp, #16
 800027c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800027e:	463b      	mov	r3, r7
 8000280:	2200      	movs	r2, #0
 8000282:	601a      	str	r2, [r3, #0]
 8000284:	605a      	str	r2, [r3, #4]
 8000286:	609a      	str	r2, [r3, #8]
 8000288:	60da      	str	r2, [r3, #12]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 800028a:	2200      	movs	r2, #0
 800028c:	2104      	movs	r1, #4
 800028e:	480e      	ldr	r0, [pc, #56]	; (80002c8 <UART_TURN_OFF+0x50>)
 8000290:	f000 ff9c 	bl	80011cc <HAL_GPIO_WritePin>
	HAL_UART_MspDeInit(&huart2);
 8000294:	480d      	ldr	r0, [pc, #52]	; (80002cc <UART_TURN_OFF+0x54>)
 8000296:	f000 fa23 	bl	80006e0 <HAL_UART_MspDeInit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 800029a:	2200      	movs	r2, #0
 800029c:	2104      	movs	r1, #4
 800029e:	480a      	ldr	r0, [pc, #40]	; (80002c8 <UART_TURN_OFF+0x50>)
 80002a0:	f000 ff94 	bl	80011cc <HAL_GPIO_WritePin>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002a4:	2301      	movs	r3, #1
 80002a6:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 80002a8:	2304      	movs	r3, #4
 80002aa:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ac:	2300      	movs	r3, #0
 80002ae:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002b0:	2302      	movs	r3, #2
 80002b2:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002b4:	463b      	mov	r3, r7
 80002b6:	4619      	mov	r1, r3
 80002b8:	4803      	ldr	r0, [pc, #12]	; (80002c8 <UART_TURN_OFF+0x50>)
 80002ba:	f000 fd47 	bl	8000d4c <HAL_GPIO_Init>
}
 80002be:	bf00      	nop
 80002c0:	3710      	adds	r7, #16
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	40010800 	.word	0x40010800
 80002cc:	20000208 	.word	0x20000208

080002d0 <UART_TURN_ON>:

void UART_TURN_ON(void) {
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 80002d4:	2201      	movs	r2, #1
 80002d6:	2104      	movs	r1, #4
 80002d8:	4806      	ldr	r0, [pc, #24]	; (80002f4 <UART_TURN_ON+0x24>)
 80002da:	f000 ff77 	bl	80011cc <HAL_GPIO_WritePin>
	HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2);
 80002de:	2104      	movs	r1, #4
 80002e0:	4804      	ldr	r0, [pc, #16]	; (80002f4 <UART_TURN_ON+0x24>)
 80002e2:	f000 feb7 	bl	8001054 <HAL_GPIO_DeInit>
	HAL_UART_MspInit(&huart2);
 80002e6:	4804      	ldr	r0, [pc, #16]	; (80002f8 <UART_TURN_ON+0x28>)
 80002e8:	f000 f9a8 	bl	800063c <HAL_UART_MspInit>
	MX_USART2_UART_Init();
 80002ec:	f000 f90a 	bl	8000504 <MX_USART2_UART_Init>
}
 80002f0:	bf00      	nop
 80002f2:	bd80      	pop	{r7, pc}
 80002f4:	40010800 	.word	0x40010800
 80002f8:	20000208 	.word	0x20000208

080002fc <resetGpio>:

void resetGpio(void) {
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
	UART_TURN_OFF();
 8000300:	f7ff ffba 	bl	8000278 <UART_TURN_OFF>

	initEcu();
 8000304:	f7ff ff8e 	bl	8000224 <initEcu>

	UART_TURN_ON();
 8000308:	f7ff ffe2 	bl	80002d0 <UART_TURN_ON>

	HAL_UARTEx_ReceiveToIdle_IT(&huart2, RxBuffer, RxBuffer_Size);
 800030c:	2220      	movs	r2, #32
 800030e:	4906      	ldr	r1, [pc, #24]	; (8000328 <resetGpio+0x2c>)
 8000310:	4806      	ldr	r0, [pc, #24]	; (800032c <resetGpio+0x30>)
 8000312:	f003 fac8 	bl	80038a6 <HAL_UARTEx_ReceiveToIdle_IT>

	pingECU();
 8000316:	f7ff ffa1 	bl	800025c <pingECU>

	NBT_init(&reqData, 300);
 800031a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800031e:	4804      	ldr	r0, [pc, #16]	; (8000330 <resetGpio+0x34>)
 8000320:	f000 f93f 	bl	80005a2 <NBT_init>
}
 8000324:	bf00      	nop
 8000326:	bd80      	pop	{r7, pc}
 8000328:	20000258 	.word	0x20000258
 800032c:	20000208 	.word	0x20000208
 8000330:	20000250 	.word	0x20000250

08000334 <main_loop>:

void main_loop(void) {
 8000334:	b5b0      	push	{r4, r5, r7, lr}
 8000336:	b088      	sub	sp, #32
 8000338:	af00      	add	r7, sp, #0
	if (needToInit == 1) {
 800033a:	4b34      	ldr	r3, [pc, #208]	; (800040c <main_loop+0xd8>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	2b01      	cmp	r3, #1
 8000340:	d10f      	bne.n	8000362 <main_loop+0x2e>
		UART_TURN_OFF();
 8000342:	f7ff ff99 	bl	8000278 <UART_TURN_OFF>

		initEcu();
 8000346:	f7ff ff6d 	bl	8000224 <initEcu>

		UART_TURN_ON();
 800034a:	f7ff ffc1 	bl	80002d0 <UART_TURN_ON>

		HAL_UARTEx_ReceiveToIdle_IT(&huart2, RxBuffer, RxBuffer_Size);
 800034e:	2220      	movs	r2, #32
 8000350:	492f      	ldr	r1, [pc, #188]	; (8000410 <main_loop+0xdc>)
 8000352:	4830      	ldr	r0, [pc, #192]	; (8000414 <main_loop+0xe0>)
 8000354:	f003 faa7 	bl	80038a6 <HAL_UARTEx_ReceiveToIdle_IT>

		pingECU();
 8000358:	f7ff ff80 	bl	800025c <pingECU>

		needToInit = 0;
 800035c:	4b2b      	ldr	r3, [pc, #172]	; (800040c <main_loop+0xd8>)
 800035e:	2200      	movs	r2, #0
 8000360:	601a      	str	r2, [r3, #0]
	}

	if (NBT_handler(&reqData)) {
 8000362:	482d      	ldr	r0, [pc, #180]	; (8000418 <main_loop+0xe4>)
 8000364:	f000 f92e 	bl	80005c4 <NBT_handler>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d04a      	beq.n	8000404 <main_loop+0xd0>

		HAL_UART_Transmit(&huart2, T17, T17[1], 100);
 800036e:	4b2b      	ldr	r3, [pc, #172]	; (800041c <main_loop+0xe8>)
 8000370:	785b      	ldrb	r3, [r3, #1]
 8000372:	b29a      	uxth	r2, r3
 8000374:	2364      	movs	r3, #100	; 0x64
 8000376:	4929      	ldr	r1, [pc, #164]	; (800041c <main_loop+0xe8>)
 8000378:	4826      	ldr	r0, [pc, #152]	; (8000414 <main_loop+0xe0>)
 800037a:	f003 f9dc 	bl	8003736 <HAL_UART_Transmit>

		//			CDC_Transmit_FS(filteredData, filteredData[1]);

		uint8_t data[] = { 0x02, 0x13, 0x71, 0x13, 0x00, 0x00, 0x06, 0x00, 0xFF, 0x00, 0xFF, 0x00,
 800037e:	4b28      	ldr	r3, [pc, #160]	; (8000420 <main_loop+0xec>)
 8000380:	463c      	mov	r4, r7
 8000382:	461d      	mov	r5, r3
 8000384:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000386:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000388:	682b      	ldr	r3, [r5, #0]
 800038a:	461a      	mov	r2, r3
 800038c:	8022      	strh	r2, [r4, #0]
 800038e:	3402      	adds	r4, #2
 8000390:	0c1b      	lsrs	r3, r3, #16
 8000392:	7023      	strb	r3, [r4, #0]
				0xF2, 0xA8, 0x74, 0x00, 0x00, 0x80, 0xD5 };

		uint8_t *fd = data;
 8000394:	463b      	mov	r3, r7
 8000396:	61bb      	str	r3, [r7, #24]

		char *string_array = (char*) malloc((fd[1] * 2 + 1) * sizeof(char));
 8000398:	69bb      	ldr	r3, [r7, #24]
 800039a:	3301      	adds	r3, #1
 800039c:	781b      	ldrb	r3, [r3, #0]
 800039e:	005b      	lsls	r3, r3, #1
 80003a0:	3301      	adds	r3, #1
 80003a2:	4618      	mov	r0, r3
 80003a4:	f008 fc2c 	bl	8008c00 <malloc>
 80003a8:	4603      	mov	r3, r0
 80003aa:	617b      	str	r3, [r7, #20]
		//
		for (int i = 0; i < fd[1]; i++) {
 80003ac:	2300      	movs	r3, #0
 80003ae:	61fb      	str	r3, [r7, #28]
 80003b0:	e00f      	b.n	80003d2 <main_loop+0x9e>
			sprintf(&string_array[i * 2], "%02X", fd[i]);
 80003b2:	69fb      	ldr	r3, [r7, #28]
 80003b4:	005b      	lsls	r3, r3, #1
 80003b6:	461a      	mov	r2, r3
 80003b8:	697b      	ldr	r3, [r7, #20]
 80003ba:	1898      	adds	r0, r3, r2
 80003bc:	69fb      	ldr	r3, [r7, #28]
 80003be:	69ba      	ldr	r2, [r7, #24]
 80003c0:	4413      	add	r3, r2
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	461a      	mov	r2, r3
 80003c6:	4917      	ldr	r1, [pc, #92]	; (8000424 <main_loop+0xf0>)
 80003c8:	f008 fd1e 	bl	8008e08 <siprintf>
		for (int i = 0; i < fd[1]; i++) {
 80003cc:	69fb      	ldr	r3, [r7, #28]
 80003ce:	3301      	adds	r3, #1
 80003d0:	61fb      	str	r3, [r7, #28]
 80003d2:	69bb      	ldr	r3, [r7, #24]
 80003d4:	3301      	adds	r3, #1
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	461a      	mov	r2, r3
 80003da:	69fb      	ldr	r3, [r7, #28]
 80003dc:	4293      	cmp	r3, r2
 80003de:	dbe8      	blt.n	80003b2 <main_loop+0x7e>
		}

		CDC_Transmit_FS((uint8_t*) string_array, fd[1] * 2);
 80003e0:	69bb      	ldr	r3, [r7, #24]
 80003e2:	3301      	adds	r3, #1
 80003e4:	781b      	ldrb	r3, [r3, #0]
 80003e6:	b29b      	uxth	r3, r3
 80003e8:	005b      	lsls	r3, r3, #1
 80003ea:	b29b      	uxth	r3, r3
 80003ec:	4619      	mov	r1, r3
 80003ee:	6978      	ldr	r0, [r7, #20]
 80003f0:	f007 fffe 	bl	80083f0 <CDC_Transmit_FS>

		free(string_array);
 80003f4:	6978      	ldr	r0, [r7, #20]
 80003f6:	f008 fc0b 	bl	8008c10 <free>
		free(filteredData);
 80003fa:	4b0b      	ldr	r3, [pc, #44]	; (8000428 <main_loop+0xf4>)
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	4618      	mov	r0, r3
 8000400:	f008 fc06 	bl	8008c10 <free>

	}
}
 8000404:	bf00      	nop
 8000406:	3720      	adds	r7, #32
 8000408:	46bd      	mov	sp, r7
 800040a:	bdb0      	pop	{r4, r5, r7, pc}
 800040c:	20000280 	.word	0x20000280
 8000410:	20000258 	.word	0x20000258
 8000414:	20000208 	.word	0x20000208
 8000418:	20000250 	.word	0x20000250
 800041c:	20000004 	.word	0x20000004
 8000420:	08009544 	.word	0x08009544
 8000424:	0800953c 	.word	0x0800953c
 8000428:	2000027c 	.word	0x2000027c

0800042c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000430:	f000 fa14 	bl	800085c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000434:	f000 f80b 	bl	800044e <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000438:	f000 f88c 	bl	8000554 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 800043c:	f000 f862 	bl	8000504 <MX_USART2_UART_Init>
	MX_USB_DEVICE_Init();
 8000440:	f007 ff18 	bl	8008274 <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 2 */

	resetGpio();
 8000444:	f7ff ff5a 	bl	80002fc <resetGpio>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		main_loop();
 8000448:	f7ff ff74 	bl	8000334 <main_loop>
 800044c:	e7fc      	b.n	8000448 <main+0x1c>

0800044e <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800044e:	b580      	push	{r7, lr}
 8000450:	b094      	sub	sp, #80	; 0x50
 8000452:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000454:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000458:	2228      	movs	r2, #40	; 0x28
 800045a:	2100      	movs	r1, #0
 800045c:	4618      	mov	r0, r3
 800045e:	f008 fbdf 	bl	8008c20 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000462:	f107 0314 	add.w	r3, r7, #20
 8000466:	2200      	movs	r2, #0
 8000468:	601a      	str	r2, [r3, #0]
 800046a:	605a      	str	r2, [r3, #4]
 800046c:	609a      	str	r2, [r3, #8]
 800046e:	60da      	str	r2, [r3, #12]
 8000470:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000472:	1d3b      	adds	r3, r7, #4
 8000474:	2200      	movs	r2, #0
 8000476:	601a      	str	r2, [r3, #0]
 8000478:	605a      	str	r2, [r3, #4]
 800047a:	609a      	str	r2, [r3, #8]
 800047c:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800047e:	2301      	movs	r3, #1
 8000480:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000482:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000486:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000488:	2300      	movs	r3, #0
 800048a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800048c:	2301      	movs	r3, #1
 800048e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000490:	2302      	movs	r3, #2
 8000492:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000494:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000498:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800049a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800049e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80004a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004a4:	4618      	mov	r0, r3
 80004a6:	f002 fc17 	bl	8002cd8 <HAL_RCC_OscConfig>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d001      	beq.n	80004b4 <SystemClock_Config+0x66>
		Error_Handler();
 80004b0:	f000 f872 	bl	8000598 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1
 80004b4:	230f      	movs	r3, #15
 80004b6:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004b8:	2302      	movs	r3, #2
 80004ba:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004bc:	2300      	movs	r3, #0
 80004be:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004c4:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004c6:	2300      	movs	r3, #0
 80004c8:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80004ca:	f107 0314 	add.w	r3, r7, #20
 80004ce:	2102      	movs	r1, #2
 80004d0:	4618      	mov	r0, r3
 80004d2:	f002 fe83 	bl	80031dc <HAL_RCC_ClockConfig>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d001      	beq.n	80004e0 <SystemClock_Config+0x92>
		Error_Handler();
 80004dc:	f000 f85c 	bl	8000598 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80004e0:	2310      	movs	r3, #16
 80004e2:	607b      	str	r3, [r7, #4]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80004e4:	2300      	movs	r3, #0
 80004e6:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80004e8:	1d3b      	adds	r3, r7, #4
 80004ea:	4618      	mov	r0, r3
 80004ec:	f003 f804 	bl	80034f8 <HAL_RCCEx_PeriphCLKConfig>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d001      	beq.n	80004fa <SystemClock_Config+0xac>
		Error_Handler();
 80004f6:	f000 f84f 	bl	8000598 <Error_Handler>
	}
}
 80004fa:	bf00      	nop
 80004fc:	3750      	adds	r7, #80	; 0x50
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
	...

08000504 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
void MX_USART2_UART_Init(void) {
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000508:	4b10      	ldr	r3, [pc, #64]	; (800054c <MX_USART2_UART_Init+0x48>)
 800050a:	4a11      	ldr	r2, [pc, #68]	; (8000550 <MX_USART2_UART_Init+0x4c>)
 800050c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 10400;
 800050e:	4b0f      	ldr	r3, [pc, #60]	; (800054c <MX_USART2_UART_Init+0x48>)
 8000510:	f642 02a0 	movw	r2, #10400	; 0x28a0
 8000514:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000516:	4b0d      	ldr	r3, [pc, #52]	; (800054c <MX_USART2_UART_Init+0x48>)
 8000518:	2200      	movs	r2, #0
 800051a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800051c:	4b0b      	ldr	r3, [pc, #44]	; (800054c <MX_USART2_UART_Init+0x48>)
 800051e:	2200      	movs	r2, #0
 8000520:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000522:	4b0a      	ldr	r3, [pc, #40]	; (800054c <MX_USART2_UART_Init+0x48>)
 8000524:	2200      	movs	r2, #0
 8000526:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000528:	4b08      	ldr	r3, [pc, #32]	; (800054c <MX_USART2_UART_Init+0x48>)
 800052a:	220c      	movs	r2, #12
 800052c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800052e:	4b07      	ldr	r3, [pc, #28]	; (800054c <MX_USART2_UART_Init+0x48>)
 8000530:	2200      	movs	r2, #0
 8000532:	619a      	str	r2, [r3, #24]
	if (HAL_LIN_Init(&huart2, UART_LINBREAKDETECTLENGTH_10B) != HAL_OK) {
 8000534:	2100      	movs	r1, #0
 8000536:	4805      	ldr	r0, [pc, #20]	; (800054c <MX_USART2_UART_Init+0x48>)
 8000538:	f003 f894 	bl	8003664 <HAL_LIN_Init>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d001      	beq.n	8000546 <MX_USART2_UART_Init+0x42>
		Error_Handler();
 8000542:	f000 f829 	bl	8000598 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000546:	bf00      	nop
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	20000208 	.word	0x20000208
 8000550:	40004400 	.word	0x40004400

08000554 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
void MX_GPIO_Init(void) {
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800055a:	4b0e      	ldr	r3, [pc, #56]	; (8000594 <MX_GPIO_Init+0x40>)
 800055c:	699b      	ldr	r3, [r3, #24]
 800055e:	4a0d      	ldr	r2, [pc, #52]	; (8000594 <MX_GPIO_Init+0x40>)
 8000560:	f043 0320 	orr.w	r3, r3, #32
 8000564:	6193      	str	r3, [r2, #24]
 8000566:	4b0b      	ldr	r3, [pc, #44]	; (8000594 <MX_GPIO_Init+0x40>)
 8000568:	699b      	ldr	r3, [r3, #24]
 800056a:	f003 0320 	and.w	r3, r3, #32
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000572:	4b08      	ldr	r3, [pc, #32]	; (8000594 <MX_GPIO_Init+0x40>)
 8000574:	699b      	ldr	r3, [r3, #24]
 8000576:	4a07      	ldr	r2, [pc, #28]	; (8000594 <MX_GPIO_Init+0x40>)
 8000578:	f043 0304 	orr.w	r3, r3, #4
 800057c:	6193      	str	r3, [r2, #24]
 800057e:	4b05      	ldr	r3, [pc, #20]	; (8000594 <MX_GPIO_Init+0x40>)
 8000580:	699b      	ldr	r3, [r3, #24]
 8000582:	f003 0304 	and.w	r3, r3, #4
 8000586:	603b      	str	r3, [r7, #0]
 8000588:	683b      	ldr	r3, [r7, #0]

}
 800058a:	bf00      	nop
 800058c:	370c      	adds	r7, #12
 800058e:	46bd      	mov	sp, r7
 8000590:	bc80      	pop	{r7}
 8000592:	4770      	bx	lr
 8000594:	40021000 	.word	0x40021000

08000598 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800059c:	b672      	cpsid	i
}
 800059e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80005a0:	e7fe      	b.n	80005a0 <Error_Handler+0x8>

080005a2 <NBT_init>:
#include "stm32f1xx_hal.h"
#include "nbt.h"

//NBT - Non Blocking Timer
void NBT_init(nbt_t * nbt, uint32_t interval)
{
 80005a2:	b580      	push	{r7, lr}
 80005a4:	b082      	sub	sp, #8
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	6078      	str	r0, [r7, #4]
 80005aa:	6039      	str	r1, [r7, #0]
	nbt->timeout = interval;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	683a      	ldr	r2, [r7, #0]
 80005b0:	601a      	str	r2, [r3, #0]
	nbt->previousMillis = HAL_GetTick();
 80005b2:	f000 f9ab 	bl	800090c <HAL_GetTick>
 80005b6:	4602      	mov	r2, r0
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	605a      	str	r2, [r3, #4]
}
 80005bc:	bf00      	nop
 80005be:	3708      	adds	r7, #8
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}

080005c4 <NBT_handler>:

bool NBT_handler(nbt_t * nbt)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
	if(HAL_GetTick()-nbt->previousMillis>nbt->timeout){
 80005cc:	f000 f99e 	bl	800090c <HAL_GetTick>
 80005d0:	4602      	mov	r2, r0
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	685b      	ldr	r3, [r3, #4]
 80005d6:	1ad2      	subs	r2, r2, r3
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	429a      	cmp	r2, r3
 80005de:	d906      	bls.n	80005ee <NBT_handler+0x2a>
		nbt->previousMillis = HAL_GetTick();
 80005e0:	f000 f994 	bl	800090c <HAL_GetTick>
 80005e4:	4602      	mov	r2, r0
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	605a      	str	r2, [r3, #4]
		return true;
 80005ea:	2301      	movs	r3, #1
 80005ec:	e000      	b.n	80005f0 <NBT_handler+0x2c>
	}

	return false;
 80005ee:	2300      	movs	r3, #0
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005fe:	4b0e      	ldr	r3, [pc, #56]	; (8000638 <HAL_MspInit+0x40>)
 8000600:	699b      	ldr	r3, [r3, #24]
 8000602:	4a0d      	ldr	r2, [pc, #52]	; (8000638 <HAL_MspInit+0x40>)
 8000604:	f043 0301 	orr.w	r3, r3, #1
 8000608:	6193      	str	r3, [r2, #24]
 800060a:	4b0b      	ldr	r3, [pc, #44]	; (8000638 <HAL_MspInit+0x40>)
 800060c:	699b      	ldr	r3, [r3, #24]
 800060e:	f003 0301 	and.w	r3, r3, #1
 8000612:	607b      	str	r3, [r7, #4]
 8000614:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000616:	4b08      	ldr	r3, [pc, #32]	; (8000638 <HAL_MspInit+0x40>)
 8000618:	69db      	ldr	r3, [r3, #28]
 800061a:	4a07      	ldr	r2, [pc, #28]	; (8000638 <HAL_MspInit+0x40>)
 800061c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000620:	61d3      	str	r3, [r2, #28]
 8000622:	4b05      	ldr	r3, [pc, #20]	; (8000638 <HAL_MspInit+0x40>)
 8000624:	69db      	ldr	r3, [r3, #28]
 8000626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800062a:	603b      	str	r3, [r7, #0]
 800062c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800062e:	bf00      	nop
 8000630:	370c      	adds	r7, #12
 8000632:	46bd      	mov	sp, r7
 8000634:	bc80      	pop	{r7}
 8000636:	4770      	bx	lr
 8000638:	40021000 	.word	0x40021000

0800063c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b088      	sub	sp, #32
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000644:	f107 0310 	add.w	r3, r7, #16
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4a1f      	ldr	r2, [pc, #124]	; (80006d4 <HAL_UART_MspInit+0x98>)
 8000658:	4293      	cmp	r3, r2
 800065a:	d137      	bne.n	80006cc <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800065c:	4b1e      	ldr	r3, [pc, #120]	; (80006d8 <HAL_UART_MspInit+0x9c>)
 800065e:	69db      	ldr	r3, [r3, #28]
 8000660:	4a1d      	ldr	r2, [pc, #116]	; (80006d8 <HAL_UART_MspInit+0x9c>)
 8000662:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000666:	61d3      	str	r3, [r2, #28]
 8000668:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <HAL_UART_MspInit+0x9c>)
 800066a:	69db      	ldr	r3, [r3, #28]
 800066c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000670:	60fb      	str	r3, [r7, #12]
 8000672:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000674:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <HAL_UART_MspInit+0x9c>)
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	4a17      	ldr	r2, [pc, #92]	; (80006d8 <HAL_UART_MspInit+0x9c>)
 800067a:	f043 0304 	orr.w	r3, r3, #4
 800067e:	6193      	str	r3, [r2, #24]
 8000680:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <HAL_UART_MspInit+0x9c>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	f003 0304 	and.w	r3, r3, #4
 8000688:	60bb      	str	r3, [r7, #8]
 800068a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800068c:	2304      	movs	r3, #4
 800068e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000690:	2302      	movs	r3, #2
 8000692:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000694:	2303      	movs	r3, #3
 8000696:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000698:	f107 0310 	add.w	r3, r7, #16
 800069c:	4619      	mov	r1, r3
 800069e:	480f      	ldr	r0, [pc, #60]	; (80006dc <HAL_UART_MspInit+0xa0>)
 80006a0:	f000 fb54 	bl	8000d4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006a4:	2308      	movs	r3, #8
 80006a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ac:	2300      	movs	r3, #0
 80006ae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b0:	f107 0310 	add.w	r3, r7, #16
 80006b4:	4619      	mov	r1, r3
 80006b6:	4809      	ldr	r0, [pc, #36]	; (80006dc <HAL_UART_MspInit+0xa0>)
 80006b8:	f000 fb48 	bl	8000d4c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80006bc:	2200      	movs	r2, #0
 80006be:	2100      	movs	r1, #0
 80006c0:	2026      	movs	r0, #38	; 0x26
 80006c2:	f000 fa4c 	bl	8000b5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80006c6:	2026      	movs	r0, #38	; 0x26
 80006c8:	f000 fa65 	bl	8000b96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80006cc:	bf00      	nop
 80006ce:	3720      	adds	r7, #32
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	40004400 	.word	0x40004400
 80006d8:	40021000 	.word	0x40021000
 80006dc:	40010800 	.word	0x40010800

080006e0 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART2)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a09      	ldr	r2, [pc, #36]	; (8000714 <HAL_UART_MspDeInit+0x34>)
 80006ee:	4293      	cmp	r3, r2
 80006f0:	d10c      	bne.n	800070c <HAL_UART_MspDeInit+0x2c>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <HAL_UART_MspDeInit+0x38>)
 80006f4:	69db      	ldr	r3, [r3, #28]
 80006f6:	4a08      	ldr	r2, [pc, #32]	; (8000718 <HAL_UART_MspDeInit+0x38>)
 80006f8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80006fc:	61d3      	str	r3, [r2, #28]

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 80006fe:	210c      	movs	r1, #12
 8000700:	4806      	ldr	r0, [pc, #24]	; (800071c <HAL_UART_MspDeInit+0x3c>)
 8000702:	f000 fca7 	bl	8001054 <HAL_GPIO_DeInit>

    /* USART2 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8000706:	2026      	movs	r0, #38	; 0x26
 8000708:	f000 fa53 	bl	8000bb2 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 800070c:	bf00      	nop
 800070e:	3708      	adds	r7, #8
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40004400 	.word	0x40004400
 8000718:	40021000 	.word	0x40021000
 800071c:	40010800 	.word	0x40010800

08000720 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000724:	e7fe      	b.n	8000724 <NMI_Handler+0x4>

08000726 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000726:	b480      	push	{r7}
 8000728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800072a:	e7fe      	b.n	800072a <HardFault_Handler+0x4>

0800072c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000730:	e7fe      	b.n	8000730 <MemManage_Handler+0x4>

08000732 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000732:	b480      	push	{r7}
 8000734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000736:	e7fe      	b.n	8000736 <BusFault_Handler+0x4>

08000738 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800073c:	e7fe      	b.n	800073c <UsageFault_Handler+0x4>

0800073e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800073e:	b480      	push	{r7}
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000742:	bf00      	nop
 8000744:	46bd      	mov	sp, r7
 8000746:	bc80      	pop	{r7}
 8000748:	4770      	bx	lr

0800074a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800074a:	b480      	push	{r7}
 800074c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800074e:	bf00      	nop
 8000750:	46bd      	mov	sp, r7
 8000752:	bc80      	pop	{r7}
 8000754:	4770      	bx	lr

08000756 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000756:	b480      	push	{r7}
 8000758:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800075a:	bf00      	nop
 800075c:	46bd      	mov	sp, r7
 800075e:	bc80      	pop	{r7}
 8000760:	4770      	bx	lr

08000762 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000762:	b580      	push	{r7, lr}
 8000764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000766:	f000 f8bf 	bl	80008e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
	...

08000770 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000774:	4802      	ldr	r0, [pc, #8]	; (8000780 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000776:	f000 fe66 	bl	8001446 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20000f54 	.word	0x20000f54

08000784 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000788:	4802      	ldr	r0, [pc, #8]	; (8000794 <USART2_IRQHandler+0x10>)
 800078a:	f003 f8e9 	bl	8003960 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000208 	.word	0x20000208

08000798 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b086      	sub	sp, #24
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007a0:	4a14      	ldr	r2, [pc, #80]	; (80007f4 <_sbrk+0x5c>)
 80007a2:	4b15      	ldr	r3, [pc, #84]	; (80007f8 <_sbrk+0x60>)
 80007a4:	1ad3      	subs	r3, r2, r3
 80007a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007a8:	697b      	ldr	r3, [r7, #20]
 80007aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007ac:	4b13      	ldr	r3, [pc, #76]	; (80007fc <_sbrk+0x64>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d102      	bne.n	80007ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007b4:	4b11      	ldr	r3, [pc, #68]	; (80007fc <_sbrk+0x64>)
 80007b6:	4a12      	ldr	r2, [pc, #72]	; (8000800 <_sbrk+0x68>)
 80007b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007ba:	4b10      	ldr	r3, [pc, #64]	; (80007fc <_sbrk+0x64>)
 80007bc:	681a      	ldr	r2, [r3, #0]
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	4413      	add	r3, r2
 80007c2:	693a      	ldr	r2, [r7, #16]
 80007c4:	429a      	cmp	r2, r3
 80007c6:	d207      	bcs.n	80007d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007c8:	f008 f9f0 	bl	8008bac <__errno>
 80007cc:	4603      	mov	r3, r0
 80007ce:	220c      	movs	r2, #12
 80007d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007d2:	f04f 33ff 	mov.w	r3, #4294967295
 80007d6:	e009      	b.n	80007ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007d8:	4b08      	ldr	r3, [pc, #32]	; (80007fc <_sbrk+0x64>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007de:	4b07      	ldr	r3, [pc, #28]	; (80007fc <_sbrk+0x64>)
 80007e0:	681a      	ldr	r2, [r3, #0]
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	4413      	add	r3, r2
 80007e6:	4a05      	ldr	r2, [pc, #20]	; (80007fc <_sbrk+0x64>)
 80007e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007ea:	68fb      	ldr	r3, [r7, #12]
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	3718      	adds	r7, #24
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	20005000 	.word	0x20005000
 80007f8:	00000400 	.word	0x00000400
 80007fc:	20000284 	.word	0x20000284
 8000800:	20001478 	.word	0x20001478

08000804 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	bc80      	pop	{r7}
 800080e:	4770      	bx	lr

08000810 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000810:	f7ff fff8 	bl	8000804 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000814:	480b      	ldr	r0, [pc, #44]	; (8000844 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000816:	490c      	ldr	r1, [pc, #48]	; (8000848 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000818:	4a0c      	ldr	r2, [pc, #48]	; (800084c <LoopFillZerobss+0x16>)
  movs r3, #0
 800081a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800081c:	e002      	b.n	8000824 <LoopCopyDataInit>

0800081e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800081e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000820:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000822:	3304      	adds	r3, #4

08000824 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000824:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000826:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000828:	d3f9      	bcc.n	800081e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800082a:	4a09      	ldr	r2, [pc, #36]	; (8000850 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800082c:	4c09      	ldr	r4, [pc, #36]	; (8000854 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800082e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000830:	e001      	b.n	8000836 <LoopFillZerobss>

08000832 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000832:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000834:	3204      	adds	r2, #4

08000836 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000836:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000838:	d3fb      	bcc.n	8000832 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800083a:	f008 f9bd 	bl	8008bb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800083e:	f7ff fdf5 	bl	800042c <main>
  bx lr
 8000842:	4770      	bx	lr
  ldr r0, =_sdata
 8000844:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000848:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 800084c:	08009608 	.word	0x08009608
  ldr r2, =_sbss
 8000850:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8000854:	20001474 	.word	0x20001474

08000858 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000858:	e7fe      	b.n	8000858 <ADC1_2_IRQHandler>
	...

0800085c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000860:	4b08      	ldr	r3, [pc, #32]	; (8000884 <HAL_Init+0x28>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a07      	ldr	r2, [pc, #28]	; (8000884 <HAL_Init+0x28>)
 8000866:	f043 0310 	orr.w	r3, r3, #16
 800086a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800086c:	2003      	movs	r0, #3
 800086e:	f000 f96b 	bl	8000b48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000872:	200f      	movs	r0, #15
 8000874:	f000 f808 	bl	8000888 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000878:	f7ff febe 	bl	80005f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800087c:	2300      	movs	r3, #0
}
 800087e:	4618      	mov	r0, r3
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	40022000 	.word	0x40022000

08000888 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000890:	4b12      	ldr	r3, [pc, #72]	; (80008dc <HAL_InitTick+0x54>)
 8000892:	681a      	ldr	r2, [r3, #0]
 8000894:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <HAL_InitTick+0x58>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	4619      	mov	r1, r3
 800089a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800089e:	fbb3 f3f1 	udiv	r3, r3, r1
 80008a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008a6:	4618      	mov	r0, r3
 80008a8:	f000 f991 	bl	8000bce <HAL_SYSTICK_Config>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008b2:	2301      	movs	r3, #1
 80008b4:	e00e      	b.n	80008d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	2b0f      	cmp	r3, #15
 80008ba:	d80a      	bhi.n	80008d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008bc:	2200      	movs	r2, #0
 80008be:	6879      	ldr	r1, [r7, #4]
 80008c0:	f04f 30ff 	mov.w	r0, #4294967295
 80008c4:	f000 f94b 	bl	8000b5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008c8:	4a06      	ldr	r2, [pc, #24]	; (80008e4 <HAL_InitTick+0x5c>)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008ce:	2300      	movs	r3, #0
 80008d0:	e000      	b.n	80008d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008d2:	2301      	movs	r3, #1
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	3708      	adds	r7, #8
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	2000000c 	.word	0x2000000c
 80008e0:	20000014 	.word	0x20000014
 80008e4:	20000010 	.word	0x20000010

080008e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008ec:	4b05      	ldr	r3, [pc, #20]	; (8000904 <HAL_IncTick+0x1c>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	461a      	mov	r2, r3
 80008f2:	4b05      	ldr	r3, [pc, #20]	; (8000908 <HAL_IncTick+0x20>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4413      	add	r3, r2
 80008f8:	4a03      	ldr	r2, [pc, #12]	; (8000908 <HAL_IncTick+0x20>)
 80008fa:	6013      	str	r3, [r2, #0]
}
 80008fc:	bf00      	nop
 80008fe:	46bd      	mov	sp, r7
 8000900:	bc80      	pop	{r7}
 8000902:	4770      	bx	lr
 8000904:	20000014 	.word	0x20000014
 8000908:	20000288 	.word	0x20000288

0800090c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  return uwTick;
 8000910:	4b02      	ldr	r3, [pc, #8]	; (800091c <HAL_GetTick+0x10>)
 8000912:	681b      	ldr	r3, [r3, #0]
}
 8000914:	4618      	mov	r0, r3
 8000916:	46bd      	mov	sp, r7
 8000918:	bc80      	pop	{r7}
 800091a:	4770      	bx	lr
 800091c:	20000288 	.word	0x20000288

08000920 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000928:	f7ff fff0 	bl	800090c <HAL_GetTick>
 800092c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000938:	d005      	beq.n	8000946 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800093a:	4b0a      	ldr	r3, [pc, #40]	; (8000964 <HAL_Delay+0x44>)
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	461a      	mov	r2, r3
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	4413      	add	r3, r2
 8000944:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000946:	bf00      	nop
 8000948:	f7ff ffe0 	bl	800090c <HAL_GetTick>
 800094c:	4602      	mov	r2, r0
 800094e:	68bb      	ldr	r3, [r7, #8]
 8000950:	1ad3      	subs	r3, r2, r3
 8000952:	68fa      	ldr	r2, [r7, #12]
 8000954:	429a      	cmp	r2, r3
 8000956:	d8f7      	bhi.n	8000948 <HAL_Delay+0x28>
  {
  }
}
 8000958:	bf00      	nop
 800095a:	bf00      	nop
 800095c:	3710      	adds	r7, #16
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	20000014 	.word	0x20000014

08000968 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000968:	b480      	push	{r7}
 800096a:	b085      	sub	sp, #20
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	f003 0307 	and.w	r3, r3, #7
 8000976:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000978:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <__NVIC_SetPriorityGrouping+0x44>)
 800097a:	68db      	ldr	r3, [r3, #12]
 800097c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800097e:	68ba      	ldr	r2, [r7, #8]
 8000980:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000984:	4013      	ands	r3, r2
 8000986:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000990:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000994:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000998:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800099a:	4a04      	ldr	r2, [pc, #16]	; (80009ac <__NVIC_SetPriorityGrouping+0x44>)
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	60d3      	str	r3, [r2, #12]
}
 80009a0:	bf00      	nop
 80009a2:	3714      	adds	r7, #20
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bc80      	pop	{r7}
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	e000ed00 	.word	0xe000ed00

080009b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009b4:	4b04      	ldr	r3, [pc, #16]	; (80009c8 <__NVIC_GetPriorityGrouping+0x18>)
 80009b6:	68db      	ldr	r3, [r3, #12]
 80009b8:	0a1b      	lsrs	r3, r3, #8
 80009ba:	f003 0307 	and.w	r3, r3, #7
}
 80009be:	4618      	mov	r0, r3
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bc80      	pop	{r7}
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	e000ed00 	.word	0xe000ed00

080009cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	4603      	mov	r3, r0
 80009d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	db0b      	blt.n	80009f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009de:	79fb      	ldrb	r3, [r7, #7]
 80009e0:	f003 021f 	and.w	r2, r3, #31
 80009e4:	4906      	ldr	r1, [pc, #24]	; (8000a00 <__NVIC_EnableIRQ+0x34>)
 80009e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ea:	095b      	lsrs	r3, r3, #5
 80009ec:	2001      	movs	r0, #1
 80009ee:	fa00 f202 	lsl.w	r2, r0, r2
 80009f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009f6:	bf00      	nop
 80009f8:	370c      	adds	r7, #12
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bc80      	pop	{r7}
 80009fe:	4770      	bx	lr
 8000a00:	e000e100 	.word	0xe000e100

08000a04 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	db12      	blt.n	8000a3c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a16:	79fb      	ldrb	r3, [r7, #7]
 8000a18:	f003 021f 	and.w	r2, r3, #31
 8000a1c:	490a      	ldr	r1, [pc, #40]	; (8000a48 <__NVIC_DisableIRQ+0x44>)
 8000a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a22:	095b      	lsrs	r3, r3, #5
 8000a24:	2001      	movs	r0, #1
 8000a26:	fa00 f202 	lsl.w	r2, r0, r2
 8000a2a:	3320      	adds	r3, #32
 8000a2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000a30:	f3bf 8f4f 	dsb	sy
}
 8000a34:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a36:	f3bf 8f6f 	isb	sy
}
 8000a3a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000a3c:	bf00      	nop
 8000a3e:	370c      	adds	r7, #12
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bc80      	pop	{r7}
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	e000e100 	.word	0xe000e100

08000a4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	6039      	str	r1, [r7, #0]
 8000a56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	db0a      	blt.n	8000a76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	b2da      	uxtb	r2, r3
 8000a64:	490c      	ldr	r1, [pc, #48]	; (8000a98 <__NVIC_SetPriority+0x4c>)
 8000a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6a:	0112      	lsls	r2, r2, #4
 8000a6c:	b2d2      	uxtb	r2, r2
 8000a6e:	440b      	add	r3, r1
 8000a70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a74:	e00a      	b.n	8000a8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	b2da      	uxtb	r2, r3
 8000a7a:	4908      	ldr	r1, [pc, #32]	; (8000a9c <__NVIC_SetPriority+0x50>)
 8000a7c:	79fb      	ldrb	r3, [r7, #7]
 8000a7e:	f003 030f 	and.w	r3, r3, #15
 8000a82:	3b04      	subs	r3, #4
 8000a84:	0112      	lsls	r2, r2, #4
 8000a86:	b2d2      	uxtb	r2, r2
 8000a88:	440b      	add	r3, r1
 8000a8a:	761a      	strb	r2, [r3, #24]
}
 8000a8c:	bf00      	nop
 8000a8e:	370c      	adds	r7, #12
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bc80      	pop	{r7}
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	e000e100 	.word	0xe000e100
 8000a9c:	e000ed00 	.word	0xe000ed00

08000aa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b089      	sub	sp, #36	; 0x24
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	60f8      	str	r0, [r7, #12]
 8000aa8:	60b9      	str	r1, [r7, #8]
 8000aaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	f003 0307 	and.w	r3, r3, #7
 8000ab2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ab4:	69fb      	ldr	r3, [r7, #28]
 8000ab6:	f1c3 0307 	rsb	r3, r3, #7
 8000aba:	2b04      	cmp	r3, #4
 8000abc:	bf28      	it	cs
 8000abe:	2304      	movcs	r3, #4
 8000ac0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ac2:	69fb      	ldr	r3, [r7, #28]
 8000ac4:	3304      	adds	r3, #4
 8000ac6:	2b06      	cmp	r3, #6
 8000ac8:	d902      	bls.n	8000ad0 <NVIC_EncodePriority+0x30>
 8000aca:	69fb      	ldr	r3, [r7, #28]
 8000acc:	3b03      	subs	r3, #3
 8000ace:	e000      	b.n	8000ad2 <NVIC_EncodePriority+0x32>
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ad8:	69bb      	ldr	r3, [r7, #24]
 8000ada:	fa02 f303 	lsl.w	r3, r2, r3
 8000ade:	43da      	mvns	r2, r3
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	401a      	ands	r2, r3
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ae8:	f04f 31ff 	mov.w	r1, #4294967295
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	fa01 f303 	lsl.w	r3, r1, r3
 8000af2:	43d9      	mvns	r1, r3
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af8:	4313      	orrs	r3, r2
         );
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3724      	adds	r7, #36	; 0x24
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bc80      	pop	{r7}
 8000b02:	4770      	bx	lr

08000b04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	3b01      	subs	r3, #1
 8000b10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b14:	d301      	bcc.n	8000b1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b16:	2301      	movs	r3, #1
 8000b18:	e00f      	b.n	8000b3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b1a:	4a0a      	ldr	r2, [pc, #40]	; (8000b44 <SysTick_Config+0x40>)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	3b01      	subs	r3, #1
 8000b20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b22:	210f      	movs	r1, #15
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	f7ff ff90 	bl	8000a4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b2c:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <SysTick_Config+0x40>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b32:	4b04      	ldr	r3, [pc, #16]	; (8000b44 <SysTick_Config+0x40>)
 8000b34:	2207      	movs	r2, #7
 8000b36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b38:	2300      	movs	r3, #0
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	e000e010 	.word	0xe000e010

08000b48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b50:	6878      	ldr	r0, [r7, #4]
 8000b52:	f7ff ff09 	bl	8000968 <__NVIC_SetPriorityGrouping>
}
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	b086      	sub	sp, #24
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	4603      	mov	r3, r0
 8000b66:	60b9      	str	r1, [r7, #8]
 8000b68:	607a      	str	r2, [r7, #4]
 8000b6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b70:	f7ff ff1e 	bl	80009b0 <__NVIC_GetPriorityGrouping>
 8000b74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b76:	687a      	ldr	r2, [r7, #4]
 8000b78:	68b9      	ldr	r1, [r7, #8]
 8000b7a:	6978      	ldr	r0, [r7, #20]
 8000b7c:	f7ff ff90 	bl	8000aa0 <NVIC_EncodePriority>
 8000b80:	4602      	mov	r2, r0
 8000b82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b86:	4611      	mov	r1, r2
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff ff5f 	bl	8000a4c <__NVIC_SetPriority>
}
 8000b8e:	bf00      	nop
 8000b90:	3718      	adds	r7, #24
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b082      	sub	sp, #8
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff ff11 	bl	80009cc <__NVIC_EnableIRQ>
}
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	b082      	sub	sp, #8
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	4603      	mov	r3, r0
 8000bba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8000bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff ff1f 	bl	8000a04 <__NVIC_DisableIRQ>
}
 8000bc6:	bf00      	nop
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b082      	sub	sp, #8
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bd6:	6878      	ldr	r0, [r7, #4]
 8000bd8:	f7ff ff94 	bl	8000b04 <SysTick_Config>
 8000bdc:	4603      	mov	r3, r0
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}

08000be6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000be6:	b480      	push	{r7}
 8000be8:	b085      	sub	sp, #20
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	2b02      	cmp	r3, #2
 8000bfc:	d008      	beq.n	8000c10 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2204      	movs	r2, #4
 8000c02:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2200      	movs	r2, #0
 8000c08:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	e020      	b.n	8000c52 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f022 020e 	bic.w	r2, r2, #14
 8000c1e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f022 0201 	bic.w	r2, r2, #1
 8000c2e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c38:	2101      	movs	r1, #1
 8000c3a:	fa01 f202 	lsl.w	r2, r1, r2
 8000c3e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2201      	movs	r2, #1
 8000c44:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3714      	adds	r7, #20
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bc80      	pop	{r7}
 8000c5a:	4770      	bx	lr

08000c5c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c64:	2300      	movs	r3, #0
 8000c66:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	2b02      	cmp	r3, #2
 8000c72:	d005      	beq.n	8000c80 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2204      	movs	r2, #4
 8000c78:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	73fb      	strb	r3, [r7, #15]
 8000c7e:	e051      	b.n	8000d24 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f022 020e 	bic.w	r2, r2, #14
 8000c8e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f022 0201 	bic.w	r2, r2, #1
 8000c9e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a22      	ldr	r2, [pc, #136]	; (8000d30 <HAL_DMA_Abort_IT+0xd4>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d029      	beq.n	8000cfe <HAL_DMA_Abort_IT+0xa2>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a21      	ldr	r2, [pc, #132]	; (8000d34 <HAL_DMA_Abort_IT+0xd8>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d022      	beq.n	8000cfa <HAL_DMA_Abort_IT+0x9e>
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a1f      	ldr	r2, [pc, #124]	; (8000d38 <HAL_DMA_Abort_IT+0xdc>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d01a      	beq.n	8000cf4 <HAL_DMA_Abort_IT+0x98>
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a1e      	ldr	r2, [pc, #120]	; (8000d3c <HAL_DMA_Abort_IT+0xe0>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d012      	beq.n	8000cee <HAL_DMA_Abort_IT+0x92>
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a1c      	ldr	r2, [pc, #112]	; (8000d40 <HAL_DMA_Abort_IT+0xe4>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d00a      	beq.n	8000ce8 <HAL_DMA_Abort_IT+0x8c>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a1b      	ldr	r2, [pc, #108]	; (8000d44 <HAL_DMA_Abort_IT+0xe8>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d102      	bne.n	8000ce2 <HAL_DMA_Abort_IT+0x86>
 8000cdc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000ce0:	e00e      	b.n	8000d00 <HAL_DMA_Abort_IT+0xa4>
 8000ce2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ce6:	e00b      	b.n	8000d00 <HAL_DMA_Abort_IT+0xa4>
 8000ce8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cec:	e008      	b.n	8000d00 <HAL_DMA_Abort_IT+0xa4>
 8000cee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cf2:	e005      	b.n	8000d00 <HAL_DMA_Abort_IT+0xa4>
 8000cf4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cf8:	e002      	b.n	8000d00 <HAL_DMA_Abort_IT+0xa4>
 8000cfa:	2310      	movs	r3, #16
 8000cfc:	e000      	b.n	8000d00 <HAL_DMA_Abort_IT+0xa4>
 8000cfe:	2301      	movs	r3, #1
 8000d00:	4a11      	ldr	r2, [pc, #68]	; (8000d48 <HAL_DMA_Abort_IT+0xec>)
 8000d02:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2201      	movs	r2, #1
 8000d08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2200      	movs	r2, #0
 8000d10:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d003      	beq.n	8000d24 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d20:	6878      	ldr	r0, [r7, #4]
 8000d22:	4798      	blx	r3
    } 
  }
  return status;
 8000d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3710      	adds	r7, #16
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40020008 	.word	0x40020008
 8000d34:	4002001c 	.word	0x4002001c
 8000d38:	40020030 	.word	0x40020030
 8000d3c:	40020044 	.word	0x40020044
 8000d40:	40020058 	.word	0x40020058
 8000d44:	4002006c 	.word	0x4002006c
 8000d48:	40020000 	.word	0x40020000

08000d4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b08b      	sub	sp, #44	; 0x2c
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d56:	2300      	movs	r3, #0
 8000d58:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d5e:	e169      	b.n	8001034 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d60:	2201      	movs	r2, #1
 8000d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	69fa      	ldr	r2, [r7, #28]
 8000d70:	4013      	ands	r3, r2
 8000d72:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d74:	69ba      	ldr	r2, [r7, #24]
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	f040 8158 	bne.w	800102e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	4a9a      	ldr	r2, [pc, #616]	; (8000fec <HAL_GPIO_Init+0x2a0>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d05e      	beq.n	8000e46 <HAL_GPIO_Init+0xfa>
 8000d88:	4a98      	ldr	r2, [pc, #608]	; (8000fec <HAL_GPIO_Init+0x2a0>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d875      	bhi.n	8000e7a <HAL_GPIO_Init+0x12e>
 8000d8e:	4a98      	ldr	r2, [pc, #608]	; (8000ff0 <HAL_GPIO_Init+0x2a4>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d058      	beq.n	8000e46 <HAL_GPIO_Init+0xfa>
 8000d94:	4a96      	ldr	r2, [pc, #600]	; (8000ff0 <HAL_GPIO_Init+0x2a4>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d86f      	bhi.n	8000e7a <HAL_GPIO_Init+0x12e>
 8000d9a:	4a96      	ldr	r2, [pc, #600]	; (8000ff4 <HAL_GPIO_Init+0x2a8>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d052      	beq.n	8000e46 <HAL_GPIO_Init+0xfa>
 8000da0:	4a94      	ldr	r2, [pc, #592]	; (8000ff4 <HAL_GPIO_Init+0x2a8>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d869      	bhi.n	8000e7a <HAL_GPIO_Init+0x12e>
 8000da6:	4a94      	ldr	r2, [pc, #592]	; (8000ff8 <HAL_GPIO_Init+0x2ac>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d04c      	beq.n	8000e46 <HAL_GPIO_Init+0xfa>
 8000dac:	4a92      	ldr	r2, [pc, #584]	; (8000ff8 <HAL_GPIO_Init+0x2ac>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d863      	bhi.n	8000e7a <HAL_GPIO_Init+0x12e>
 8000db2:	4a92      	ldr	r2, [pc, #584]	; (8000ffc <HAL_GPIO_Init+0x2b0>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d046      	beq.n	8000e46 <HAL_GPIO_Init+0xfa>
 8000db8:	4a90      	ldr	r2, [pc, #576]	; (8000ffc <HAL_GPIO_Init+0x2b0>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d85d      	bhi.n	8000e7a <HAL_GPIO_Init+0x12e>
 8000dbe:	2b12      	cmp	r3, #18
 8000dc0:	d82a      	bhi.n	8000e18 <HAL_GPIO_Init+0xcc>
 8000dc2:	2b12      	cmp	r3, #18
 8000dc4:	d859      	bhi.n	8000e7a <HAL_GPIO_Init+0x12e>
 8000dc6:	a201      	add	r2, pc, #4	; (adr r2, 8000dcc <HAL_GPIO_Init+0x80>)
 8000dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dcc:	08000e47 	.word	0x08000e47
 8000dd0:	08000e21 	.word	0x08000e21
 8000dd4:	08000e33 	.word	0x08000e33
 8000dd8:	08000e75 	.word	0x08000e75
 8000ddc:	08000e7b 	.word	0x08000e7b
 8000de0:	08000e7b 	.word	0x08000e7b
 8000de4:	08000e7b 	.word	0x08000e7b
 8000de8:	08000e7b 	.word	0x08000e7b
 8000dec:	08000e7b 	.word	0x08000e7b
 8000df0:	08000e7b 	.word	0x08000e7b
 8000df4:	08000e7b 	.word	0x08000e7b
 8000df8:	08000e7b 	.word	0x08000e7b
 8000dfc:	08000e7b 	.word	0x08000e7b
 8000e00:	08000e7b 	.word	0x08000e7b
 8000e04:	08000e7b 	.word	0x08000e7b
 8000e08:	08000e7b 	.word	0x08000e7b
 8000e0c:	08000e7b 	.word	0x08000e7b
 8000e10:	08000e29 	.word	0x08000e29
 8000e14:	08000e3d 	.word	0x08000e3d
 8000e18:	4a79      	ldr	r2, [pc, #484]	; (8001000 <HAL_GPIO_Init+0x2b4>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d013      	beq.n	8000e46 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e1e:	e02c      	b.n	8000e7a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	623b      	str	r3, [r7, #32]
          break;
 8000e26:	e029      	b.n	8000e7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	3304      	adds	r3, #4
 8000e2e:	623b      	str	r3, [r7, #32]
          break;
 8000e30:	e024      	b.n	8000e7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	68db      	ldr	r3, [r3, #12]
 8000e36:	3308      	adds	r3, #8
 8000e38:	623b      	str	r3, [r7, #32]
          break;
 8000e3a:	e01f      	b.n	8000e7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	330c      	adds	r3, #12
 8000e42:	623b      	str	r3, [r7, #32]
          break;
 8000e44:	e01a      	b.n	8000e7c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d102      	bne.n	8000e54 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e4e:	2304      	movs	r3, #4
 8000e50:	623b      	str	r3, [r7, #32]
          break;
 8000e52:	e013      	b.n	8000e7c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	689b      	ldr	r3, [r3, #8]
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d105      	bne.n	8000e68 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e5c:	2308      	movs	r3, #8
 8000e5e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	69fa      	ldr	r2, [r7, #28]
 8000e64:	611a      	str	r2, [r3, #16]
          break;
 8000e66:	e009      	b.n	8000e7c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e68:	2308      	movs	r3, #8
 8000e6a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	69fa      	ldr	r2, [r7, #28]
 8000e70:	615a      	str	r2, [r3, #20]
          break;
 8000e72:	e003      	b.n	8000e7c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e74:	2300      	movs	r3, #0
 8000e76:	623b      	str	r3, [r7, #32]
          break;
 8000e78:	e000      	b.n	8000e7c <HAL_GPIO_Init+0x130>
          break;
 8000e7a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e7c:	69bb      	ldr	r3, [r7, #24]
 8000e7e:	2bff      	cmp	r3, #255	; 0xff
 8000e80:	d801      	bhi.n	8000e86 <HAL_GPIO_Init+0x13a>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	e001      	b.n	8000e8a <HAL_GPIO_Init+0x13e>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	3304      	adds	r3, #4
 8000e8a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e8c:	69bb      	ldr	r3, [r7, #24]
 8000e8e:	2bff      	cmp	r3, #255	; 0xff
 8000e90:	d802      	bhi.n	8000e98 <HAL_GPIO_Init+0x14c>
 8000e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	e002      	b.n	8000e9e <HAL_GPIO_Init+0x152>
 8000e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e9a:	3b08      	subs	r3, #8
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	210f      	movs	r1, #15
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8000eac:	43db      	mvns	r3, r3
 8000eae:	401a      	ands	r2, r3
 8000eb0:	6a39      	ldr	r1, [r7, #32]
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb8:	431a      	orrs	r2, r3
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	f000 80b1 	beq.w	800102e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ecc:	4b4d      	ldr	r3, [pc, #308]	; (8001004 <HAL_GPIO_Init+0x2b8>)
 8000ece:	699b      	ldr	r3, [r3, #24]
 8000ed0:	4a4c      	ldr	r2, [pc, #304]	; (8001004 <HAL_GPIO_Init+0x2b8>)
 8000ed2:	f043 0301 	orr.w	r3, r3, #1
 8000ed6:	6193      	str	r3, [r2, #24]
 8000ed8:	4b4a      	ldr	r3, [pc, #296]	; (8001004 <HAL_GPIO_Init+0x2b8>)
 8000eda:	699b      	ldr	r3, [r3, #24]
 8000edc:	f003 0301 	and.w	r3, r3, #1
 8000ee0:	60bb      	str	r3, [r7, #8]
 8000ee2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ee4:	4a48      	ldr	r2, [pc, #288]	; (8001008 <HAL_GPIO_Init+0x2bc>)
 8000ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee8:	089b      	lsrs	r3, r3, #2
 8000eea:	3302      	adds	r3, #2
 8000eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ef0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef4:	f003 0303 	and.w	r3, r3, #3
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	220f      	movs	r2, #15
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	43db      	mvns	r3, r3
 8000f02:	68fa      	ldr	r2, [r7, #12]
 8000f04:	4013      	ands	r3, r2
 8000f06:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	4a40      	ldr	r2, [pc, #256]	; (800100c <HAL_GPIO_Init+0x2c0>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d013      	beq.n	8000f38 <HAL_GPIO_Init+0x1ec>
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	4a3f      	ldr	r2, [pc, #252]	; (8001010 <HAL_GPIO_Init+0x2c4>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d00d      	beq.n	8000f34 <HAL_GPIO_Init+0x1e8>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	4a3e      	ldr	r2, [pc, #248]	; (8001014 <HAL_GPIO_Init+0x2c8>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d007      	beq.n	8000f30 <HAL_GPIO_Init+0x1e4>
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	4a3d      	ldr	r2, [pc, #244]	; (8001018 <HAL_GPIO_Init+0x2cc>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d101      	bne.n	8000f2c <HAL_GPIO_Init+0x1e0>
 8000f28:	2303      	movs	r3, #3
 8000f2a:	e006      	b.n	8000f3a <HAL_GPIO_Init+0x1ee>
 8000f2c:	2304      	movs	r3, #4
 8000f2e:	e004      	b.n	8000f3a <HAL_GPIO_Init+0x1ee>
 8000f30:	2302      	movs	r3, #2
 8000f32:	e002      	b.n	8000f3a <HAL_GPIO_Init+0x1ee>
 8000f34:	2301      	movs	r3, #1
 8000f36:	e000      	b.n	8000f3a <HAL_GPIO_Init+0x1ee>
 8000f38:	2300      	movs	r3, #0
 8000f3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f3c:	f002 0203 	and.w	r2, r2, #3
 8000f40:	0092      	lsls	r2, r2, #2
 8000f42:	4093      	lsls	r3, r2
 8000f44:	68fa      	ldr	r2, [r7, #12]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f4a:	492f      	ldr	r1, [pc, #188]	; (8001008 <HAL_GPIO_Init+0x2bc>)
 8000f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f4e:	089b      	lsrs	r3, r3, #2
 8000f50:	3302      	adds	r3, #2
 8000f52:	68fa      	ldr	r2, [r7, #12]
 8000f54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d006      	beq.n	8000f72 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f64:	4b2d      	ldr	r3, [pc, #180]	; (800101c <HAL_GPIO_Init+0x2d0>)
 8000f66:	689a      	ldr	r2, [r3, #8]
 8000f68:	492c      	ldr	r1, [pc, #176]	; (800101c <HAL_GPIO_Init+0x2d0>)
 8000f6a:	69bb      	ldr	r3, [r7, #24]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	608b      	str	r3, [r1, #8]
 8000f70:	e006      	b.n	8000f80 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f72:	4b2a      	ldr	r3, [pc, #168]	; (800101c <HAL_GPIO_Init+0x2d0>)
 8000f74:	689a      	ldr	r2, [r3, #8]
 8000f76:	69bb      	ldr	r3, [r7, #24]
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	4928      	ldr	r1, [pc, #160]	; (800101c <HAL_GPIO_Init+0x2d0>)
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d006      	beq.n	8000f9a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f8c:	4b23      	ldr	r3, [pc, #140]	; (800101c <HAL_GPIO_Init+0x2d0>)
 8000f8e:	68da      	ldr	r2, [r3, #12]
 8000f90:	4922      	ldr	r1, [pc, #136]	; (800101c <HAL_GPIO_Init+0x2d0>)
 8000f92:	69bb      	ldr	r3, [r7, #24]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	60cb      	str	r3, [r1, #12]
 8000f98:	e006      	b.n	8000fa8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f9a:	4b20      	ldr	r3, [pc, #128]	; (800101c <HAL_GPIO_Init+0x2d0>)
 8000f9c:	68da      	ldr	r2, [r3, #12]
 8000f9e:	69bb      	ldr	r3, [r7, #24]
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	491e      	ldr	r1, [pc, #120]	; (800101c <HAL_GPIO_Init+0x2d0>)
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d006      	beq.n	8000fc2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000fb4:	4b19      	ldr	r3, [pc, #100]	; (800101c <HAL_GPIO_Init+0x2d0>)
 8000fb6:	685a      	ldr	r2, [r3, #4]
 8000fb8:	4918      	ldr	r1, [pc, #96]	; (800101c <HAL_GPIO_Init+0x2d0>)
 8000fba:	69bb      	ldr	r3, [r7, #24]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	604b      	str	r3, [r1, #4]
 8000fc0:	e006      	b.n	8000fd0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000fc2:	4b16      	ldr	r3, [pc, #88]	; (800101c <HAL_GPIO_Init+0x2d0>)
 8000fc4:	685a      	ldr	r2, [r3, #4]
 8000fc6:	69bb      	ldr	r3, [r7, #24]
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	4914      	ldr	r1, [pc, #80]	; (800101c <HAL_GPIO_Init+0x2d0>)
 8000fcc:	4013      	ands	r3, r2
 8000fce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d021      	beq.n	8001020 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000fdc:	4b0f      	ldr	r3, [pc, #60]	; (800101c <HAL_GPIO_Init+0x2d0>)
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	490e      	ldr	r1, [pc, #56]	; (800101c <HAL_GPIO_Init+0x2d0>)
 8000fe2:	69bb      	ldr	r3, [r7, #24]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	600b      	str	r3, [r1, #0]
 8000fe8:	e021      	b.n	800102e <HAL_GPIO_Init+0x2e2>
 8000fea:	bf00      	nop
 8000fec:	10320000 	.word	0x10320000
 8000ff0:	10310000 	.word	0x10310000
 8000ff4:	10220000 	.word	0x10220000
 8000ff8:	10210000 	.word	0x10210000
 8000ffc:	10120000 	.word	0x10120000
 8001000:	10110000 	.word	0x10110000
 8001004:	40021000 	.word	0x40021000
 8001008:	40010000 	.word	0x40010000
 800100c:	40010800 	.word	0x40010800
 8001010:	40010c00 	.word	0x40010c00
 8001014:	40011000 	.word	0x40011000
 8001018:	40011400 	.word	0x40011400
 800101c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001020:	4b0b      	ldr	r3, [pc, #44]	; (8001050 <HAL_GPIO_Init+0x304>)
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	43db      	mvns	r3, r3
 8001028:	4909      	ldr	r1, [pc, #36]	; (8001050 <HAL_GPIO_Init+0x304>)
 800102a:	4013      	ands	r3, r2
 800102c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800102e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001030:	3301      	adds	r3, #1
 8001032:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800103a:	fa22 f303 	lsr.w	r3, r2, r3
 800103e:	2b00      	cmp	r3, #0
 8001040:	f47f ae8e 	bne.w	8000d60 <HAL_GPIO_Init+0x14>
  }
}
 8001044:	bf00      	nop
 8001046:	bf00      	nop
 8001048:	372c      	adds	r7, #44	; 0x2c
 800104a:	46bd      	mov	sp, r7
 800104c:	bc80      	pop	{r7}
 800104e:	4770      	bx	lr
 8001050:	40010400 	.word	0x40010400

08001054 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001054:	b480      	push	{r7}
 8001056:	b089      	sub	sp, #36	; 0x24
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800105e:	2300      	movs	r3, #0
 8001060:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8001062:	e09a      	b.n	800119a <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001064:	2201      	movs	r2, #1
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	683a      	ldr	r2, [r7, #0]
 800106e:	4013      	ands	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8001072:	69bb      	ldr	r3, [r7, #24]
 8001074:	2b00      	cmp	r3, #0
 8001076:	f000 808d 	beq.w	8001194 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 800107a:	4a4e      	ldr	r2, [pc, #312]	; (80011b4 <HAL_GPIO_DeInit+0x160>)
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	089b      	lsrs	r3, r3, #2
 8001080:	3302      	adds	r3, #2
 8001082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001086:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	f003 0303 	and.w	r3, r3, #3
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	220f      	movs	r2, #15
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	697a      	ldr	r2, [r7, #20]
 8001098:	4013      	ands	r3, r2
 800109a:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4a46      	ldr	r2, [pc, #280]	; (80011b8 <HAL_GPIO_DeInit+0x164>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d013      	beq.n	80010cc <HAL_GPIO_DeInit+0x78>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	4a45      	ldr	r2, [pc, #276]	; (80011bc <HAL_GPIO_DeInit+0x168>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d00d      	beq.n	80010c8 <HAL_GPIO_DeInit+0x74>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	4a44      	ldr	r2, [pc, #272]	; (80011c0 <HAL_GPIO_DeInit+0x16c>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d007      	beq.n	80010c4 <HAL_GPIO_DeInit+0x70>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4a43      	ldr	r2, [pc, #268]	; (80011c4 <HAL_GPIO_DeInit+0x170>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d101      	bne.n	80010c0 <HAL_GPIO_DeInit+0x6c>
 80010bc:	2303      	movs	r3, #3
 80010be:	e006      	b.n	80010ce <HAL_GPIO_DeInit+0x7a>
 80010c0:	2304      	movs	r3, #4
 80010c2:	e004      	b.n	80010ce <HAL_GPIO_DeInit+0x7a>
 80010c4:	2302      	movs	r3, #2
 80010c6:	e002      	b.n	80010ce <HAL_GPIO_DeInit+0x7a>
 80010c8:	2301      	movs	r3, #1
 80010ca:	e000      	b.n	80010ce <HAL_GPIO_DeInit+0x7a>
 80010cc:	2300      	movs	r3, #0
 80010ce:	69fa      	ldr	r2, [r7, #28]
 80010d0:	f002 0203 	and.w	r2, r2, #3
 80010d4:	0092      	lsls	r2, r2, #2
 80010d6:	4093      	lsls	r3, r2
 80010d8:	697a      	ldr	r2, [r7, #20]
 80010da:	429a      	cmp	r2, r3
 80010dc:	d132      	bne.n	8001144 <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80010de:	4b3a      	ldr	r3, [pc, #232]	; (80011c8 <HAL_GPIO_DeInit+0x174>)
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	43db      	mvns	r3, r3
 80010e6:	4938      	ldr	r1, [pc, #224]	; (80011c8 <HAL_GPIO_DeInit+0x174>)
 80010e8:	4013      	ands	r3, r2
 80010ea:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80010ec:	4b36      	ldr	r3, [pc, #216]	; (80011c8 <HAL_GPIO_DeInit+0x174>)
 80010ee:	685a      	ldr	r2, [r3, #4]
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	43db      	mvns	r3, r3
 80010f4:	4934      	ldr	r1, [pc, #208]	; (80011c8 <HAL_GPIO_DeInit+0x174>)
 80010f6:	4013      	ands	r3, r2
 80010f8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80010fa:	4b33      	ldr	r3, [pc, #204]	; (80011c8 <HAL_GPIO_DeInit+0x174>)
 80010fc:	68da      	ldr	r2, [r3, #12]
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	43db      	mvns	r3, r3
 8001102:	4931      	ldr	r1, [pc, #196]	; (80011c8 <HAL_GPIO_DeInit+0x174>)
 8001104:	4013      	ands	r3, r2
 8001106:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8001108:	4b2f      	ldr	r3, [pc, #188]	; (80011c8 <HAL_GPIO_DeInit+0x174>)
 800110a:	689a      	ldr	r2, [r3, #8]
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	43db      	mvns	r3, r3
 8001110:	492d      	ldr	r1, [pc, #180]	; (80011c8 <HAL_GPIO_DeInit+0x174>)
 8001112:	4013      	ands	r3, r2
 8001114:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	f003 0303 	and.w	r3, r3, #3
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	220f      	movs	r2, #15
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8001126:	4a23      	ldr	r2, [pc, #140]	; (80011b4 <HAL_GPIO_DeInit+0x160>)
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	089b      	lsrs	r3, r3, #2
 800112c:	3302      	adds	r3, #2
 800112e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	43da      	mvns	r2, r3
 8001136:	481f      	ldr	r0, [pc, #124]	; (80011b4 <HAL_GPIO_DeInit+0x160>)
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	089b      	lsrs	r3, r3, #2
 800113c:	400a      	ands	r2, r1
 800113e:	3302      	adds	r3, #2
 8001140:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001144:	69bb      	ldr	r3, [r7, #24]
 8001146:	2bff      	cmp	r3, #255	; 0xff
 8001148:	d801      	bhi.n	800114e <HAL_GPIO_DeInit+0xfa>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	e001      	b.n	8001152 <HAL_GPIO_DeInit+0xfe>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	3304      	adds	r3, #4
 8001152:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	2bff      	cmp	r3, #255	; 0xff
 8001158:	d802      	bhi.n	8001160 <HAL_GPIO_DeInit+0x10c>
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	e002      	b.n	8001166 <HAL_GPIO_DeInit+0x112>
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	3b08      	subs	r3, #8
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	210f      	movs	r1, #15
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	fa01 f303 	lsl.w	r3, r1, r3
 8001174:	43db      	mvns	r3, r3
 8001176:	401a      	ands	r2, r3
 8001178:	2104      	movs	r1, #4
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	fa01 f303 	lsl.w	r3, r1, r3
 8001180:	431a      	orrs	r2, r3
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	68da      	ldr	r2, [r3, #12]
 800118a:	69bb      	ldr	r3, [r7, #24]
 800118c:	43db      	mvns	r3, r3
 800118e:	401a      	ands	r2, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	60da      	str	r2, [r3, #12]
    }

    position++;
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	3301      	adds	r3, #1
 8001198:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 800119a:	683a      	ldr	r2, [r7, #0]
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	fa22 f303 	lsr.w	r3, r2, r3
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	f47f af5e 	bne.w	8001064 <HAL_GPIO_DeInit+0x10>
  }
}
 80011a8:	bf00      	nop
 80011aa:	bf00      	nop
 80011ac:	3724      	adds	r7, #36	; 0x24
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bc80      	pop	{r7}
 80011b2:	4770      	bx	lr
 80011b4:	40010000 	.word	0x40010000
 80011b8:	40010800 	.word	0x40010800
 80011bc:	40010c00 	.word	0x40010c00
 80011c0:	40011000 	.word	0x40011000
 80011c4:	40011400 	.word	0x40011400
 80011c8:	40010400 	.word	0x40010400

080011cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	460b      	mov	r3, r1
 80011d6:	807b      	strh	r3, [r7, #2]
 80011d8:	4613      	mov	r3, r2
 80011da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011dc:	787b      	ldrb	r3, [r7, #1]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d003      	beq.n	80011ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011e2:	887a      	ldrh	r2, [r7, #2]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80011e8:	e003      	b.n	80011f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011ea:	887b      	ldrh	r3, [r7, #2]
 80011ec:	041a      	lsls	r2, r3, #16
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	611a      	str	r2, [r3, #16]
}
 80011f2:	bf00      	nop
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bc80      	pop	{r7}
 80011fa:	4770      	bx	lr

080011fc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80011fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011fe:	b08b      	sub	sp, #44	; 0x2c
 8001200:	af06      	add	r7, sp, #24
 8001202:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d101      	bne.n	800120e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e0f1      	b.n	80013f2 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001214:	b2db      	uxtb	r3, r3
 8001216:	2b00      	cmp	r3, #0
 8001218:	d106      	bne.n	8001228 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2200      	movs	r2, #0
 800121e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f007 fa18 	bl	8008658 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2203      	movs	r2, #3
 800122c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4618      	mov	r0, r3
 8001236:	f003 f937 	bl	80044a8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	603b      	str	r3, [r7, #0]
 8001240:	687e      	ldr	r6, [r7, #4]
 8001242:	466d      	mov	r5, sp
 8001244:	f106 0410 	add.w	r4, r6, #16
 8001248:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800124a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800124c:	6823      	ldr	r3, [r4, #0]
 800124e:	602b      	str	r3, [r5, #0]
 8001250:	1d33      	adds	r3, r6, #4
 8001252:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001254:	6838      	ldr	r0, [r7, #0]
 8001256:	f003 f901 	bl	800445c <USB_CoreInit>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d005      	beq.n	800126c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2202      	movs	r2, #2
 8001264:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	e0c2      	b.n	80013f2 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2100      	movs	r1, #0
 8001272:	4618      	mov	r0, r3
 8001274:	f003 f932 	bl	80044dc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001278:	2300      	movs	r3, #0
 800127a:	73fb      	strb	r3, [r7, #15]
 800127c:	e040      	b.n	8001300 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800127e:	7bfb      	ldrb	r3, [r7, #15]
 8001280:	6879      	ldr	r1, [r7, #4]
 8001282:	1c5a      	adds	r2, r3, #1
 8001284:	4613      	mov	r3, r2
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	4413      	add	r3, r2
 800128a:	00db      	lsls	r3, r3, #3
 800128c:	440b      	add	r3, r1
 800128e:	3301      	adds	r3, #1
 8001290:	2201      	movs	r2, #1
 8001292:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001294:	7bfb      	ldrb	r3, [r7, #15]
 8001296:	6879      	ldr	r1, [r7, #4]
 8001298:	1c5a      	adds	r2, r3, #1
 800129a:	4613      	mov	r3, r2
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	4413      	add	r3, r2
 80012a0:	00db      	lsls	r3, r3, #3
 80012a2:	440b      	add	r3, r1
 80012a4:	7bfa      	ldrb	r2, [r7, #15]
 80012a6:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80012a8:	7bfb      	ldrb	r3, [r7, #15]
 80012aa:	6879      	ldr	r1, [r7, #4]
 80012ac:	1c5a      	adds	r2, r3, #1
 80012ae:	4613      	mov	r3, r2
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	4413      	add	r3, r2
 80012b4:	00db      	lsls	r3, r3, #3
 80012b6:	440b      	add	r3, r1
 80012b8:	3303      	adds	r3, #3
 80012ba:	2200      	movs	r2, #0
 80012bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80012be:	7bfa      	ldrb	r2, [r7, #15]
 80012c0:	6879      	ldr	r1, [r7, #4]
 80012c2:	4613      	mov	r3, r2
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	4413      	add	r3, r2
 80012c8:	00db      	lsls	r3, r3, #3
 80012ca:	440b      	add	r3, r1
 80012cc:	3338      	adds	r3, #56	; 0x38
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80012d2:	7bfa      	ldrb	r2, [r7, #15]
 80012d4:	6879      	ldr	r1, [r7, #4]
 80012d6:	4613      	mov	r3, r2
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	4413      	add	r3, r2
 80012dc:	00db      	lsls	r3, r3, #3
 80012de:	440b      	add	r3, r1
 80012e0:	333c      	adds	r3, #60	; 0x3c
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80012e6:	7bfa      	ldrb	r2, [r7, #15]
 80012e8:	6879      	ldr	r1, [r7, #4]
 80012ea:	4613      	mov	r3, r2
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	4413      	add	r3, r2
 80012f0:	00db      	lsls	r3, r3, #3
 80012f2:	440b      	add	r3, r1
 80012f4:	3340      	adds	r3, #64	; 0x40
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012fa:	7bfb      	ldrb	r3, [r7, #15]
 80012fc:	3301      	adds	r3, #1
 80012fe:	73fb      	strb	r3, [r7, #15]
 8001300:	7bfa      	ldrb	r2, [r7, #15]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	429a      	cmp	r2, r3
 8001308:	d3b9      	bcc.n	800127e <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800130a:	2300      	movs	r3, #0
 800130c:	73fb      	strb	r3, [r7, #15]
 800130e:	e044      	b.n	800139a <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001310:	7bfa      	ldrb	r2, [r7, #15]
 8001312:	6879      	ldr	r1, [r7, #4]
 8001314:	4613      	mov	r3, r2
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	4413      	add	r3, r2
 800131a:	00db      	lsls	r3, r3, #3
 800131c:	440b      	add	r3, r1
 800131e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001322:	2200      	movs	r2, #0
 8001324:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001326:	7bfa      	ldrb	r2, [r7, #15]
 8001328:	6879      	ldr	r1, [r7, #4]
 800132a:	4613      	mov	r3, r2
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	4413      	add	r3, r2
 8001330:	00db      	lsls	r3, r3, #3
 8001332:	440b      	add	r3, r1
 8001334:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001338:	7bfa      	ldrb	r2, [r7, #15]
 800133a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800133c:	7bfa      	ldrb	r2, [r7, #15]
 800133e:	6879      	ldr	r1, [r7, #4]
 8001340:	4613      	mov	r3, r2
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	4413      	add	r3, r2
 8001346:	00db      	lsls	r3, r3, #3
 8001348:	440b      	add	r3, r1
 800134a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800134e:	2200      	movs	r2, #0
 8001350:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001352:	7bfa      	ldrb	r2, [r7, #15]
 8001354:	6879      	ldr	r1, [r7, #4]
 8001356:	4613      	mov	r3, r2
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	4413      	add	r3, r2
 800135c:	00db      	lsls	r3, r3, #3
 800135e:	440b      	add	r3, r1
 8001360:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001368:	7bfa      	ldrb	r2, [r7, #15]
 800136a:	6879      	ldr	r1, [r7, #4]
 800136c:	4613      	mov	r3, r2
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	4413      	add	r3, r2
 8001372:	00db      	lsls	r3, r3, #3
 8001374:	440b      	add	r3, r1
 8001376:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800137e:	7bfa      	ldrb	r2, [r7, #15]
 8001380:	6879      	ldr	r1, [r7, #4]
 8001382:	4613      	mov	r3, r2
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	4413      	add	r3, r2
 8001388:	00db      	lsls	r3, r3, #3
 800138a:	440b      	add	r3, r1
 800138c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001394:	7bfb      	ldrb	r3, [r7, #15]
 8001396:	3301      	adds	r3, #1
 8001398:	73fb      	strb	r3, [r7, #15]
 800139a:	7bfa      	ldrb	r2, [r7, #15]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d3b5      	bcc.n	8001310 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	603b      	str	r3, [r7, #0]
 80013aa:	687e      	ldr	r6, [r7, #4]
 80013ac:	466d      	mov	r5, sp
 80013ae:	f106 0410 	add.w	r4, r6, #16
 80013b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013b6:	6823      	ldr	r3, [r4, #0]
 80013b8:	602b      	str	r3, [r5, #0]
 80013ba:	1d33      	adds	r3, r6, #4
 80013bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013be:	6838      	ldr	r0, [r7, #0]
 80013c0:	f003 f898 	bl	80044f4 <USB_DevInit>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d005      	beq.n	80013d6 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2202      	movs	r2, #2
 80013ce:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e00d      	b.n	80013f2 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2200      	movs	r2, #0
 80013da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2201      	movs	r2, #1
 80013e2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f005 fb19 	bl	8006a22 <USB_DevDisconnect>

  return HAL_OK;
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3714      	adds	r7, #20
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080013fa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b082      	sub	sp, #8
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001408:	2b01      	cmp	r3, #1
 800140a:	d101      	bne.n	8001410 <HAL_PCD_Start+0x16>
 800140c:	2302      	movs	r3, #2
 800140e:	e016      	b.n	800143e <HAL_PCD_Start+0x44>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2201      	movs	r2, #1
 8001414:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4618      	mov	r0, r3
 800141e:	f003 f82d 	bl	800447c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001422:	2101      	movs	r1, #1
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f007 fb8a 	bl	8008b3e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4618      	mov	r0, r3
 8001430:	f005 faed 	bl	8006a0e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2200      	movs	r2, #0
 8001438:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	b088      	sub	sp, #32
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4618      	mov	r0, r3
 8001454:	f005 faef 	bl	8006a36 <USB_ReadInterrupts>
 8001458:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001460:	2b00      	cmp	r3, #0
 8001462:	d003      	beq.n	800146c <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f000 fb1b 	bl	8001aa0 <PCD_EP_ISR_Handler>

    return;
 800146a:	e119      	b.n	80016a0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001472:	2b00      	cmp	r3, #0
 8001474:	d013      	beq.n	800149e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800147e:	b29a      	uxth	r2, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001488:	b292      	uxth	r2, r2
 800148a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f007 f95d 	bl	800874e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001494:	2100      	movs	r1, #0
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f000 f905 	bl	80016a6 <HAL_PCD_SetAddress>

    return;
 800149c:	e100      	b.n	80016a0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d00c      	beq.n	80014c2 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014b0:	b29a      	uxth	r2, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80014ba:	b292      	uxth	r2, r2
 80014bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80014c0:	e0ee      	b.n	80016a0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d00c      	beq.n	80014e6 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014d4:	b29a      	uxth	r2, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80014de:	b292      	uxth	r2, r2
 80014e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80014e4:	e0dc      	b.n	80016a0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d027      	beq.n	8001540 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80014f8:	b29a      	uxth	r2, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f022 0204 	bic.w	r2, r2, #4
 8001502:	b292      	uxth	r2, r2
 8001504:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001510:	b29a      	uxth	r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f022 0208 	bic.w	r2, r2, #8
 800151a:	b292      	uxth	r2, r2
 800151c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f007 f94d 	bl	80087c0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800152e:	b29a      	uxth	r2, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001538:	b292      	uxth	r2, r2
 800153a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800153e:	e0af      	b.n	80016a0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001546:	2b00      	cmp	r3, #0
 8001548:	f000 8083 	beq.w	8001652 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 800154c:	2300      	movs	r3, #0
 800154e:	77fb      	strb	r3, [r7, #31]
 8001550:	e010      	b.n	8001574 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	461a      	mov	r2, r3
 8001558:	7ffb      	ldrb	r3, [r7, #31]
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	441a      	add	r2, r3
 800155e:	7ffb      	ldrb	r3, [r7, #31]
 8001560:	8812      	ldrh	r2, [r2, #0]
 8001562:	b292      	uxth	r2, r2
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	3320      	adds	r3, #32
 8001568:	443b      	add	r3, r7
 800156a:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 800156e:	7ffb      	ldrb	r3, [r7, #31]
 8001570:	3301      	adds	r3, #1
 8001572:	77fb      	strb	r3, [r7, #31]
 8001574:	7ffb      	ldrb	r3, [r7, #31]
 8001576:	2b07      	cmp	r3, #7
 8001578:	d9eb      	bls.n	8001552 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001582:	b29a      	uxth	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f042 0201 	orr.w	r2, r2, #1
 800158c:	b292      	uxth	r2, r2
 800158e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800159a:	b29a      	uxth	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f022 0201 	bic.w	r2, r2, #1
 80015a4:	b292      	uxth	r2, r2
 80015a6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80015aa:	bf00      	nop
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015b4:	b29b      	uxth	r3, r3
 80015b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d0f6      	beq.n	80015ac <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015c6:	b29a      	uxth	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015d0:	b292      	uxth	r2, r2
 80015d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80015d6:	2300      	movs	r3, #0
 80015d8:	77fb      	strb	r3, [r7, #31]
 80015da:	e00f      	b.n	80015fc <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80015dc:	7ffb      	ldrb	r3, [r7, #31]
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	6812      	ldr	r2, [r2, #0]
 80015e2:	4611      	mov	r1, r2
 80015e4:	7ffa      	ldrb	r2, [r7, #31]
 80015e6:	0092      	lsls	r2, r2, #2
 80015e8:	440a      	add	r2, r1
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	3320      	adds	r3, #32
 80015ee:	443b      	add	r3, r7
 80015f0:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80015f4:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80015f6:	7ffb      	ldrb	r3, [r7, #31]
 80015f8:	3301      	adds	r3, #1
 80015fa:	77fb      	strb	r3, [r7, #31]
 80015fc:	7ffb      	ldrb	r3, [r7, #31]
 80015fe:	2b07      	cmp	r3, #7
 8001600:	d9ec      	bls.n	80015dc <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800160a:	b29a      	uxth	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f042 0208 	orr.w	r2, r2, #8
 8001614:	b292      	uxth	r2, r2
 8001616:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001622:	b29a      	uxth	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800162c:	b292      	uxth	r2, r2
 800162e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800163a:	b29a      	uxth	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f042 0204 	orr.w	r2, r2, #4
 8001644:	b292      	uxth	r2, r2
 8001646:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f007 f89e 	bl	800878c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001650:	e026      	b.n	80016a0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001658:	2b00      	cmp	r3, #0
 800165a:	d00f      	beq.n	800167c <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001664:	b29a      	uxth	r2, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800166e:	b292      	uxth	r2, r2
 8001670:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f007 f85c 	bl	8008732 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800167a:	e011      	b.n	80016a0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001682:	2b00      	cmp	r3, #0
 8001684:	d00c      	beq.n	80016a0 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800168e:	b29a      	uxth	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001698:	b292      	uxth	r2, r2
 800169a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800169e:	bf00      	nop
  }
}
 80016a0:	3720      	adds	r7, #32
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b082      	sub	sp, #8
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
 80016ae:	460b      	mov	r3, r1
 80016b0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d101      	bne.n	80016c0 <HAL_PCD_SetAddress+0x1a>
 80016bc:	2302      	movs	r3, #2
 80016be:	e013      	b.n	80016e8 <HAL_PCD_SetAddress+0x42>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2201      	movs	r2, #1
 80016c4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	78fa      	ldrb	r2, [r7, #3]
 80016cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	78fa      	ldrb	r2, [r7, #3]
 80016d6:	4611      	mov	r1, r2
 80016d8:	4618      	mov	r0, r3
 80016da:	f005 f985 	bl	80069e8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80016e6:	2300      	movs	r3, #0
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	4608      	mov	r0, r1
 80016fa:	4611      	mov	r1, r2
 80016fc:	461a      	mov	r2, r3
 80016fe:	4603      	mov	r3, r0
 8001700:	70fb      	strb	r3, [r7, #3]
 8001702:	460b      	mov	r3, r1
 8001704:	803b      	strh	r3, [r7, #0]
 8001706:	4613      	mov	r3, r2
 8001708:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800170a:	2300      	movs	r3, #0
 800170c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800170e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001712:	2b00      	cmp	r3, #0
 8001714:	da0e      	bge.n	8001734 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001716:	78fb      	ldrb	r3, [r7, #3]
 8001718:	f003 0307 	and.w	r3, r3, #7
 800171c:	1c5a      	adds	r2, r3, #1
 800171e:	4613      	mov	r3, r2
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	4413      	add	r3, r2
 8001724:	00db      	lsls	r3, r3, #3
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	4413      	add	r3, r2
 800172a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	2201      	movs	r2, #1
 8001730:	705a      	strb	r2, [r3, #1]
 8001732:	e00e      	b.n	8001752 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001734:	78fb      	ldrb	r3, [r7, #3]
 8001736:	f003 0207 	and.w	r2, r3, #7
 800173a:	4613      	mov	r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	4413      	add	r3, r2
 8001740:	00db      	lsls	r3, r3, #3
 8001742:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	4413      	add	r3, r2
 800174a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	2200      	movs	r2, #0
 8001750:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001752:	78fb      	ldrb	r3, [r7, #3]
 8001754:	f003 0307 	and.w	r3, r3, #7
 8001758:	b2da      	uxtb	r2, r3
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800175e:	883a      	ldrh	r2, [r7, #0]
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	78ba      	ldrb	r2, [r7, #2]
 8001768:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800176a:	78bb      	ldrb	r3, [r7, #2]
 800176c:	2b02      	cmp	r3, #2
 800176e:	d102      	bne.n	8001776 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	2200      	movs	r2, #0
 8001774:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800177c:	2b01      	cmp	r3, #1
 800177e:	d101      	bne.n	8001784 <HAL_PCD_EP_Open+0x94>
 8001780:	2302      	movs	r3, #2
 8001782:	e00e      	b.n	80017a2 <HAL_PCD_EP_Open+0xb2>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2201      	movs	r2, #1
 8001788:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	68f9      	ldr	r1, [r7, #12]
 8001792:	4618      	mov	r0, r3
 8001794:	f002 fece 	bl	8004534 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2200      	movs	r2, #0
 800179c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80017a0:	7afb      	ldrb	r3, [r7, #11]
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3710      	adds	r7, #16
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b084      	sub	sp, #16
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
 80017b2:	460b      	mov	r3, r1
 80017b4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80017b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	da0e      	bge.n	80017dc <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017be:	78fb      	ldrb	r3, [r7, #3]
 80017c0:	f003 0307 	and.w	r3, r3, #7
 80017c4:	1c5a      	adds	r2, r3, #1
 80017c6:	4613      	mov	r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	4413      	add	r3, r2
 80017cc:	00db      	lsls	r3, r3, #3
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	4413      	add	r3, r2
 80017d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	2201      	movs	r2, #1
 80017d8:	705a      	strb	r2, [r3, #1]
 80017da:	e00e      	b.n	80017fa <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017dc:	78fb      	ldrb	r3, [r7, #3]
 80017de:	f003 0207 	and.w	r2, r3, #7
 80017e2:	4613      	mov	r3, r2
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	4413      	add	r3, r2
 80017e8:	00db      	lsls	r3, r3, #3
 80017ea:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	4413      	add	r3, r2
 80017f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2200      	movs	r2, #0
 80017f8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80017fa:	78fb      	ldrb	r3, [r7, #3]
 80017fc:	f003 0307 	and.w	r3, r3, #7
 8001800:	b2da      	uxtb	r2, r3
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800180c:	2b01      	cmp	r3, #1
 800180e:	d101      	bne.n	8001814 <HAL_PCD_EP_Close+0x6a>
 8001810:	2302      	movs	r3, #2
 8001812:	e00e      	b.n	8001832 <HAL_PCD_EP_Close+0x88>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2201      	movs	r2, #1
 8001818:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	68f9      	ldr	r1, [r7, #12]
 8001822:	4618      	mov	r0, r3
 8001824:	f003 fa46 	bl	8004cb4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2200      	movs	r2, #0
 800182c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	3710      	adds	r7, #16
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	b086      	sub	sp, #24
 800183e:	af00      	add	r7, sp, #0
 8001840:	60f8      	str	r0, [r7, #12]
 8001842:	607a      	str	r2, [r7, #4]
 8001844:	603b      	str	r3, [r7, #0]
 8001846:	460b      	mov	r3, r1
 8001848:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800184a:	7afb      	ldrb	r3, [r7, #11]
 800184c:	f003 0207 	and.w	r2, r3, #7
 8001850:	4613      	mov	r3, r2
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	4413      	add	r3, r2
 8001856:	00db      	lsls	r3, r3, #3
 8001858:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800185c:	68fa      	ldr	r2, [r7, #12]
 800185e:	4413      	add	r3, r2
 8001860:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	683a      	ldr	r2, [r7, #0]
 800186c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	2200      	movs	r2, #0
 8001872:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	2200      	movs	r2, #0
 8001878:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800187a:	7afb      	ldrb	r3, [r7, #11]
 800187c:	f003 0307 	and.w	r3, r3, #7
 8001880:	b2da      	uxtb	r2, r3
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	6979      	ldr	r1, [r7, #20]
 800188c:	4618      	mov	r0, r3
 800188e:	f003 fbfd 	bl	800508c <USB_EPStartXfer>

  return HAL_OK;
 8001892:	2300      	movs	r3, #0
}
 8001894:	4618      	mov	r0, r3
 8001896:	3718      	adds	r7, #24
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	460b      	mov	r3, r1
 80018a6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80018a8:	78fb      	ldrb	r3, [r7, #3]
 80018aa:	f003 0207 	and.w	r2, r3, #7
 80018ae:	6879      	ldr	r1, [r7, #4]
 80018b0:	4613      	mov	r3, r2
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	4413      	add	r3, r2
 80018b6:	00db      	lsls	r3, r3, #3
 80018b8:	440b      	add	r3, r1
 80018ba:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80018be:	681b      	ldr	r3, [r3, #0]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bc80      	pop	{r7}
 80018c8:	4770      	bx	lr

080018ca <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b086      	sub	sp, #24
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	60f8      	str	r0, [r7, #12]
 80018d2:	607a      	str	r2, [r7, #4]
 80018d4:	603b      	str	r3, [r7, #0]
 80018d6:	460b      	mov	r3, r1
 80018d8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018da:	7afb      	ldrb	r3, [r7, #11]
 80018dc:	f003 0307 	and.w	r3, r3, #7
 80018e0:	1c5a      	adds	r2, r3, #1
 80018e2:	4613      	mov	r3, r2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	4413      	add	r3, r2
 80018e8:	00db      	lsls	r3, r3, #3
 80018ea:	68fa      	ldr	r2, [r7, #12]
 80018ec:	4413      	add	r3, r2
 80018ee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	683a      	ldr	r2, [r7, #0]
 80018fa:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	2201      	movs	r2, #1
 8001900:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	683a      	ldr	r2, [r7, #0]
 8001908:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	2200      	movs	r2, #0
 800190e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	2201      	movs	r2, #1
 8001914:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001916:	7afb      	ldrb	r3, [r7, #11]
 8001918:	f003 0307 	and.w	r3, r3, #7
 800191c:	b2da      	uxtb	r2, r3
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	6979      	ldr	r1, [r7, #20]
 8001928:	4618      	mov	r0, r3
 800192a:	f003 fbaf 	bl	800508c <USB_EPStartXfer>

  return HAL_OK;
 800192e:	2300      	movs	r3, #0
}
 8001930:	4618      	mov	r0, r3
 8001932:	3718      	adds	r7, #24
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}

08001938 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	460b      	mov	r3, r1
 8001942:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001944:	78fb      	ldrb	r3, [r7, #3]
 8001946:	f003 0207 	and.w	r2, r3, #7
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	429a      	cmp	r2, r3
 8001950:	d901      	bls.n	8001956 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e04c      	b.n	80019f0 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001956:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800195a:	2b00      	cmp	r3, #0
 800195c:	da0e      	bge.n	800197c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800195e:	78fb      	ldrb	r3, [r7, #3]
 8001960:	f003 0307 	and.w	r3, r3, #7
 8001964:	1c5a      	adds	r2, r3, #1
 8001966:	4613      	mov	r3, r2
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	4413      	add	r3, r2
 800196c:	00db      	lsls	r3, r3, #3
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	4413      	add	r3, r2
 8001972:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2201      	movs	r2, #1
 8001978:	705a      	strb	r2, [r3, #1]
 800197a:	e00c      	b.n	8001996 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800197c:	78fa      	ldrb	r2, [r7, #3]
 800197e:	4613      	mov	r3, r2
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	4413      	add	r3, r2
 8001984:	00db      	lsls	r3, r3, #3
 8001986:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	4413      	add	r3, r2
 800198e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2200      	movs	r2, #0
 8001994:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2201      	movs	r2, #1
 800199a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800199c:	78fb      	ldrb	r3, [r7, #3]
 800199e:	f003 0307 	and.w	r3, r3, #7
 80019a2:	b2da      	uxtb	r2, r3
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d101      	bne.n	80019b6 <HAL_PCD_EP_SetStall+0x7e>
 80019b2:	2302      	movs	r3, #2
 80019b4:	e01c      	b.n	80019f0 <HAL_PCD_EP_SetStall+0xb8>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2201      	movs	r2, #1
 80019ba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	68f9      	ldr	r1, [r7, #12]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f004 ff12 	bl	80067ee <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80019ca:	78fb      	ldrb	r3, [r7, #3]
 80019cc:	f003 0307 	and.w	r3, r3, #7
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d108      	bne.n	80019e6 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80019de:	4619      	mov	r1, r3
 80019e0:	4610      	mov	r0, r2
 80019e2:	f005 f837 	bl	8006a54 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80019ee:	2300      	movs	r3, #0
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3710      	adds	r7, #16
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	460b      	mov	r3, r1
 8001a02:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001a04:	78fb      	ldrb	r3, [r7, #3]
 8001a06:	f003 020f 	and.w	r2, r3, #15
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d901      	bls.n	8001a16 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e040      	b.n	8001a98 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001a16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	da0e      	bge.n	8001a3c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a1e:	78fb      	ldrb	r3, [r7, #3]
 8001a20:	f003 0307 	and.w	r3, r3, #7
 8001a24:	1c5a      	adds	r2, r3, #1
 8001a26:	4613      	mov	r3, r2
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	4413      	add	r3, r2
 8001a2c:	00db      	lsls	r3, r3, #3
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	4413      	add	r3, r2
 8001a32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	2201      	movs	r2, #1
 8001a38:	705a      	strb	r2, [r3, #1]
 8001a3a:	e00e      	b.n	8001a5a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a3c:	78fb      	ldrb	r3, [r7, #3]
 8001a3e:	f003 0207 	and.w	r2, r3, #7
 8001a42:	4613      	mov	r3, r2
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	4413      	add	r3, r2
 8001a48:	00db      	lsls	r3, r3, #3
 8001a4a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	4413      	add	r3, r2
 8001a52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2200      	movs	r2, #0
 8001a58:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a60:	78fb      	ldrb	r3, [r7, #3]
 8001a62:	f003 0307 	and.w	r3, r3, #7
 8001a66:	b2da      	uxtb	r2, r3
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d101      	bne.n	8001a7a <HAL_PCD_EP_ClrStall+0x82>
 8001a76:	2302      	movs	r3, #2
 8001a78:	e00e      	b.n	8001a98 <HAL_PCD_EP_ClrStall+0xa0>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	68f9      	ldr	r1, [r7, #12]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f004 ff00 	bl	800688e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001a96:	2300      	movs	r3, #0
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3710      	adds	r7, #16
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b096      	sub	sp, #88	; 0x58
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001aa8:	e3bf      	b.n	800222a <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ab2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001ab6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	f003 030f 	and.w	r3, r3, #15
 8001ac0:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8001ac4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	f040 8179 	bne.w	8001dc0 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001ace:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001ad2:	f003 0310 	and.w	r3, r3, #16
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d152      	bne.n	8001b80 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	881b      	ldrh	r3, [r3, #0]
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001ae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001aea:	81fb      	strh	r3, [r7, #14]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	89fb      	ldrh	r3, [r7, #14]
 8001af2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001af6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	3328      	adds	r3, #40	; 0x28
 8001b02:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b0c:	b29b      	uxth	r3, r3
 8001b0e:	461a      	mov	r2, r3
 8001b10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	00db      	lsls	r3, r3, #3
 8001b16:	4413      	add	r3, r2
 8001b18:	3302      	adds	r3, #2
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	6812      	ldr	r2, [r2, #0]
 8001b20:	4413      	add	r3, r2
 8001b22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b26:	881b      	ldrh	r3, [r3, #0]
 8001b28:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001b2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b2e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001b30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b32:	695a      	ldr	r2, [r3, #20]
 8001b34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b36:	69db      	ldr	r3, [r3, #28]
 8001b38:	441a      	add	r2, r3
 8001b3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b3c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001b3e:	2100      	movs	r1, #0
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f006 fddc 	bl	80086fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	f000 836b 	beq.w	800222a <PCD_EP_ISR_Handler+0x78a>
 8001b54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b56:	699b      	ldr	r3, [r3, #24]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	f040 8366 	bne.w	800222a <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b6a:	b2da      	uxtb	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	b292      	uxth	r2, r2
 8001b72:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001b7e:	e354      	b.n	800222a <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b86:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	881b      	ldrh	r3, [r3, #0]
 8001b8e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001b92:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001b96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d034      	beq.n	8001c08 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	461a      	mov	r2, r3
 8001baa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	00db      	lsls	r3, r3, #3
 8001bb0:	4413      	add	r3, r2
 8001bb2:	3306      	adds	r3, #6
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	6812      	ldr	r2, [r2, #0]
 8001bba:	4413      	add	r3, r2
 8001bbc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001bc0:	881b      	ldrh	r3, [r3, #0]
 8001bc2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001bc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bc8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6818      	ldr	r0, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001bd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bd6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001bd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bda:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	f004 ff89 	bl	8006af4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	881b      	ldrh	r3, [r3, #0]
 8001be8:	b29a      	uxth	r2, r3
 8001bea:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001bee:	4013      	ands	r3, r2
 8001bf0:	823b      	strh	r3, [r7, #16]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	8a3a      	ldrh	r2, [r7, #16]
 8001bf8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001bfc:	b292      	uxth	r2, r2
 8001bfe:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f006 fd4f 	bl	80086a4 <HAL_PCD_SetupStageCallback>
 8001c06:	e310      	b.n	800222a <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001c08:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	f280 830c 	bge.w	800222a <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	881b      	ldrh	r3, [r3, #0]
 8001c18:	b29a      	uxth	r2, r3
 8001c1a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001c1e:	4013      	ands	r3, r2
 8001c20:	83fb      	strh	r3, [r7, #30]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	8bfa      	ldrh	r2, [r7, #30]
 8001c28:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c2c:	b292      	uxth	r2, r2
 8001c2e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c38:	b29b      	uxth	r3, r3
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	00db      	lsls	r3, r3, #3
 8001c42:	4413      	add	r3, r2
 8001c44:	3306      	adds	r3, #6
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	6812      	ldr	r2, [r2, #0]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c52:	881b      	ldrh	r3, [r3, #0]
 8001c54:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c5a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001c5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c5e:	69db      	ldr	r3, [r3, #28]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d019      	beq.n	8001c98 <PCD_EP_ISR_Handler+0x1f8>
 8001c64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c66:	695b      	ldr	r3, [r3, #20]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d015      	beq.n	8001c98 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6818      	ldr	r0, [r3, #0]
 8001c70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c72:	6959      	ldr	r1, [r3, #20]
 8001c74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c76:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001c78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c7a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	f004 ff39 	bl	8006af4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001c82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c84:	695a      	ldr	r2, [r3, #20]
 8001c86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c88:	69db      	ldr	r3, [r3, #28]
 8001c8a:	441a      	add	r2, r3
 8001c8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c8e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001c90:	2100      	movs	r1, #0
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f006 fd18 	bl	80086c8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	881b      	ldrh	r3, [r3, #0]
 8001c9e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001ca2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001ca6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	f040 82bd 	bne.w	800222a <PCD_EP_ISR_Handler+0x78a>
 8001cb0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001cb4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001cb8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001cbc:	f000 82b5 	beq.w	800222a <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	61bb      	str	r3, [r7, #24]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001cde:	617b      	str	r3, [r7, #20]
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	881b      	ldrh	r3, [r3, #0]
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cea:	b29a      	uxth	r2, r3
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	801a      	strh	r2, [r3, #0]
 8001cf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cf2:	691b      	ldr	r3, [r3, #16]
 8001cf4:	2b3e      	cmp	r3, #62	; 0x3e
 8001cf6:	d91d      	bls.n	8001d34 <PCD_EP_ISR_Handler+0x294>
 8001cf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cfa:	691b      	ldr	r3, [r3, #16]
 8001cfc:	095b      	lsrs	r3, r3, #5
 8001cfe:	647b      	str	r3, [r7, #68]	; 0x44
 8001d00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d02:	691b      	ldr	r3, [r3, #16]
 8001d04:	f003 031f 	and.w	r3, r3, #31
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d102      	bne.n	8001d12 <PCD_EP_ISR_Handler+0x272>
 8001d0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	647b      	str	r3, [r7, #68]	; 0x44
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	881b      	ldrh	r3, [r3, #0]
 8001d16:	b29a      	uxth	r2, r3
 8001d18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	029b      	lsls	r3, r3, #10
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	4313      	orrs	r3, r2
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d2c:	b29a      	uxth	r2, r3
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	801a      	strh	r2, [r3, #0]
 8001d32:	e026      	b.n	8001d82 <PCD_EP_ISR_Handler+0x2e2>
 8001d34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d36:	691b      	ldr	r3, [r3, #16]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d10a      	bne.n	8001d52 <PCD_EP_ISR_Handler+0x2b2>
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	881b      	ldrh	r3, [r3, #0]
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d4a:	b29a      	uxth	r2, r3
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	801a      	strh	r2, [r3, #0]
 8001d50:	e017      	b.n	8001d82 <PCD_EP_ISR_Handler+0x2e2>
 8001d52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d54:	691b      	ldr	r3, [r3, #16]
 8001d56:	085b      	lsrs	r3, r3, #1
 8001d58:	647b      	str	r3, [r7, #68]	; 0x44
 8001d5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d5c:	691b      	ldr	r3, [r3, #16]
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d002      	beq.n	8001d6c <PCD_EP_ISR_Handler+0x2cc>
 8001d66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d68:	3301      	adds	r3, #1
 8001d6a:	647b      	str	r3, [r7, #68]	; 0x44
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	881b      	ldrh	r3, [r3, #0]
 8001d70:	b29a      	uxth	r2, r3
 8001d72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	029b      	lsls	r3, r3, #10
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	b29a      	uxth	r2, r3
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	881b      	ldrh	r3, [r3, #0]
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d92:	827b      	strh	r3, [r7, #18]
 8001d94:	8a7b      	ldrh	r3, [r7, #18]
 8001d96:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001d9a:	827b      	strh	r3, [r7, #18]
 8001d9c:	8a7b      	ldrh	r3, [r7, #18]
 8001d9e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001da2:	827b      	strh	r3, [r7, #18]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	8a7b      	ldrh	r3, [r7, #18]
 8001daa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001dae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001db2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001db6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	8013      	strh	r3, [r2, #0]
 8001dbe:	e234      	b.n	800222a <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	4413      	add	r3, r2
 8001dce:	881b      	ldrh	r3, [r3, #0]
 8001dd0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001dd4:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	f280 80fc 	bge.w	8001fd6 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	461a      	mov	r2, r3
 8001de4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	4413      	add	r3, r2
 8001dec:	881b      	ldrh	r3, [r3, #0]
 8001dee:	b29a      	uxth	r2, r3
 8001df0:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001df4:	4013      	ands	r3, r2
 8001df6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	461a      	mov	r2, r3
 8001e00:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	4413      	add	r3, r2
 8001e08:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001e0c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e10:	b292      	uxth	r2, r2
 8001e12:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001e14:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8001e18:	4613      	mov	r3, r2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	4413      	add	r3, r2
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	4413      	add	r3, r2
 8001e28:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001e2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e2c:	7b1b      	ldrb	r3, [r3, #12]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d125      	bne.n	8001e7e <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	4413      	add	r3, r2
 8001e46:	3306      	adds	r3, #6
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	6812      	ldr	r2, [r2, #0]
 8001e4e:	4413      	add	r3, r2
 8001e50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e54:	881b      	ldrh	r3, [r3, #0]
 8001e56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e5a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8001e5e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f000 8092 	beq.w	8001f8c <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6818      	ldr	r0, [r3, #0]
 8001e6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e6e:	6959      	ldr	r1, [r3, #20]
 8001e70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e72:	88da      	ldrh	r2, [r3, #6]
 8001e74:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001e78:	f004 fe3c 	bl	8006af4 <USB_ReadPMA>
 8001e7c:	e086      	b.n	8001f8c <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001e7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e80:	78db      	ldrb	r3, [r3, #3]
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d10a      	bne.n	8001e9c <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001e86:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f000 f9d9 	bl	8002246 <HAL_PCD_EP_DB_Receive>
 8001e94:	4603      	mov	r3, r0
 8001e96:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001e9a:	e077      	b.n	8001f8c <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	4413      	add	r3, r2
 8001eaa:	881b      	ldrh	r3, [r3, #0]
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001eb6:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	441a      	add	r2, r3
 8001ec8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001ecc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ed0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001ed4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ed8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	4413      	add	r3, r2
 8001eee:	881b      	ldrh	r3, [r3, #0]
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d024      	beq.n	8001f44 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	461a      	mov	r2, r3
 8001f06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	00db      	lsls	r3, r3, #3
 8001f0c:	4413      	add	r3, r2
 8001f0e:	3302      	adds	r3, #2
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	6812      	ldr	r2, [r2, #0]
 8001f16:	4413      	add	r3, r2
 8001f18:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f1c:	881b      	ldrh	r3, [r3, #0]
 8001f1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f22:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001f26:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d02e      	beq.n	8001f8c <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6818      	ldr	r0, [r3, #0]
 8001f32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f34:	6959      	ldr	r1, [r3, #20]
 8001f36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f38:	891a      	ldrh	r2, [r3, #8]
 8001f3a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001f3e:	f004 fdd9 	bl	8006af4 <USB_ReadPMA>
 8001f42:	e023      	b.n	8001f8c <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	461a      	mov	r2, r3
 8001f50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	00db      	lsls	r3, r3, #3
 8001f56:	4413      	add	r3, r2
 8001f58:	3306      	adds	r3, #6
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	6812      	ldr	r2, [r2, #0]
 8001f60:	4413      	add	r3, r2
 8001f62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f66:	881b      	ldrh	r3, [r3, #0]
 8001f68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f6c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001f70:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d009      	beq.n	8001f8c <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6818      	ldr	r0, [r3, #0]
 8001f7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f7e:	6959      	ldr	r1, [r3, #20]
 8001f80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f82:	895a      	ldrh	r2, [r3, #10]
 8001f84:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001f88:	f004 fdb4 	bl	8006af4 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001f8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f8e:	69da      	ldr	r2, [r3, #28]
 8001f90:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001f94:	441a      	add	r2, r3
 8001f96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f98:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001f9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f9c:	695a      	ldr	r2, [r3, #20]
 8001f9e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001fa2:	441a      	add	r2, r3
 8001fa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fa6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001fa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d005      	beq.n	8001fbc <PCD_EP_ISR_Handler+0x51c>
 8001fb0:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8001fb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d206      	bcs.n	8001fca <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001fbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f006 fb80 	bl	80086c8 <HAL_PCD_DataOutStageCallback>
 8001fc8:	e005      	b.n	8001fd6 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f003 f85b 	bl	800508c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001fd6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	f000 8123 	beq.w	800222a <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8001fe4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001fe8:	1c5a      	adds	r2, r3, #1
 8001fea:	4613      	mov	r3, r2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	4413      	add	r3, r2
 8001ff0:	00db      	lsls	r3, r3, #3
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	4413      	add	r3, r2
 8002006:	881b      	ldrh	r3, [r3, #0]
 8002008:	b29b      	uxth	r3, r3
 800200a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800200e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002012:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	461a      	mov	r2, r3
 800201c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	441a      	add	r2, r3
 8002024:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002028:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800202c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002030:	b29b      	uxth	r3, r3
 8002032:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002034:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002036:	78db      	ldrb	r3, [r3, #3]
 8002038:	2b01      	cmp	r3, #1
 800203a:	f040 80a2 	bne.w	8002182 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 800203e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002040:	2200      	movs	r2, #0
 8002042:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002044:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002046:	7b1b      	ldrb	r3, [r3, #12]
 8002048:	2b00      	cmp	r3, #0
 800204a:	f000 8093 	beq.w	8002174 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800204e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002056:	2b00      	cmp	r3, #0
 8002058:	d046      	beq.n	80020e8 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800205a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800205c:	785b      	ldrb	r3, [r3, #1]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d126      	bne.n	80020b0 <PCD_EP_ISR_Handler+0x610>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	627b      	str	r3, [r7, #36]	; 0x24
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002070:	b29b      	uxth	r3, r3
 8002072:	461a      	mov	r2, r3
 8002074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002076:	4413      	add	r3, r2
 8002078:	627b      	str	r3, [r7, #36]	; 0x24
 800207a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	011a      	lsls	r2, r3, #4
 8002080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002082:	4413      	add	r3, r2
 8002084:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002088:	623b      	str	r3, [r7, #32]
 800208a:	6a3b      	ldr	r3, [r7, #32]
 800208c:	881b      	ldrh	r3, [r3, #0]
 800208e:	b29b      	uxth	r3, r3
 8002090:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002094:	b29a      	uxth	r2, r3
 8002096:	6a3b      	ldr	r3, [r7, #32]
 8002098:	801a      	strh	r2, [r3, #0]
 800209a:	6a3b      	ldr	r3, [r7, #32]
 800209c:	881b      	ldrh	r3, [r3, #0]
 800209e:	b29b      	uxth	r3, r3
 80020a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020a8:	b29a      	uxth	r2, r3
 80020aa:	6a3b      	ldr	r3, [r7, #32]
 80020ac:	801a      	strh	r2, [r3, #0]
 80020ae:	e061      	b.n	8002174 <PCD_EP_ISR_Handler+0x6d4>
 80020b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020b2:	785b      	ldrb	r3, [r3, #1]
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d15d      	bne.n	8002174 <PCD_EP_ISR_Handler+0x6d4>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	461a      	mov	r2, r3
 80020ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020cc:	4413      	add	r3, r2
 80020ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	011a      	lsls	r2, r3, #4
 80020d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020d8:	4413      	add	r3, r2
 80020da:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80020de:	62bb      	str	r3, [r7, #40]	; 0x28
 80020e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020e2:	2200      	movs	r2, #0
 80020e4:	801a      	strh	r2, [r3, #0]
 80020e6:	e045      	b.n	8002174 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020f0:	785b      	ldrb	r3, [r3, #1]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d126      	bne.n	8002144 <PCD_EP_ISR_Handler+0x6a4>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	637b      	str	r3, [r7, #52]	; 0x34
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002104:	b29b      	uxth	r3, r3
 8002106:	461a      	mov	r2, r3
 8002108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800210a:	4413      	add	r3, r2
 800210c:	637b      	str	r3, [r7, #52]	; 0x34
 800210e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	011a      	lsls	r2, r3, #4
 8002114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002116:	4413      	add	r3, r2
 8002118:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800211c:	633b      	str	r3, [r7, #48]	; 0x30
 800211e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002120:	881b      	ldrh	r3, [r3, #0]
 8002122:	b29b      	uxth	r3, r3
 8002124:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002128:	b29a      	uxth	r2, r3
 800212a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800212c:	801a      	strh	r2, [r3, #0]
 800212e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002130:	881b      	ldrh	r3, [r3, #0]
 8002132:	b29b      	uxth	r3, r3
 8002134:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002138:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800213c:	b29a      	uxth	r2, r3
 800213e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002140:	801a      	strh	r2, [r3, #0]
 8002142:	e017      	b.n	8002174 <PCD_EP_ISR_Handler+0x6d4>
 8002144:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002146:	785b      	ldrb	r3, [r3, #1]
 8002148:	2b01      	cmp	r3, #1
 800214a:	d113      	bne.n	8002174 <PCD_EP_ISR_Handler+0x6d4>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002154:	b29b      	uxth	r3, r3
 8002156:	461a      	mov	r2, r3
 8002158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800215a:	4413      	add	r3, r2
 800215c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800215e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	011a      	lsls	r2, r3, #4
 8002164:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002166:	4413      	add	r3, r2
 8002168:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800216c:	63bb      	str	r3, [r7, #56]	; 0x38
 800216e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002170:	2200      	movs	r2, #0
 8002172:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002174:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	4619      	mov	r1, r3
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f006 fabf 	bl	80086fe <HAL_PCD_DataInStageCallback>
 8002180:	e053      	b.n	800222a <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002182:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800218a:	2b00      	cmp	r3, #0
 800218c:	d146      	bne.n	800221c <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002196:	b29b      	uxth	r3, r3
 8002198:	461a      	mov	r2, r3
 800219a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	4413      	add	r3, r2
 80021a2:	3302      	adds	r3, #2
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	6812      	ldr	r2, [r2, #0]
 80021aa:	4413      	add	r3, r2
 80021ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021b0:	881b      	ldrh	r3, [r3, #0]
 80021b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021b6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80021ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021bc:	699a      	ldr	r2, [r3, #24]
 80021be:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d907      	bls.n	80021d6 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 80021c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021c8:	699a      	ldr	r2, [r3, #24]
 80021ca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80021ce:	1ad2      	subs	r2, r2, r3
 80021d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021d2:	619a      	str	r2, [r3, #24]
 80021d4:	e002      	b.n	80021dc <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 80021d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021d8:	2200      	movs	r2, #0
 80021da:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80021dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021de:	699b      	ldr	r3, [r3, #24]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d106      	bne.n	80021f2 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80021e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	4619      	mov	r1, r3
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f006 fa87 	bl	80086fe <HAL_PCD_DataInStageCallback>
 80021f0:	e01b      	b.n	800222a <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80021f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021f4:	695a      	ldr	r2, [r3, #20]
 80021f6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80021fa:	441a      	add	r2, r3
 80021fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021fe:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002200:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002202:	69da      	ldr	r2, [r3, #28]
 8002204:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002208:	441a      	add	r2, r3
 800220a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800220c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002214:	4618      	mov	r0, r3
 8002216:	f002 ff39 	bl	800508c <USB_EPStartXfer>
 800221a:	e006      	b.n	800222a <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800221c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002220:	461a      	mov	r2, r3
 8002222:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f000 f91b 	bl	8002460 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002232:	b29b      	uxth	r3, r3
 8002234:	b21b      	sxth	r3, r3
 8002236:	2b00      	cmp	r3, #0
 8002238:	f6ff ac37 	blt.w	8001aaa <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3758      	adds	r7, #88	; 0x58
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002246:	b580      	push	{r7, lr}
 8002248:	b088      	sub	sp, #32
 800224a:	af00      	add	r7, sp, #0
 800224c:	60f8      	str	r0, [r7, #12]
 800224e:	60b9      	str	r1, [r7, #8]
 8002250:	4613      	mov	r3, r2
 8002252:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002254:	88fb      	ldrh	r3, [r7, #6]
 8002256:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d07e      	beq.n	800235c <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002266:	b29b      	uxth	r3, r3
 8002268:	461a      	mov	r2, r3
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	00db      	lsls	r3, r3, #3
 8002270:	4413      	add	r3, r2
 8002272:	3302      	adds	r3, #2
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	6812      	ldr	r2, [r2, #0]
 800227a:	4413      	add	r3, r2
 800227c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002280:	881b      	ldrh	r3, [r3, #0]
 8002282:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002286:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	699a      	ldr	r2, [r3, #24]
 800228c:	8b7b      	ldrh	r3, [r7, #26]
 800228e:	429a      	cmp	r2, r3
 8002290:	d306      	bcc.n	80022a0 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	699a      	ldr	r2, [r3, #24]
 8002296:	8b7b      	ldrh	r3, [r7, #26]
 8002298:	1ad2      	subs	r2, r2, r3
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	619a      	str	r2, [r3, #24]
 800229e:	e002      	b.n	80022a6 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	2200      	movs	r2, #0
 80022a4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	699b      	ldr	r3, [r3, #24]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d123      	bne.n	80022f6 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	461a      	mov	r2, r3
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	4413      	add	r3, r2
 80022bc:	881b      	ldrh	r3, [r3, #0]
 80022be:	b29b      	uxth	r3, r3
 80022c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022c8:	833b      	strh	r3, [r7, #24]
 80022ca:	8b3b      	ldrh	r3, [r7, #24]
 80022cc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80022d0:	833b      	strh	r3, [r7, #24]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	461a      	mov	r2, r3
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	441a      	add	r2, r3
 80022e0:	8b3b      	ldrh	r3, [r7, #24]
 80022e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80022f6:	88fb      	ldrh	r3, [r7, #6]
 80022f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d01f      	beq.n	8002340 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	461a      	mov	r2, r3
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	4413      	add	r3, r2
 800230e:	881b      	ldrh	r3, [r3, #0]
 8002310:	b29b      	uxth	r3, r3
 8002312:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800231a:	82fb      	strh	r3, [r7, #22]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	461a      	mov	r2, r3
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	441a      	add	r2, r3
 800232a:	8afb      	ldrh	r3, [r7, #22]
 800232c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002330:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002334:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002338:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800233c:	b29b      	uxth	r3, r3
 800233e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002340:	8b7b      	ldrh	r3, [r7, #26]
 8002342:	2b00      	cmp	r3, #0
 8002344:	f000 8087 	beq.w	8002456 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6818      	ldr	r0, [r3, #0]
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	6959      	ldr	r1, [r3, #20]
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	891a      	ldrh	r2, [r3, #8]
 8002354:	8b7b      	ldrh	r3, [r7, #26]
 8002356:	f004 fbcd 	bl	8006af4 <USB_ReadPMA>
 800235a:	e07c      	b.n	8002456 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002364:	b29b      	uxth	r3, r3
 8002366:	461a      	mov	r2, r3
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	00db      	lsls	r3, r3, #3
 800236e:	4413      	add	r3, r2
 8002370:	3306      	adds	r3, #6
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	68fa      	ldr	r2, [r7, #12]
 8002376:	6812      	ldr	r2, [r2, #0]
 8002378:	4413      	add	r3, r2
 800237a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800237e:	881b      	ldrh	r3, [r3, #0]
 8002380:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002384:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	699a      	ldr	r2, [r3, #24]
 800238a:	8b7b      	ldrh	r3, [r7, #26]
 800238c:	429a      	cmp	r2, r3
 800238e:	d306      	bcc.n	800239e <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	699a      	ldr	r2, [r3, #24]
 8002394:	8b7b      	ldrh	r3, [r7, #26]
 8002396:	1ad2      	subs	r2, r2, r3
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	619a      	str	r2, [r3, #24]
 800239c:	e002      	b.n	80023a4 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	2200      	movs	r2, #0
 80023a2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	699b      	ldr	r3, [r3, #24]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d123      	bne.n	80023f4 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	461a      	mov	r2, r3
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	4413      	add	r3, r2
 80023ba:	881b      	ldrh	r3, [r3, #0]
 80023bc:	b29b      	uxth	r3, r3
 80023be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023c6:	83fb      	strh	r3, [r7, #30]
 80023c8:	8bfb      	ldrh	r3, [r7, #30]
 80023ca:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80023ce:	83fb      	strh	r3, [r7, #30]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	461a      	mov	r2, r3
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	441a      	add	r2, r3
 80023de:	8bfb      	ldrh	r3, [r7, #30]
 80023e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80023f4:	88fb      	ldrh	r3, [r7, #6]
 80023f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d11f      	bne.n	800243e <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	461a      	mov	r2, r3
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	4413      	add	r3, r2
 800240c:	881b      	ldrh	r3, [r3, #0]
 800240e:	b29b      	uxth	r3, r3
 8002410:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002414:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002418:	83bb      	strh	r3, [r7, #28]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	461a      	mov	r2, r3
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	441a      	add	r2, r3
 8002428:	8bbb      	ldrh	r3, [r7, #28]
 800242a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800242e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002432:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002436:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800243a:	b29b      	uxth	r3, r3
 800243c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800243e:	8b7b      	ldrh	r3, [r7, #26]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d008      	beq.n	8002456 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6818      	ldr	r0, [r3, #0]
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	6959      	ldr	r1, [r3, #20]
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	895a      	ldrh	r2, [r3, #10]
 8002450:	8b7b      	ldrh	r3, [r7, #26]
 8002452:	f004 fb4f 	bl	8006af4 <USB_ReadPMA>
    }
  }

  return count;
 8002456:	8b7b      	ldrh	r3, [r7, #26]
}
 8002458:	4618      	mov	r0, r3
 800245a:	3720      	adds	r7, #32
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b0a4      	sub	sp, #144	; 0x90
 8002464:	af00      	add	r7, sp, #0
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	60b9      	str	r1, [r7, #8]
 800246a:	4613      	mov	r3, r2
 800246c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800246e:	88fb      	ldrh	r3, [r7, #6]
 8002470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002474:	2b00      	cmp	r3, #0
 8002476:	f000 81dd 	beq.w	8002834 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002482:	b29b      	uxth	r3, r3
 8002484:	461a      	mov	r2, r3
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	00db      	lsls	r3, r3, #3
 800248c:	4413      	add	r3, r2
 800248e:	3302      	adds	r3, #2
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	68fa      	ldr	r2, [r7, #12]
 8002494:	6812      	ldr	r2, [r2, #0]
 8002496:	4413      	add	r3, r2
 8002498:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800249c:	881b      	ldrh	r3, [r3, #0]
 800249e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024a2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	699a      	ldr	r2, [r3, #24]
 80024aa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d907      	bls.n	80024c2 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	699a      	ldr	r2, [r3, #24]
 80024b6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80024ba:	1ad2      	subs	r2, r2, r3
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	619a      	str	r2, [r3, #24]
 80024c0:	e002      	b.n	80024c8 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	2200      	movs	r2, #0
 80024c6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	f040 80b9 	bne.w	8002644 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	785b      	ldrb	r3, [r3, #1]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d126      	bne.n	8002528 <HAL_PCD_EP_DB_Transmit+0xc8>
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	461a      	mov	r2, r3
 80024ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ee:	4413      	add	r3, r2
 80024f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	011a      	lsls	r2, r3, #4
 80024f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024fa:	4413      	add	r3, r2
 80024fc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002500:	62bb      	str	r3, [r7, #40]	; 0x28
 8002502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002504:	881b      	ldrh	r3, [r3, #0]
 8002506:	b29b      	uxth	r3, r3
 8002508:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800250c:	b29a      	uxth	r2, r3
 800250e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002510:	801a      	strh	r2, [r3, #0]
 8002512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002514:	881b      	ldrh	r3, [r3, #0]
 8002516:	b29b      	uxth	r3, r3
 8002518:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800251c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002520:	b29a      	uxth	r2, r3
 8002522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002524:	801a      	strh	r2, [r3, #0]
 8002526:	e01a      	b.n	800255e <HAL_PCD_EP_DB_Transmit+0xfe>
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	785b      	ldrb	r3, [r3, #1]
 800252c:	2b01      	cmp	r3, #1
 800252e:	d116      	bne.n	800255e <HAL_PCD_EP_DB_Transmit+0xfe>
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	637b      	str	r3, [r7, #52]	; 0x34
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800253e:	b29b      	uxth	r3, r3
 8002540:	461a      	mov	r2, r3
 8002542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002544:	4413      	add	r3, r2
 8002546:	637b      	str	r3, [r7, #52]	; 0x34
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	011a      	lsls	r2, r3, #4
 800254e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002550:	4413      	add	r3, r2
 8002552:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002556:	633b      	str	r3, [r7, #48]	; 0x30
 8002558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800255a:	2200      	movs	r2, #0
 800255c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	627b      	str	r3, [r7, #36]	; 0x24
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	785b      	ldrb	r3, [r3, #1]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d126      	bne.n	80025ba <HAL_PCD_EP_DB_Transmit+0x15a>
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	61fb      	str	r3, [r7, #28]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800257a:	b29b      	uxth	r3, r3
 800257c:	461a      	mov	r2, r3
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	4413      	add	r3, r2
 8002582:	61fb      	str	r3, [r7, #28]
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	011a      	lsls	r2, r3, #4
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	4413      	add	r3, r2
 800258e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002592:	61bb      	str	r3, [r7, #24]
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	881b      	ldrh	r3, [r3, #0]
 8002598:	b29b      	uxth	r3, r3
 800259a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800259e:	b29a      	uxth	r2, r3
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	801a      	strh	r2, [r3, #0]
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	881b      	ldrh	r3, [r3, #0]
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	801a      	strh	r2, [r3, #0]
 80025b8:	e017      	b.n	80025ea <HAL_PCD_EP_DB_Transmit+0x18a>
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	785b      	ldrb	r3, [r3, #1]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d113      	bne.n	80025ea <HAL_PCD_EP_DB_Transmit+0x18a>
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	461a      	mov	r2, r3
 80025ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d0:	4413      	add	r3, r2
 80025d2:	627b      	str	r3, [r7, #36]	; 0x24
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	011a      	lsls	r2, r3, #4
 80025da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025dc:	4413      	add	r3, r2
 80025de:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80025e2:	623b      	str	r3, [r7, #32]
 80025e4:	6a3b      	ldr	r3, [r7, #32]
 80025e6:	2200      	movs	r2, #0
 80025e8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	4619      	mov	r1, r3
 80025f0:	68f8      	ldr	r0, [r7, #12]
 80025f2:	f006 f884 	bl	80086fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80025f6:	88fb      	ldrh	r3, [r7, #6]
 80025f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	f000 82fc 	beq.w	8002bfa <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	461a      	mov	r2, r3
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	4413      	add	r3, r2
 8002610:	881b      	ldrh	r3, [r3, #0]
 8002612:	b29b      	uxth	r3, r3
 8002614:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002618:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800261c:	82fb      	strh	r3, [r7, #22]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	461a      	mov	r2, r3
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	441a      	add	r2, r3
 800262c:	8afb      	ldrh	r3, [r7, #22]
 800262e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002632:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002636:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800263a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800263e:	b29b      	uxth	r3, r3
 8002640:	8013      	strh	r3, [r2, #0]
 8002642:	e2da      	b.n	8002bfa <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002644:	88fb      	ldrh	r3, [r7, #6]
 8002646:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d021      	beq.n	8002692 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	461a      	mov	r2, r3
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	4413      	add	r3, r2
 800265c:	881b      	ldrh	r3, [r3, #0]
 800265e:	b29b      	uxth	r3, r3
 8002660:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002664:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002668:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	461a      	mov	r2, r3
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	441a      	add	r2, r3
 800267a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800267e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002682:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002686:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800268a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800268e:	b29b      	uxth	r3, r3
 8002690:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002698:	2b01      	cmp	r3, #1
 800269a:	f040 82ae 	bne.w	8002bfa <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	695a      	ldr	r2, [r3, #20]
 80026a2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80026a6:	441a      	add	r2, r3
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	69da      	ldr	r2, [r3, #28]
 80026b0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80026b4:	441a      	add	r2, r3
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	6a1a      	ldr	r2, [r3, #32]
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d30b      	bcc.n	80026de <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	6a1a      	ldr	r2, [r3, #32]
 80026d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026d6:	1ad2      	subs	r2, r2, r3
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	621a      	str	r2, [r3, #32]
 80026dc:	e017      	b.n	800270e <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	6a1b      	ldr	r3, [r3, #32]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d108      	bne.n	80026f8 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80026e6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80026ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	2200      	movs	r2, #0
 80026f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80026f6:	e00a      	b.n	800270e <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	6a1b      	ldr	r3, [r3, #32]
 8002704:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	2200      	movs	r2, #0
 800270c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	785b      	ldrb	r3, [r3, #1]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d165      	bne.n	80027e2 <HAL_PCD_EP_DB_Transmit+0x382>
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002724:	b29b      	uxth	r3, r3
 8002726:	461a      	mov	r2, r3
 8002728:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800272a:	4413      	add	r3, r2
 800272c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	011a      	lsls	r2, r3, #4
 8002734:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002736:	4413      	add	r3, r2
 8002738:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800273c:	63bb      	str	r3, [r7, #56]	; 0x38
 800273e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002740:	881b      	ldrh	r3, [r3, #0]
 8002742:	b29b      	uxth	r3, r3
 8002744:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002748:	b29a      	uxth	r2, r3
 800274a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800274c:	801a      	strh	r2, [r3, #0]
 800274e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002752:	2b3e      	cmp	r3, #62	; 0x3e
 8002754:	d91d      	bls.n	8002792 <HAL_PCD_EP_DB_Transmit+0x332>
 8002756:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800275a:	095b      	lsrs	r3, r3, #5
 800275c:	64bb      	str	r3, [r7, #72]	; 0x48
 800275e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002762:	f003 031f 	and.w	r3, r3, #31
 8002766:	2b00      	cmp	r3, #0
 8002768:	d102      	bne.n	8002770 <HAL_PCD_EP_DB_Transmit+0x310>
 800276a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800276c:	3b01      	subs	r3, #1
 800276e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002772:	881b      	ldrh	r3, [r3, #0]
 8002774:	b29a      	uxth	r2, r3
 8002776:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002778:	b29b      	uxth	r3, r3
 800277a:	029b      	lsls	r3, r3, #10
 800277c:	b29b      	uxth	r3, r3
 800277e:	4313      	orrs	r3, r2
 8002780:	b29b      	uxth	r3, r3
 8002782:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002786:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800278a:	b29a      	uxth	r2, r3
 800278c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800278e:	801a      	strh	r2, [r3, #0]
 8002790:	e044      	b.n	800281c <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002792:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002796:	2b00      	cmp	r3, #0
 8002798:	d10a      	bne.n	80027b0 <HAL_PCD_EP_DB_Transmit+0x350>
 800279a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800279c:	881b      	ldrh	r3, [r3, #0]
 800279e:	b29b      	uxth	r3, r3
 80027a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027a8:	b29a      	uxth	r2, r3
 80027aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ac:	801a      	strh	r2, [r3, #0]
 80027ae:	e035      	b.n	800281c <HAL_PCD_EP_DB_Transmit+0x3bc>
 80027b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027b4:	085b      	lsrs	r3, r3, #1
 80027b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80027b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027bc:	f003 0301 	and.w	r3, r3, #1
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d002      	beq.n	80027ca <HAL_PCD_EP_DB_Transmit+0x36a>
 80027c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027c6:	3301      	adds	r3, #1
 80027c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80027ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027cc:	881b      	ldrh	r3, [r3, #0]
 80027ce:	b29a      	uxth	r2, r3
 80027d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	029b      	lsls	r3, r3, #10
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	4313      	orrs	r3, r2
 80027da:	b29a      	uxth	r2, r3
 80027dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027de:	801a      	strh	r2, [r3, #0]
 80027e0:	e01c      	b.n	800281c <HAL_PCD_EP_DB_Transmit+0x3bc>
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	785b      	ldrb	r3, [r3, #1]
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d118      	bne.n	800281c <HAL_PCD_EP_DB_Transmit+0x3bc>
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	647b      	str	r3, [r7, #68]	; 0x44
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	461a      	mov	r2, r3
 80027fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027fe:	4413      	add	r3, r2
 8002800:	647b      	str	r3, [r7, #68]	; 0x44
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	011a      	lsls	r2, r3, #4
 8002808:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800280a:	4413      	add	r3, r2
 800280c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002810:	643b      	str	r3, [r7, #64]	; 0x40
 8002812:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002816:	b29a      	uxth	r2, r3
 8002818:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800281a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6818      	ldr	r0, [r3, #0]
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	6959      	ldr	r1, [r3, #20]
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	891a      	ldrh	r2, [r3, #8]
 8002828:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800282c:	b29b      	uxth	r3, r3
 800282e:	f004 f91c 	bl	8006a6a <USB_WritePMA>
 8002832:	e1e2      	b.n	8002bfa <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800283c:	b29b      	uxth	r3, r3
 800283e:	461a      	mov	r2, r3
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	00db      	lsls	r3, r3, #3
 8002846:	4413      	add	r3, r2
 8002848:	3306      	adds	r3, #6
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	68fa      	ldr	r2, [r7, #12]
 800284e:	6812      	ldr	r2, [r2, #0]
 8002850:	4413      	add	r3, r2
 8002852:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002856:	881b      	ldrh	r3, [r3, #0]
 8002858:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800285c:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	699a      	ldr	r2, [r3, #24]
 8002864:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002868:	429a      	cmp	r2, r3
 800286a:	d307      	bcc.n	800287c <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	699a      	ldr	r2, [r3, #24]
 8002870:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002874:	1ad2      	subs	r2, r2, r3
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	619a      	str	r2, [r3, #24]
 800287a:	e002      	b.n	8002882 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	2200      	movs	r2, #0
 8002880:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	2b00      	cmp	r3, #0
 8002888:	f040 80c0 	bne.w	8002a0c <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	785b      	ldrb	r3, [r3, #1]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d126      	bne.n	80028e2 <HAL_PCD_EP_DB_Transmit+0x482>
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	67fb      	str	r3, [r7, #124]	; 0x7c
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	461a      	mov	r2, r3
 80028a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80028a8:	4413      	add	r3, r2
 80028aa:	67fb      	str	r3, [r7, #124]	; 0x7c
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	011a      	lsls	r2, r3, #4
 80028b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80028b4:	4413      	add	r3, r2
 80028b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80028ba:	67bb      	str	r3, [r7, #120]	; 0x78
 80028bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028be:	881b      	ldrh	r3, [r3, #0]
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028c6:	b29a      	uxth	r2, r3
 80028c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028ca:	801a      	strh	r2, [r3, #0]
 80028cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028ce:	881b      	ldrh	r3, [r3, #0]
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028da:	b29a      	uxth	r2, r3
 80028dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028de:	801a      	strh	r2, [r3, #0]
 80028e0:	e01a      	b.n	8002918 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	785b      	ldrb	r3, [r3, #1]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d116      	bne.n	8002918 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	667b      	str	r3, [r7, #100]	; 0x64
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	461a      	mov	r2, r3
 80028fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80028fe:	4413      	add	r3, r2
 8002900:	667b      	str	r3, [r7, #100]	; 0x64
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	011a      	lsls	r2, r3, #4
 8002908:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800290a:	4413      	add	r3, r2
 800290c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002910:	663b      	str	r3, [r7, #96]	; 0x60
 8002912:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002914:	2200      	movs	r2, #0
 8002916:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	677b      	str	r3, [r7, #116]	; 0x74
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	785b      	ldrb	r3, [r3, #1]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d12b      	bne.n	800297e <HAL_PCD_EP_DB_Transmit+0x51e>
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002934:	b29b      	uxth	r3, r3
 8002936:	461a      	mov	r2, r3
 8002938:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800293a:	4413      	add	r3, r2
 800293c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	011a      	lsls	r2, r3, #4
 8002944:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002946:	4413      	add	r3, r2
 8002948:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800294c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002950:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002954:	881b      	ldrh	r3, [r3, #0]
 8002956:	b29b      	uxth	r3, r3
 8002958:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800295c:	b29a      	uxth	r2, r3
 800295e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002962:	801a      	strh	r2, [r3, #0]
 8002964:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002968:	881b      	ldrh	r3, [r3, #0]
 800296a:	b29b      	uxth	r3, r3
 800296c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002970:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002974:	b29a      	uxth	r2, r3
 8002976:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800297a:	801a      	strh	r2, [r3, #0]
 800297c:	e017      	b.n	80029ae <HAL_PCD_EP_DB_Transmit+0x54e>
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	785b      	ldrb	r3, [r3, #1]
 8002982:	2b01      	cmp	r3, #1
 8002984:	d113      	bne.n	80029ae <HAL_PCD_EP_DB_Transmit+0x54e>
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800298e:	b29b      	uxth	r3, r3
 8002990:	461a      	mov	r2, r3
 8002992:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002994:	4413      	add	r3, r2
 8002996:	677b      	str	r3, [r7, #116]	; 0x74
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	011a      	lsls	r2, r3, #4
 800299e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029a0:	4413      	add	r3, r2
 80029a2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80029a6:	673b      	str	r3, [r7, #112]	; 0x70
 80029a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029aa:	2200      	movs	r2, #0
 80029ac:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	4619      	mov	r1, r3
 80029b4:	68f8      	ldr	r0, [r7, #12]
 80029b6:	f005 fea2 	bl	80086fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80029ba:	88fb      	ldrh	r3, [r7, #6]
 80029bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	f040 811a 	bne.w	8002bfa <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	461a      	mov	r2, r3
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	4413      	add	r3, r2
 80029d4:	881b      	ldrh	r3, [r3, #0]
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029e0:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	461a      	mov	r2, r3
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	441a      	add	r2, r3
 80029f2:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80029f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	8013      	strh	r3, [r2, #0]
 8002a0a:	e0f6      	b.n	8002bfa <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002a0c:	88fb      	ldrh	r3, [r7, #6]
 8002a0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d121      	bne.n	8002a5a <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	4413      	add	r3, r2
 8002a24:	881b      	ldrh	r3, [r3, #0]
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a30:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	461a      	mov	r2, r3
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	441a      	add	r2, r3
 8002a42:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a4e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	f040 80ca 	bne.w	8002bfa <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	695a      	ldr	r2, [r3, #20]
 8002a6a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002a6e:	441a      	add	r2, r3
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	69da      	ldr	r2, [r3, #28]
 8002a78:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002a7c:	441a      	add	r2, r3
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	6a1a      	ldr	r2, [r3, #32]
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d30b      	bcc.n	8002aa6 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	6a1a      	ldr	r2, [r3, #32]
 8002a9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a9e:	1ad2      	subs	r2, r2, r3
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	621a      	str	r2, [r3, #32]
 8002aa4:	e017      	b.n	8002ad6 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	6a1b      	ldr	r3, [r3, #32]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d108      	bne.n	8002ac0 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8002aae:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002ab2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002abe:	e00a      	b.n	8002ad6 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	6a1b      	ldr	r3, [r3, #32]
 8002ac4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	2200      	movs	r2, #0
 8002acc:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	657b      	str	r3, [r7, #84]	; 0x54
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	785b      	ldrb	r3, [r3, #1]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d165      	bne.n	8002bb0 <HAL_PCD_EP_DB_Transmit+0x750>
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	461a      	mov	r2, r3
 8002af6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002af8:	4413      	add	r3, r2
 8002afa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	011a      	lsls	r2, r3, #4
 8002b02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b04:	4413      	add	r3, r2
 8002b06:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002b0a:	65bb      	str	r3, [r7, #88]	; 0x58
 8002b0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b0e:	881b      	ldrh	r3, [r3, #0]
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b16:	b29a      	uxth	r2, r3
 8002b18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b1a:	801a      	strh	r2, [r3, #0]
 8002b1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b20:	2b3e      	cmp	r3, #62	; 0x3e
 8002b22:	d91d      	bls.n	8002b60 <HAL_PCD_EP_DB_Transmit+0x700>
 8002b24:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b28:	095b      	lsrs	r3, r3, #5
 8002b2a:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b30:	f003 031f 	and.w	r3, r3, #31
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d102      	bne.n	8002b3e <HAL_PCD_EP_DB_Transmit+0x6de>
 8002b38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b40:	881b      	ldrh	r3, [r3, #0]
 8002b42:	b29a      	uxth	r2, r3
 8002b44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	029b      	lsls	r3, r3, #10
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b58:	b29a      	uxth	r2, r3
 8002b5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b5c:	801a      	strh	r2, [r3, #0]
 8002b5e:	e041      	b.n	8002be4 <HAL_PCD_EP_DB_Transmit+0x784>
 8002b60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d10a      	bne.n	8002b7e <HAL_PCD_EP_DB_Transmit+0x71e>
 8002b68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b6a:	881b      	ldrh	r3, [r3, #0]
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b76:	b29a      	uxth	r2, r3
 8002b78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b7a:	801a      	strh	r2, [r3, #0]
 8002b7c:	e032      	b.n	8002be4 <HAL_PCD_EP_DB_Transmit+0x784>
 8002b7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b82:	085b      	lsrs	r3, r3, #1
 8002b84:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d002      	beq.n	8002b98 <HAL_PCD_EP_DB_Transmit+0x738>
 8002b92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b94:	3301      	adds	r3, #1
 8002b96:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b9a:	881b      	ldrh	r3, [r3, #0]
 8002b9c:	b29a      	uxth	r2, r3
 8002b9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	029b      	lsls	r3, r3, #10
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	b29a      	uxth	r2, r3
 8002baa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bac:	801a      	strh	r2, [r3, #0]
 8002bae:	e019      	b.n	8002be4 <HAL_PCD_EP_DB_Transmit+0x784>
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	785b      	ldrb	r3, [r3, #1]
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d115      	bne.n	8002be4 <HAL_PCD_EP_DB_Transmit+0x784>
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bc6:	4413      	add	r3, r2
 8002bc8:	657b      	str	r3, [r7, #84]	; 0x54
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	011a      	lsls	r2, r3, #4
 8002bd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bd2:	4413      	add	r3, r2
 8002bd4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002bd8:	653b      	str	r3, [r7, #80]	; 0x50
 8002bda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002bde:	b29a      	uxth	r2, r3
 8002be0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002be2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6818      	ldr	r0, [r3, #0]
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	6959      	ldr	r1, [r3, #20]
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	895a      	ldrh	r2, [r3, #10]
 8002bf0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	f003 ff38 	bl	8006a6a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	461a      	mov	r2, r3
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	4413      	add	r3, r2
 8002c08:	881b      	ldrh	r3, [r3, #0]
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c14:	82bb      	strh	r3, [r7, #20]
 8002c16:	8abb      	ldrh	r3, [r7, #20]
 8002c18:	f083 0310 	eor.w	r3, r3, #16
 8002c1c:	82bb      	strh	r3, [r7, #20]
 8002c1e:	8abb      	ldrh	r3, [r7, #20]
 8002c20:	f083 0320 	eor.w	r3, r3, #32
 8002c24:	82bb      	strh	r3, [r7, #20]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	441a      	add	r2, r3
 8002c34:	8abb      	ldrh	r3, [r7, #20]
 8002c36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3790      	adds	r7, #144	; 0x90
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b087      	sub	sp, #28
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	607b      	str	r3, [r7, #4]
 8002c5e:	460b      	mov	r3, r1
 8002c60:	817b      	strh	r3, [r7, #10]
 8002c62:	4613      	mov	r3, r2
 8002c64:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002c66:	897b      	ldrh	r3, [r7, #10]
 8002c68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00b      	beq.n	8002c8a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c72:	897b      	ldrh	r3, [r7, #10]
 8002c74:	f003 0307 	and.w	r3, r3, #7
 8002c78:	1c5a      	adds	r2, r3, #1
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	4413      	add	r3, r2
 8002c80:	00db      	lsls	r3, r3, #3
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	4413      	add	r3, r2
 8002c86:	617b      	str	r3, [r7, #20]
 8002c88:	e009      	b.n	8002c9e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002c8a:	897a      	ldrh	r2, [r7, #10]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	4413      	add	r3, r2
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c98:	68fa      	ldr	r2, [r7, #12]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002c9e:	893b      	ldrh	r3, [r7, #8]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d107      	bne.n	8002cb4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	b29a      	uxth	r2, r3
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	80da      	strh	r2, [r3, #6]
 8002cb2:	e00b      	b.n	8002ccc <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	b29a      	uxth	r2, r3
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	0c1b      	lsrs	r3, r3, #16
 8002cc6:	b29a      	uxth	r2, r3
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	371c      	adds	r7, #28
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bc80      	pop	{r7}
 8002cd6:	4770      	bx	lr

08002cd8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b086      	sub	sp, #24
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d101      	bne.n	8002cea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e272      	b.n	80031d0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	f000 8087 	beq.w	8002e06 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002cf8:	4b92      	ldr	r3, [pc, #584]	; (8002f44 <HAL_RCC_OscConfig+0x26c>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f003 030c 	and.w	r3, r3, #12
 8002d00:	2b04      	cmp	r3, #4
 8002d02:	d00c      	beq.n	8002d1e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d04:	4b8f      	ldr	r3, [pc, #572]	; (8002f44 <HAL_RCC_OscConfig+0x26c>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f003 030c 	and.w	r3, r3, #12
 8002d0c:	2b08      	cmp	r3, #8
 8002d0e:	d112      	bne.n	8002d36 <HAL_RCC_OscConfig+0x5e>
 8002d10:	4b8c      	ldr	r3, [pc, #560]	; (8002f44 <HAL_RCC_OscConfig+0x26c>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d1c:	d10b      	bne.n	8002d36 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d1e:	4b89      	ldr	r3, [pc, #548]	; (8002f44 <HAL_RCC_OscConfig+0x26c>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d06c      	beq.n	8002e04 <HAL_RCC_OscConfig+0x12c>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d168      	bne.n	8002e04 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e24c      	b.n	80031d0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d3e:	d106      	bne.n	8002d4e <HAL_RCC_OscConfig+0x76>
 8002d40:	4b80      	ldr	r3, [pc, #512]	; (8002f44 <HAL_RCC_OscConfig+0x26c>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a7f      	ldr	r2, [pc, #508]	; (8002f44 <HAL_RCC_OscConfig+0x26c>)
 8002d46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d4a:	6013      	str	r3, [r2, #0]
 8002d4c:	e02e      	b.n	8002dac <HAL_RCC_OscConfig+0xd4>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d10c      	bne.n	8002d70 <HAL_RCC_OscConfig+0x98>
 8002d56:	4b7b      	ldr	r3, [pc, #492]	; (8002f44 <HAL_RCC_OscConfig+0x26c>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a7a      	ldr	r2, [pc, #488]	; (8002f44 <HAL_RCC_OscConfig+0x26c>)
 8002d5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d60:	6013      	str	r3, [r2, #0]
 8002d62:	4b78      	ldr	r3, [pc, #480]	; (8002f44 <HAL_RCC_OscConfig+0x26c>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a77      	ldr	r2, [pc, #476]	; (8002f44 <HAL_RCC_OscConfig+0x26c>)
 8002d68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d6c:	6013      	str	r3, [r2, #0]
 8002d6e:	e01d      	b.n	8002dac <HAL_RCC_OscConfig+0xd4>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d78:	d10c      	bne.n	8002d94 <HAL_RCC_OscConfig+0xbc>
 8002d7a:	4b72      	ldr	r3, [pc, #456]	; (8002f44 <HAL_RCC_OscConfig+0x26c>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a71      	ldr	r2, [pc, #452]	; (8002f44 <HAL_RCC_OscConfig+0x26c>)
 8002d80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d84:	6013      	str	r3, [r2, #0]
 8002d86:	4b6f      	ldr	r3, [pc, #444]	; (8002f44 <HAL_RCC_OscConfig+0x26c>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a6e      	ldr	r2, [pc, #440]	; (8002f44 <HAL_RCC_OscConfig+0x26c>)
 8002d8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d90:	6013      	str	r3, [r2, #0]
 8002d92:	e00b      	b.n	8002dac <HAL_RCC_OscConfig+0xd4>
 8002d94:	4b6b      	ldr	r3, [pc, #428]	; (8002f44 <HAL_RCC_OscConfig+0x26c>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a6a      	ldr	r2, [pc, #424]	; (8002f44 <HAL_RCC_OscConfig+0x26c>)
 8002d9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d9e:	6013      	str	r3, [r2, #0]
 8002da0:	4b68      	ldr	r3, [pc, #416]	; (8002f44 <HAL_RCC_OscConfig+0x26c>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a67      	ldr	r2, [pc, #412]	; (8002f44 <HAL_RCC_OscConfig+0x26c>)
 8002da6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002daa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d013      	beq.n	8002ddc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db4:	f7fd fdaa 	bl	800090c <HAL_GetTick>
 8002db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dba:	e008      	b.n	8002dce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dbc:	f7fd fda6 	bl	800090c <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b64      	cmp	r3, #100	; 0x64
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e200      	b.n	80031d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dce:	4b5d      	ldr	r3, [pc, #372]	; (8002f44 <HAL_RCC_OscConfig+0x26c>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d0f0      	beq.n	8002dbc <HAL_RCC_OscConfig+0xe4>
 8002dda:	e014      	b.n	8002e06 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ddc:	f7fd fd96 	bl	800090c <HAL_GetTick>
 8002de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002de2:	e008      	b.n	8002df6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002de4:	f7fd fd92 	bl	800090c <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b64      	cmp	r3, #100	; 0x64
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e1ec      	b.n	80031d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002df6:	4b53      	ldr	r3, [pc, #332]	; (8002f44 <HAL_RCC_OscConfig+0x26c>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d1f0      	bne.n	8002de4 <HAL_RCC_OscConfig+0x10c>
 8002e02:	e000      	b.n	8002e06 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d063      	beq.n	8002eda <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e12:	4b4c      	ldr	r3, [pc, #304]	; (8002f44 <HAL_RCC_OscConfig+0x26c>)
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f003 030c 	and.w	r3, r3, #12
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00b      	beq.n	8002e36 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002e1e:	4b49      	ldr	r3, [pc, #292]	; (8002f44 <HAL_RCC_OscConfig+0x26c>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f003 030c 	and.w	r3, r3, #12
 8002e26:	2b08      	cmp	r3, #8
 8002e28:	d11c      	bne.n	8002e64 <HAL_RCC_OscConfig+0x18c>
 8002e2a:	4b46      	ldr	r3, [pc, #280]	; (8002f44 <HAL_RCC_OscConfig+0x26c>)
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d116      	bne.n	8002e64 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e36:	4b43      	ldr	r3, [pc, #268]	; (8002f44 <HAL_RCC_OscConfig+0x26c>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d005      	beq.n	8002e4e <HAL_RCC_OscConfig+0x176>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d001      	beq.n	8002e4e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e1c0      	b.n	80031d0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e4e:	4b3d      	ldr	r3, [pc, #244]	; (8002f44 <HAL_RCC_OscConfig+0x26c>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	695b      	ldr	r3, [r3, #20]
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	4939      	ldr	r1, [pc, #228]	; (8002f44 <HAL_RCC_OscConfig+0x26c>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e62:	e03a      	b.n	8002eda <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d020      	beq.n	8002eae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e6c:	4b36      	ldr	r3, [pc, #216]	; (8002f48 <HAL_RCC_OscConfig+0x270>)
 8002e6e:	2201      	movs	r2, #1
 8002e70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e72:	f7fd fd4b 	bl	800090c <HAL_GetTick>
 8002e76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e78:	e008      	b.n	8002e8c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e7a:	f7fd fd47 	bl	800090c <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d901      	bls.n	8002e8c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e1a1      	b.n	80031d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e8c:	4b2d      	ldr	r3, [pc, #180]	; (8002f44 <HAL_RCC_OscConfig+0x26c>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0302 	and.w	r3, r3, #2
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d0f0      	beq.n	8002e7a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e98:	4b2a      	ldr	r3, [pc, #168]	; (8002f44 <HAL_RCC_OscConfig+0x26c>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	695b      	ldr	r3, [r3, #20]
 8002ea4:	00db      	lsls	r3, r3, #3
 8002ea6:	4927      	ldr	r1, [pc, #156]	; (8002f44 <HAL_RCC_OscConfig+0x26c>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	600b      	str	r3, [r1, #0]
 8002eac:	e015      	b.n	8002eda <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002eae:	4b26      	ldr	r3, [pc, #152]	; (8002f48 <HAL_RCC_OscConfig+0x270>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb4:	f7fd fd2a 	bl	800090c <HAL_GetTick>
 8002eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eba:	e008      	b.n	8002ece <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ebc:	f7fd fd26 	bl	800090c <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d901      	bls.n	8002ece <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e180      	b.n	80031d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ece:	4b1d      	ldr	r3, [pc, #116]	; (8002f44 <HAL_RCC_OscConfig+0x26c>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d1f0      	bne.n	8002ebc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0308 	and.w	r3, r3, #8
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d03a      	beq.n	8002f5c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	699b      	ldr	r3, [r3, #24]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d019      	beq.n	8002f22 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002eee:	4b17      	ldr	r3, [pc, #92]	; (8002f4c <HAL_RCC_OscConfig+0x274>)
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ef4:	f7fd fd0a 	bl	800090c <HAL_GetTick>
 8002ef8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002efa:	e008      	b.n	8002f0e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002efc:	f7fd fd06 	bl	800090c <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d901      	bls.n	8002f0e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e160      	b.n	80031d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f0e:	4b0d      	ldr	r3, [pc, #52]	; (8002f44 <HAL_RCC_OscConfig+0x26c>)
 8002f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d0f0      	beq.n	8002efc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002f1a:	2001      	movs	r0, #1
 8002f1c:	f000 face 	bl	80034bc <RCC_Delay>
 8002f20:	e01c      	b.n	8002f5c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f22:	4b0a      	ldr	r3, [pc, #40]	; (8002f4c <HAL_RCC_OscConfig+0x274>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f28:	f7fd fcf0 	bl	800090c <HAL_GetTick>
 8002f2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f2e:	e00f      	b.n	8002f50 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f30:	f7fd fcec 	bl	800090c <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d908      	bls.n	8002f50 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e146      	b.n	80031d0 <HAL_RCC_OscConfig+0x4f8>
 8002f42:	bf00      	nop
 8002f44:	40021000 	.word	0x40021000
 8002f48:	42420000 	.word	0x42420000
 8002f4c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f50:	4b92      	ldr	r3, [pc, #584]	; (800319c <HAL_RCC_OscConfig+0x4c4>)
 8002f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f54:	f003 0302 	and.w	r3, r3, #2
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d1e9      	bne.n	8002f30 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0304 	and.w	r3, r3, #4
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	f000 80a6 	beq.w	80030b6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f6e:	4b8b      	ldr	r3, [pc, #556]	; (800319c <HAL_RCC_OscConfig+0x4c4>)
 8002f70:	69db      	ldr	r3, [r3, #28]
 8002f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d10d      	bne.n	8002f96 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f7a:	4b88      	ldr	r3, [pc, #544]	; (800319c <HAL_RCC_OscConfig+0x4c4>)
 8002f7c:	69db      	ldr	r3, [r3, #28]
 8002f7e:	4a87      	ldr	r2, [pc, #540]	; (800319c <HAL_RCC_OscConfig+0x4c4>)
 8002f80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f84:	61d3      	str	r3, [r2, #28]
 8002f86:	4b85      	ldr	r3, [pc, #532]	; (800319c <HAL_RCC_OscConfig+0x4c4>)
 8002f88:	69db      	ldr	r3, [r3, #28]
 8002f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f8e:	60bb      	str	r3, [r7, #8]
 8002f90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f92:	2301      	movs	r3, #1
 8002f94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f96:	4b82      	ldr	r3, [pc, #520]	; (80031a0 <HAL_RCC_OscConfig+0x4c8>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d118      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fa2:	4b7f      	ldr	r3, [pc, #508]	; (80031a0 <HAL_RCC_OscConfig+0x4c8>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a7e      	ldr	r2, [pc, #504]	; (80031a0 <HAL_RCC_OscConfig+0x4c8>)
 8002fa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fae:	f7fd fcad 	bl	800090c <HAL_GetTick>
 8002fb2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb4:	e008      	b.n	8002fc8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fb6:	f7fd fca9 	bl	800090c <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	2b64      	cmp	r3, #100	; 0x64
 8002fc2:	d901      	bls.n	8002fc8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e103      	b.n	80031d0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fc8:	4b75      	ldr	r3, [pc, #468]	; (80031a0 <HAL_RCC_OscConfig+0x4c8>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d0f0      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d106      	bne.n	8002fea <HAL_RCC_OscConfig+0x312>
 8002fdc:	4b6f      	ldr	r3, [pc, #444]	; (800319c <HAL_RCC_OscConfig+0x4c4>)
 8002fde:	6a1b      	ldr	r3, [r3, #32]
 8002fe0:	4a6e      	ldr	r2, [pc, #440]	; (800319c <HAL_RCC_OscConfig+0x4c4>)
 8002fe2:	f043 0301 	orr.w	r3, r3, #1
 8002fe6:	6213      	str	r3, [r2, #32]
 8002fe8:	e02d      	b.n	8003046 <HAL_RCC_OscConfig+0x36e>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d10c      	bne.n	800300c <HAL_RCC_OscConfig+0x334>
 8002ff2:	4b6a      	ldr	r3, [pc, #424]	; (800319c <HAL_RCC_OscConfig+0x4c4>)
 8002ff4:	6a1b      	ldr	r3, [r3, #32]
 8002ff6:	4a69      	ldr	r2, [pc, #420]	; (800319c <HAL_RCC_OscConfig+0x4c4>)
 8002ff8:	f023 0301 	bic.w	r3, r3, #1
 8002ffc:	6213      	str	r3, [r2, #32]
 8002ffe:	4b67      	ldr	r3, [pc, #412]	; (800319c <HAL_RCC_OscConfig+0x4c4>)
 8003000:	6a1b      	ldr	r3, [r3, #32]
 8003002:	4a66      	ldr	r2, [pc, #408]	; (800319c <HAL_RCC_OscConfig+0x4c4>)
 8003004:	f023 0304 	bic.w	r3, r3, #4
 8003008:	6213      	str	r3, [r2, #32]
 800300a:	e01c      	b.n	8003046 <HAL_RCC_OscConfig+0x36e>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	2b05      	cmp	r3, #5
 8003012:	d10c      	bne.n	800302e <HAL_RCC_OscConfig+0x356>
 8003014:	4b61      	ldr	r3, [pc, #388]	; (800319c <HAL_RCC_OscConfig+0x4c4>)
 8003016:	6a1b      	ldr	r3, [r3, #32]
 8003018:	4a60      	ldr	r2, [pc, #384]	; (800319c <HAL_RCC_OscConfig+0x4c4>)
 800301a:	f043 0304 	orr.w	r3, r3, #4
 800301e:	6213      	str	r3, [r2, #32]
 8003020:	4b5e      	ldr	r3, [pc, #376]	; (800319c <HAL_RCC_OscConfig+0x4c4>)
 8003022:	6a1b      	ldr	r3, [r3, #32]
 8003024:	4a5d      	ldr	r2, [pc, #372]	; (800319c <HAL_RCC_OscConfig+0x4c4>)
 8003026:	f043 0301 	orr.w	r3, r3, #1
 800302a:	6213      	str	r3, [r2, #32]
 800302c:	e00b      	b.n	8003046 <HAL_RCC_OscConfig+0x36e>
 800302e:	4b5b      	ldr	r3, [pc, #364]	; (800319c <HAL_RCC_OscConfig+0x4c4>)
 8003030:	6a1b      	ldr	r3, [r3, #32]
 8003032:	4a5a      	ldr	r2, [pc, #360]	; (800319c <HAL_RCC_OscConfig+0x4c4>)
 8003034:	f023 0301 	bic.w	r3, r3, #1
 8003038:	6213      	str	r3, [r2, #32]
 800303a:	4b58      	ldr	r3, [pc, #352]	; (800319c <HAL_RCC_OscConfig+0x4c4>)
 800303c:	6a1b      	ldr	r3, [r3, #32]
 800303e:	4a57      	ldr	r2, [pc, #348]	; (800319c <HAL_RCC_OscConfig+0x4c4>)
 8003040:	f023 0304 	bic.w	r3, r3, #4
 8003044:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d015      	beq.n	800307a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800304e:	f7fd fc5d 	bl	800090c <HAL_GetTick>
 8003052:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003054:	e00a      	b.n	800306c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003056:	f7fd fc59 	bl	800090c <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	f241 3288 	movw	r2, #5000	; 0x1388
 8003064:	4293      	cmp	r3, r2
 8003066:	d901      	bls.n	800306c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e0b1      	b.n	80031d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800306c:	4b4b      	ldr	r3, [pc, #300]	; (800319c <HAL_RCC_OscConfig+0x4c4>)
 800306e:	6a1b      	ldr	r3, [r3, #32]
 8003070:	f003 0302 	and.w	r3, r3, #2
 8003074:	2b00      	cmp	r3, #0
 8003076:	d0ee      	beq.n	8003056 <HAL_RCC_OscConfig+0x37e>
 8003078:	e014      	b.n	80030a4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800307a:	f7fd fc47 	bl	800090c <HAL_GetTick>
 800307e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003080:	e00a      	b.n	8003098 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003082:	f7fd fc43 	bl	800090c <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003090:	4293      	cmp	r3, r2
 8003092:	d901      	bls.n	8003098 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e09b      	b.n	80031d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003098:	4b40      	ldr	r3, [pc, #256]	; (800319c <HAL_RCC_OscConfig+0x4c4>)
 800309a:	6a1b      	ldr	r3, [r3, #32]
 800309c:	f003 0302 	and.w	r3, r3, #2
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d1ee      	bne.n	8003082 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80030a4:	7dfb      	ldrb	r3, [r7, #23]
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d105      	bne.n	80030b6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030aa:	4b3c      	ldr	r3, [pc, #240]	; (800319c <HAL_RCC_OscConfig+0x4c4>)
 80030ac:	69db      	ldr	r3, [r3, #28]
 80030ae:	4a3b      	ldr	r2, [pc, #236]	; (800319c <HAL_RCC_OscConfig+0x4c4>)
 80030b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030b4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	69db      	ldr	r3, [r3, #28]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	f000 8087 	beq.w	80031ce <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030c0:	4b36      	ldr	r3, [pc, #216]	; (800319c <HAL_RCC_OscConfig+0x4c4>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f003 030c 	and.w	r3, r3, #12
 80030c8:	2b08      	cmp	r3, #8
 80030ca:	d061      	beq.n	8003190 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	69db      	ldr	r3, [r3, #28]
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d146      	bne.n	8003162 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030d4:	4b33      	ldr	r3, [pc, #204]	; (80031a4 <HAL_RCC_OscConfig+0x4cc>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030da:	f7fd fc17 	bl	800090c <HAL_GetTick>
 80030de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030e0:	e008      	b.n	80030f4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030e2:	f7fd fc13 	bl	800090c <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d901      	bls.n	80030f4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e06d      	b.n	80031d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030f4:	4b29      	ldr	r3, [pc, #164]	; (800319c <HAL_RCC_OscConfig+0x4c4>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d1f0      	bne.n	80030e2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a1b      	ldr	r3, [r3, #32]
 8003104:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003108:	d108      	bne.n	800311c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800310a:	4b24      	ldr	r3, [pc, #144]	; (800319c <HAL_RCC_OscConfig+0x4c4>)
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	4921      	ldr	r1, [pc, #132]	; (800319c <HAL_RCC_OscConfig+0x4c4>)
 8003118:	4313      	orrs	r3, r2
 800311a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800311c:	4b1f      	ldr	r3, [pc, #124]	; (800319c <HAL_RCC_OscConfig+0x4c4>)
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a19      	ldr	r1, [r3, #32]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312c:	430b      	orrs	r3, r1
 800312e:	491b      	ldr	r1, [pc, #108]	; (800319c <HAL_RCC_OscConfig+0x4c4>)
 8003130:	4313      	orrs	r3, r2
 8003132:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003134:	4b1b      	ldr	r3, [pc, #108]	; (80031a4 <HAL_RCC_OscConfig+0x4cc>)
 8003136:	2201      	movs	r2, #1
 8003138:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800313a:	f7fd fbe7 	bl	800090c <HAL_GetTick>
 800313e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003140:	e008      	b.n	8003154 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003142:	f7fd fbe3 	bl	800090c <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	2b02      	cmp	r3, #2
 800314e:	d901      	bls.n	8003154 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e03d      	b.n	80031d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003154:	4b11      	ldr	r3, [pc, #68]	; (800319c <HAL_RCC_OscConfig+0x4c4>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d0f0      	beq.n	8003142 <HAL_RCC_OscConfig+0x46a>
 8003160:	e035      	b.n	80031ce <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003162:	4b10      	ldr	r3, [pc, #64]	; (80031a4 <HAL_RCC_OscConfig+0x4cc>)
 8003164:	2200      	movs	r2, #0
 8003166:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003168:	f7fd fbd0 	bl	800090c <HAL_GetTick>
 800316c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800316e:	e008      	b.n	8003182 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003170:	f7fd fbcc 	bl	800090c <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b02      	cmp	r3, #2
 800317c:	d901      	bls.n	8003182 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e026      	b.n	80031d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003182:	4b06      	ldr	r3, [pc, #24]	; (800319c <HAL_RCC_OscConfig+0x4c4>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1f0      	bne.n	8003170 <HAL_RCC_OscConfig+0x498>
 800318e:	e01e      	b.n	80031ce <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	69db      	ldr	r3, [r3, #28]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d107      	bne.n	80031a8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e019      	b.n	80031d0 <HAL_RCC_OscConfig+0x4f8>
 800319c:	40021000 	.word	0x40021000
 80031a0:	40007000 	.word	0x40007000
 80031a4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031a8:	4b0b      	ldr	r3, [pc, #44]	; (80031d8 <HAL_RCC_OscConfig+0x500>)
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a1b      	ldr	r3, [r3, #32]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d106      	bne.n	80031ca <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d001      	beq.n	80031ce <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e000      	b.n	80031d0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80031ce:	2300      	movs	r3, #0
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3718      	adds	r7, #24
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	40021000 	.word	0x40021000

080031dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d101      	bne.n	80031f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e0d0      	b.n	8003392 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031f0:	4b6a      	ldr	r3, [pc, #424]	; (800339c <HAL_RCC_ClockConfig+0x1c0>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0307 	and.w	r3, r3, #7
 80031f8:	683a      	ldr	r2, [r7, #0]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d910      	bls.n	8003220 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031fe:	4b67      	ldr	r3, [pc, #412]	; (800339c <HAL_RCC_ClockConfig+0x1c0>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f023 0207 	bic.w	r2, r3, #7
 8003206:	4965      	ldr	r1, [pc, #404]	; (800339c <HAL_RCC_ClockConfig+0x1c0>)
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	4313      	orrs	r3, r2
 800320c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800320e:	4b63      	ldr	r3, [pc, #396]	; (800339c <HAL_RCC_ClockConfig+0x1c0>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0307 	and.w	r3, r3, #7
 8003216:	683a      	ldr	r2, [r7, #0]
 8003218:	429a      	cmp	r2, r3
 800321a:	d001      	beq.n	8003220 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e0b8      	b.n	8003392 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0302 	and.w	r3, r3, #2
 8003228:	2b00      	cmp	r3, #0
 800322a:	d020      	beq.n	800326e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0304 	and.w	r3, r3, #4
 8003234:	2b00      	cmp	r3, #0
 8003236:	d005      	beq.n	8003244 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003238:	4b59      	ldr	r3, [pc, #356]	; (80033a0 <HAL_RCC_ClockConfig+0x1c4>)
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	4a58      	ldr	r2, [pc, #352]	; (80033a0 <HAL_RCC_ClockConfig+0x1c4>)
 800323e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003242:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0308 	and.w	r3, r3, #8
 800324c:	2b00      	cmp	r3, #0
 800324e:	d005      	beq.n	800325c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003250:	4b53      	ldr	r3, [pc, #332]	; (80033a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	4a52      	ldr	r2, [pc, #328]	; (80033a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003256:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800325a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800325c:	4b50      	ldr	r3, [pc, #320]	; (80033a0 <HAL_RCC_ClockConfig+0x1c4>)
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	494d      	ldr	r1, [pc, #308]	; (80033a0 <HAL_RCC_ClockConfig+0x1c4>)
 800326a:	4313      	orrs	r3, r2
 800326c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	2b00      	cmp	r3, #0
 8003278:	d040      	beq.n	80032fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d107      	bne.n	8003292 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003282:	4b47      	ldr	r3, [pc, #284]	; (80033a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d115      	bne.n	80032ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e07f      	b.n	8003392 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	2b02      	cmp	r3, #2
 8003298:	d107      	bne.n	80032aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800329a:	4b41      	ldr	r3, [pc, #260]	; (80033a0 <HAL_RCC_ClockConfig+0x1c4>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d109      	bne.n	80032ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e073      	b.n	8003392 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032aa:	4b3d      	ldr	r3, [pc, #244]	; (80033a0 <HAL_RCC_ClockConfig+0x1c4>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d101      	bne.n	80032ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e06b      	b.n	8003392 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032ba:	4b39      	ldr	r3, [pc, #228]	; (80033a0 <HAL_RCC_ClockConfig+0x1c4>)
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f023 0203 	bic.w	r2, r3, #3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	4936      	ldr	r1, [pc, #216]	; (80033a0 <HAL_RCC_ClockConfig+0x1c4>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032cc:	f7fd fb1e 	bl	800090c <HAL_GetTick>
 80032d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032d2:	e00a      	b.n	80032ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032d4:	f7fd fb1a 	bl	800090c <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d901      	bls.n	80032ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e053      	b.n	8003392 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ea:	4b2d      	ldr	r3, [pc, #180]	; (80033a0 <HAL_RCC_ClockConfig+0x1c4>)
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f003 020c 	and.w	r2, r3, #12
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d1eb      	bne.n	80032d4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032fc:	4b27      	ldr	r3, [pc, #156]	; (800339c <HAL_RCC_ClockConfig+0x1c0>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0307 	and.w	r3, r3, #7
 8003304:	683a      	ldr	r2, [r7, #0]
 8003306:	429a      	cmp	r2, r3
 8003308:	d210      	bcs.n	800332c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800330a:	4b24      	ldr	r3, [pc, #144]	; (800339c <HAL_RCC_ClockConfig+0x1c0>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f023 0207 	bic.w	r2, r3, #7
 8003312:	4922      	ldr	r1, [pc, #136]	; (800339c <HAL_RCC_ClockConfig+0x1c0>)
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	4313      	orrs	r3, r2
 8003318:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800331a:	4b20      	ldr	r3, [pc, #128]	; (800339c <HAL_RCC_ClockConfig+0x1c0>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0307 	and.w	r3, r3, #7
 8003322:	683a      	ldr	r2, [r7, #0]
 8003324:	429a      	cmp	r2, r3
 8003326:	d001      	beq.n	800332c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e032      	b.n	8003392 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0304 	and.w	r3, r3, #4
 8003334:	2b00      	cmp	r3, #0
 8003336:	d008      	beq.n	800334a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003338:	4b19      	ldr	r3, [pc, #100]	; (80033a0 <HAL_RCC_ClockConfig+0x1c4>)
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	4916      	ldr	r1, [pc, #88]	; (80033a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003346:	4313      	orrs	r3, r2
 8003348:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0308 	and.w	r3, r3, #8
 8003352:	2b00      	cmp	r3, #0
 8003354:	d009      	beq.n	800336a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003356:	4b12      	ldr	r3, [pc, #72]	; (80033a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	00db      	lsls	r3, r3, #3
 8003364:	490e      	ldr	r1, [pc, #56]	; (80033a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003366:	4313      	orrs	r3, r2
 8003368:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800336a:	f000 f821 	bl	80033b0 <HAL_RCC_GetSysClockFreq>
 800336e:	4602      	mov	r2, r0
 8003370:	4b0b      	ldr	r3, [pc, #44]	; (80033a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	091b      	lsrs	r3, r3, #4
 8003376:	f003 030f 	and.w	r3, r3, #15
 800337a:	490a      	ldr	r1, [pc, #40]	; (80033a4 <HAL_RCC_ClockConfig+0x1c8>)
 800337c:	5ccb      	ldrb	r3, [r1, r3]
 800337e:	fa22 f303 	lsr.w	r3, r2, r3
 8003382:	4a09      	ldr	r2, [pc, #36]	; (80033a8 <HAL_RCC_ClockConfig+0x1cc>)
 8003384:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003386:	4b09      	ldr	r3, [pc, #36]	; (80033ac <HAL_RCC_ClockConfig+0x1d0>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4618      	mov	r0, r3
 800338c:	f7fd fa7c 	bl	8000888 <HAL_InitTick>

  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3710      	adds	r7, #16
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	40022000 	.word	0x40022000
 80033a0:	40021000 	.word	0x40021000
 80033a4:	080095a0 	.word	0x080095a0
 80033a8:	2000000c 	.word	0x2000000c
 80033ac:	20000010 	.word	0x20000010

080033b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b087      	sub	sp, #28
 80033b4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80033b6:	2300      	movs	r3, #0
 80033b8:	60fb      	str	r3, [r7, #12]
 80033ba:	2300      	movs	r3, #0
 80033bc:	60bb      	str	r3, [r7, #8]
 80033be:	2300      	movs	r3, #0
 80033c0:	617b      	str	r3, [r7, #20]
 80033c2:	2300      	movs	r3, #0
 80033c4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80033c6:	2300      	movs	r3, #0
 80033c8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80033ca:	4b1e      	ldr	r3, [pc, #120]	; (8003444 <HAL_RCC_GetSysClockFreq+0x94>)
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f003 030c 	and.w	r3, r3, #12
 80033d6:	2b04      	cmp	r3, #4
 80033d8:	d002      	beq.n	80033e0 <HAL_RCC_GetSysClockFreq+0x30>
 80033da:	2b08      	cmp	r3, #8
 80033dc:	d003      	beq.n	80033e6 <HAL_RCC_GetSysClockFreq+0x36>
 80033de:	e027      	b.n	8003430 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80033e0:	4b19      	ldr	r3, [pc, #100]	; (8003448 <HAL_RCC_GetSysClockFreq+0x98>)
 80033e2:	613b      	str	r3, [r7, #16]
      break;
 80033e4:	e027      	b.n	8003436 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	0c9b      	lsrs	r3, r3, #18
 80033ea:	f003 030f 	and.w	r3, r3, #15
 80033ee:	4a17      	ldr	r2, [pc, #92]	; (800344c <HAL_RCC_GetSysClockFreq+0x9c>)
 80033f0:	5cd3      	ldrb	r3, [r2, r3]
 80033f2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d010      	beq.n	8003420 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80033fe:	4b11      	ldr	r3, [pc, #68]	; (8003444 <HAL_RCC_GetSysClockFreq+0x94>)
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	0c5b      	lsrs	r3, r3, #17
 8003404:	f003 0301 	and.w	r3, r3, #1
 8003408:	4a11      	ldr	r2, [pc, #68]	; (8003450 <HAL_RCC_GetSysClockFreq+0xa0>)
 800340a:	5cd3      	ldrb	r3, [r2, r3]
 800340c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a0d      	ldr	r2, [pc, #52]	; (8003448 <HAL_RCC_GetSysClockFreq+0x98>)
 8003412:	fb03 f202 	mul.w	r2, r3, r2
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	fbb2 f3f3 	udiv	r3, r2, r3
 800341c:	617b      	str	r3, [r7, #20]
 800341e:	e004      	b.n	800342a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4a0c      	ldr	r2, [pc, #48]	; (8003454 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003424:	fb02 f303 	mul.w	r3, r2, r3
 8003428:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	613b      	str	r3, [r7, #16]
      break;
 800342e:	e002      	b.n	8003436 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003430:	4b05      	ldr	r3, [pc, #20]	; (8003448 <HAL_RCC_GetSysClockFreq+0x98>)
 8003432:	613b      	str	r3, [r7, #16]
      break;
 8003434:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003436:	693b      	ldr	r3, [r7, #16]
}
 8003438:	4618      	mov	r0, r3
 800343a:	371c      	adds	r7, #28
 800343c:	46bd      	mov	sp, r7
 800343e:	bc80      	pop	{r7}
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop
 8003444:	40021000 	.word	0x40021000
 8003448:	007a1200 	.word	0x007a1200
 800344c:	080095b8 	.word	0x080095b8
 8003450:	080095c8 	.word	0x080095c8
 8003454:	003d0900 	.word	0x003d0900

08003458 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003458:	b480      	push	{r7}
 800345a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800345c:	4b02      	ldr	r3, [pc, #8]	; (8003468 <HAL_RCC_GetHCLKFreq+0x10>)
 800345e:	681b      	ldr	r3, [r3, #0]
}
 8003460:	4618      	mov	r0, r3
 8003462:	46bd      	mov	sp, r7
 8003464:	bc80      	pop	{r7}
 8003466:	4770      	bx	lr
 8003468:	2000000c 	.word	0x2000000c

0800346c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003470:	f7ff fff2 	bl	8003458 <HAL_RCC_GetHCLKFreq>
 8003474:	4602      	mov	r2, r0
 8003476:	4b05      	ldr	r3, [pc, #20]	; (800348c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	0a1b      	lsrs	r3, r3, #8
 800347c:	f003 0307 	and.w	r3, r3, #7
 8003480:	4903      	ldr	r1, [pc, #12]	; (8003490 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003482:	5ccb      	ldrb	r3, [r1, r3]
 8003484:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003488:	4618      	mov	r0, r3
 800348a:	bd80      	pop	{r7, pc}
 800348c:	40021000 	.word	0x40021000
 8003490:	080095b0 	.word	0x080095b0

08003494 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003498:	f7ff ffde 	bl	8003458 <HAL_RCC_GetHCLKFreq>
 800349c:	4602      	mov	r2, r0
 800349e:	4b05      	ldr	r3, [pc, #20]	; (80034b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	0adb      	lsrs	r3, r3, #11
 80034a4:	f003 0307 	and.w	r3, r3, #7
 80034a8:	4903      	ldr	r1, [pc, #12]	; (80034b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034aa:	5ccb      	ldrb	r3, [r1, r3]
 80034ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	40021000 	.word	0x40021000
 80034b8:	080095b0 	.word	0x080095b0

080034bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80034bc:	b480      	push	{r7}
 80034be:	b085      	sub	sp, #20
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80034c4:	4b0a      	ldr	r3, [pc, #40]	; (80034f0 <RCC_Delay+0x34>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a0a      	ldr	r2, [pc, #40]	; (80034f4 <RCC_Delay+0x38>)
 80034ca:	fba2 2303 	umull	r2, r3, r2, r3
 80034ce:	0a5b      	lsrs	r3, r3, #9
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	fb02 f303 	mul.w	r3, r2, r3
 80034d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80034d8:	bf00      	nop
  }
  while (Delay --);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	1e5a      	subs	r2, r3, #1
 80034de:	60fa      	str	r2, [r7, #12]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d1f9      	bne.n	80034d8 <RCC_Delay+0x1c>
}
 80034e4:	bf00      	nop
 80034e6:	bf00      	nop
 80034e8:	3714      	adds	r7, #20
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bc80      	pop	{r7}
 80034ee:	4770      	bx	lr
 80034f0:	2000000c 	.word	0x2000000c
 80034f4:	10624dd3 	.word	0x10624dd3

080034f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b086      	sub	sp, #24
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003500:	2300      	movs	r3, #0
 8003502:	613b      	str	r3, [r7, #16]
 8003504:	2300      	movs	r3, #0
 8003506:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0301 	and.w	r3, r3, #1
 8003510:	2b00      	cmp	r3, #0
 8003512:	d07d      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003514:	2300      	movs	r3, #0
 8003516:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003518:	4b4f      	ldr	r3, [pc, #316]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800351a:	69db      	ldr	r3, [r3, #28]
 800351c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d10d      	bne.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003524:	4b4c      	ldr	r3, [pc, #304]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003526:	69db      	ldr	r3, [r3, #28]
 8003528:	4a4b      	ldr	r2, [pc, #300]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800352a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800352e:	61d3      	str	r3, [r2, #28]
 8003530:	4b49      	ldr	r3, [pc, #292]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003532:	69db      	ldr	r3, [r3, #28]
 8003534:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003538:	60bb      	str	r3, [r7, #8]
 800353a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800353c:	2301      	movs	r3, #1
 800353e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003540:	4b46      	ldr	r3, [pc, #280]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003548:	2b00      	cmp	r3, #0
 800354a:	d118      	bne.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800354c:	4b43      	ldr	r3, [pc, #268]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a42      	ldr	r2, [pc, #264]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003552:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003556:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003558:	f7fd f9d8 	bl	800090c <HAL_GetTick>
 800355c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800355e:	e008      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003560:	f7fd f9d4 	bl	800090c <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	2b64      	cmp	r3, #100	; 0x64
 800356c:	d901      	bls.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e06d      	b.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003572:	4b3a      	ldr	r3, [pc, #232]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800357a:	2b00      	cmp	r3, #0
 800357c:	d0f0      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800357e:	4b36      	ldr	r3, [pc, #216]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003580:	6a1b      	ldr	r3, [r3, #32]
 8003582:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003586:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d02e      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003596:	68fa      	ldr	r2, [r7, #12]
 8003598:	429a      	cmp	r2, r3
 800359a:	d027      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800359c:	4b2e      	ldr	r3, [pc, #184]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800359e:	6a1b      	ldr	r3, [r3, #32]
 80035a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035a4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80035a6:	4b2e      	ldr	r3, [pc, #184]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80035a8:	2201      	movs	r2, #1
 80035aa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80035ac:	4b2c      	ldr	r3, [pc, #176]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80035b2:	4a29      	ldr	r2, [pc, #164]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f003 0301 	and.w	r3, r3, #1
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d014      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c2:	f7fd f9a3 	bl	800090c <HAL_GetTick>
 80035c6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035c8:	e00a      	b.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ca:	f7fd f99f 	bl	800090c <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80035d8:	4293      	cmp	r3, r2
 80035da:	d901      	bls.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e036      	b.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035e0:	4b1d      	ldr	r3, [pc, #116]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035e2:	6a1b      	ldr	r3, [r3, #32]
 80035e4:	f003 0302 	and.w	r3, r3, #2
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d0ee      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035ec:	4b1a      	ldr	r3, [pc, #104]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ee:	6a1b      	ldr	r3, [r3, #32]
 80035f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	4917      	ldr	r1, [pc, #92]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80035fe:	7dfb      	ldrb	r3, [r7, #23]
 8003600:	2b01      	cmp	r3, #1
 8003602:	d105      	bne.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003604:	4b14      	ldr	r3, [pc, #80]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003606:	69db      	ldr	r3, [r3, #28]
 8003608:	4a13      	ldr	r2, [pc, #76]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800360a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800360e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0302 	and.w	r3, r3, #2
 8003618:	2b00      	cmp	r3, #0
 800361a:	d008      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800361c:	4b0e      	ldr	r3, [pc, #56]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	490b      	ldr	r1, [pc, #44]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800362a:	4313      	orrs	r3, r2
 800362c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0310 	and.w	r3, r3, #16
 8003636:	2b00      	cmp	r3, #0
 8003638:	d008      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800363a:	4b07      	ldr	r3, [pc, #28]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	4904      	ldr	r1, [pc, #16]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003648:	4313      	orrs	r3, r2
 800364a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800364c:	2300      	movs	r3, #0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3718      	adds	r7, #24
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	40021000 	.word	0x40021000
 800365c:	40007000 	.word	0x40007000
 8003660:	42420440 	.word	0x42420440

08003664 <HAL_LIN_Init>:
  *            @arg UART_LINBREAKDETECTLENGTH_10B: 10-bit break detection
  *            @arg UART_LINBREAKDETECTLENGTH_11B: 11-bit break detection
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_Init(UART_HandleTypeDef *huart, uint32_t BreakDetectLength)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d101      	bne.n	8003678 <HAL_LIN_Init+0x14>
  {
    return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e05a      	b.n	800372e <HAL_LIN_Init+0xca>
  assert_param(IS_UART_LIN_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_LIN_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800367e:	b2db      	uxtb	r3, r3
 8003680:	2b00      	cmp	r3, #0
 8003682:	d106      	bne.n	8003692 <HAL_LIN_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f7fc ffd5 	bl	800063c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2224      	movs	r2, #36	; 0x24
 8003696:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	68da      	ldr	r2, [r3, #12]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036a8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f000 fe48 	bl	8004340 <UART_SetConfig>

  /* In LIN mode, the following bits must be kept cleared:
     - CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_CLKEN));
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	691a      	ldr	r2, [r3, #16]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036be:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	695a      	ldr	r2, [r3, #20]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036ce:	615a      	str	r2, [r3, #20]

  /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
  SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	691a      	ldr	r2, [r3, #16]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036de:	611a      	str	r2, [r3, #16]

  /* Set the USART LIN Break detection length. */
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_LBDL);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	691a      	ldr	r2, [r3, #16]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f022 0220 	bic.w	r2, r2, #32
 80036ee:	611a      	str	r2, [r3, #16]
  SET_BIT(huart->Instance->CR2, BreakDetectLength);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	6919      	ldr	r1, [r3, #16]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	683a      	ldr	r2, [r7, #0]
 80036fc:	430a      	orrs	r2, r1
 80036fe:	611a      	str	r2, [r3, #16]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68da      	ldr	r2, [r3, #12]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800370e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2220      	movs	r2, #32
 800371a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2220      	movs	r2, #32
 8003722:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3708      	adds	r7, #8
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}

08003736 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003736:	b580      	push	{r7, lr}
 8003738:	b08a      	sub	sp, #40	; 0x28
 800373a:	af02      	add	r7, sp, #8
 800373c:	60f8      	str	r0, [r7, #12]
 800373e:	60b9      	str	r1, [r7, #8]
 8003740:	603b      	str	r3, [r7, #0]
 8003742:	4613      	mov	r3, r2
 8003744:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003746:	2300      	movs	r3, #0
 8003748:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003750:	b2db      	uxtb	r3, r3
 8003752:	2b20      	cmp	r3, #32
 8003754:	d16d      	bne.n	8003832 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d002      	beq.n	8003762 <HAL_UART_Transmit+0x2c>
 800375c:	88fb      	ldrh	r3, [r7, #6]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d101      	bne.n	8003766 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e066      	b.n	8003834 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2200      	movs	r2, #0
 800376a:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2221      	movs	r2, #33	; 0x21
 8003770:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003774:	f7fd f8ca 	bl	800090c <HAL_GetTick>
 8003778:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	88fa      	ldrh	r2, [r7, #6]
 800377e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	88fa      	ldrh	r2, [r7, #6]
 8003784:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800378e:	d108      	bne.n	80037a2 <HAL_UART_Transmit+0x6c>
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	691b      	ldr	r3, [r3, #16]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d104      	bne.n	80037a2 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003798:	2300      	movs	r3, #0
 800379a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	61bb      	str	r3, [r7, #24]
 80037a0:	e003      	b.n	80037aa <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037a6:	2300      	movs	r3, #0
 80037a8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80037aa:	e02a      	b.n	8003802 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	9300      	str	r3, [sp, #0]
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	2200      	movs	r2, #0
 80037b4:	2180      	movs	r1, #128	; 0x80
 80037b6:	68f8      	ldr	r0, [r7, #12]
 80037b8:	f000 fb7f 	bl	8003eba <UART_WaitOnFlagUntilTimeout>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d001      	beq.n	80037c6 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e036      	b.n	8003834 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d10b      	bne.n	80037e4 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	881b      	ldrh	r3, [r3, #0]
 80037d0:	461a      	mov	r2, r3
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037da:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	3302      	adds	r3, #2
 80037e0:	61bb      	str	r3, [r7, #24]
 80037e2:	e007      	b.n	80037f4 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	781a      	ldrb	r2, [r3, #0]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	3301      	adds	r3, #1
 80037f2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	3b01      	subs	r3, #1
 80037fc:	b29a      	uxth	r2, r3
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003806:	b29b      	uxth	r3, r3
 8003808:	2b00      	cmp	r3, #0
 800380a:	d1cf      	bne.n	80037ac <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	9300      	str	r3, [sp, #0]
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	2200      	movs	r2, #0
 8003814:	2140      	movs	r1, #64	; 0x40
 8003816:	68f8      	ldr	r0, [r7, #12]
 8003818:	f000 fb4f 	bl	8003eba <UART_WaitOnFlagUntilTimeout>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d001      	beq.n	8003826 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e006      	b.n	8003834 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2220      	movs	r2, #32
 800382a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800382e:	2300      	movs	r3, #0
 8003830:	e000      	b.n	8003834 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003832:	2302      	movs	r3, #2
  }
}
 8003834:	4618      	mov	r0, r3
 8003836:	3720      	adds	r7, #32
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800383c:	b480      	push	{r7}
 800383e:	b085      	sub	sp, #20
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	4613      	mov	r3, r2
 8003848:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003850:	b2db      	uxtb	r3, r3
 8003852:	2b20      	cmp	r3, #32
 8003854:	d121      	bne.n	800389a <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d002      	beq.n	8003862 <HAL_UART_Transmit_IT+0x26>
 800385c:	88fb      	ldrh	r3, [r7, #6]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d101      	bne.n	8003866 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e01a      	b.n	800389c <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	68ba      	ldr	r2, [r7, #8]
 800386a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	88fa      	ldrh	r2, [r7, #6]
 8003870:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	88fa      	ldrh	r2, [r7, #6]
 8003876:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2200      	movs	r2, #0
 800387c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2221      	movs	r2, #33	; 0x21
 8003882:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	68da      	ldr	r2, [r3, #12]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003894:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003896:	2300      	movs	r3, #0
 8003898:	e000      	b.n	800389c <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800389a:	2302      	movs	r3, #2
  }
}
 800389c:	4618      	mov	r0, r3
 800389e:	3714      	adds	r7, #20
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bc80      	pop	{r7}
 80038a4:	4770      	bx	lr

080038a6 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038a6:	b580      	push	{r7, lr}
 80038a8:	b08c      	sub	sp, #48	; 0x30
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	60f8      	str	r0, [r7, #12]
 80038ae:	60b9      	str	r1, [r7, #8]
 80038b0:	4613      	mov	r3, r2
 80038b2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	2b20      	cmp	r3, #32
 80038be:	d14a      	bne.n	8003956 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d002      	beq.n	80038cc <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 80038c6:	88fb      	ldrh	r3, [r7, #6]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d101      	bne.n	80038d0 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e043      	b.n	8003958 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2201      	movs	r2, #1
 80038d4:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2200      	movs	r2, #0
 80038da:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 80038dc:	88fb      	ldrh	r3, [r7, #6]
 80038de:	461a      	mov	r2, r3
 80038e0:	68b9      	ldr	r1, [r7, #8]
 80038e2:	68f8      	ldr	r0, [r7, #12]
 80038e4:	f000 fb57 	bl	8003f96 <UART_Start_Receive_IT>
 80038e8:	4603      	mov	r3, r0
 80038ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80038ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d12c      	bne.n	8003950 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d125      	bne.n	800394a <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80038fe:	2300      	movs	r3, #0
 8003900:	613b      	str	r3, [r7, #16]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	613b      	str	r3, [r7, #16]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	613b      	str	r3, [r7, #16]
 8003912:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	330c      	adds	r3, #12
 800391a:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	e853 3f00 	ldrex	r3, [r3]
 8003922:	617b      	str	r3, [r7, #20]
   return(result);
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	f043 0310 	orr.w	r3, r3, #16
 800392a:	62bb      	str	r3, [r7, #40]	; 0x28
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	330c      	adds	r3, #12
 8003932:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003934:	627a      	str	r2, [r7, #36]	; 0x24
 8003936:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003938:	6a39      	ldr	r1, [r7, #32]
 800393a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800393c:	e841 2300 	strex	r3, r2, [r1]
 8003940:	61fb      	str	r3, [r7, #28]
   return(result);
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d1e5      	bne.n	8003914 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 8003948:	e002      	b.n	8003950 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8003950:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003954:	e000      	b.n	8003958 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8003956:	2302      	movs	r3, #2
  }
}
 8003958:	4618      	mov	r0, r3
 800395a:	3730      	adds	r7, #48	; 0x30
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b0ba      	sub	sp, #232	; 0xe8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	695b      	ldr	r3, [r3, #20]
 8003982:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003986:	2300      	movs	r3, #0
 8003988:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800398c:	2300      	movs	r3, #0
 800398e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003996:	f003 030f 	and.w	r3, r3, #15
 800399a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800399e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d10f      	bne.n	80039c6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039aa:	f003 0320 	and.w	r3, r3, #32
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d009      	beq.n	80039c6 <HAL_UART_IRQHandler+0x66>
 80039b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039b6:	f003 0320 	and.w	r3, r3, #32
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d003      	beq.n	80039c6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 fbff 	bl	80041c2 <UART_Receive_IT>
      return;
 80039c4:	e25b      	b.n	8003e7e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80039c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	f000 80de 	beq.w	8003b8c <HAL_UART_IRQHandler+0x22c>
 80039d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039d4:	f003 0301 	and.w	r3, r3, #1
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d106      	bne.n	80039ea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80039dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039e0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	f000 80d1 	beq.w	8003b8c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80039ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039ee:	f003 0301 	and.w	r3, r3, #1
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d00b      	beq.n	8003a0e <HAL_UART_IRQHandler+0xae>
 80039f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d005      	beq.n	8003a0e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a06:	f043 0201 	orr.w	r2, r3, #1
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a12:	f003 0304 	and.w	r3, r3, #4
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00b      	beq.n	8003a32 <HAL_UART_IRQHandler+0xd2>
 8003a1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a1e:	f003 0301 	and.w	r3, r3, #1
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d005      	beq.n	8003a32 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a2a:	f043 0202 	orr.w	r2, r3, #2
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a36:	f003 0302 	and.w	r3, r3, #2
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d00b      	beq.n	8003a56 <HAL_UART_IRQHandler+0xf6>
 8003a3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d005      	beq.n	8003a56 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a4e:	f043 0204 	orr.w	r2, r3, #4
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a5a:	f003 0308 	and.w	r3, r3, #8
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d011      	beq.n	8003a86 <HAL_UART_IRQHandler+0x126>
 8003a62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a66:	f003 0320 	and.w	r3, r3, #32
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d105      	bne.n	8003a7a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003a6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a72:	f003 0301 	and.w	r3, r3, #1
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d005      	beq.n	8003a86 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a7e:	f043 0208 	orr.w	r2, r3, #8
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	f000 81f2 	beq.w	8003e74 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a94:	f003 0320 	and.w	r3, r3, #32
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d008      	beq.n	8003aae <HAL_UART_IRQHandler+0x14e>
 8003a9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003aa0:	f003 0320 	and.w	r3, r3, #32
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d002      	beq.n	8003aae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f000 fb8a 	bl	80041c2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	695b      	ldr	r3, [r3, #20]
 8003ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	bf14      	ite	ne
 8003abc:	2301      	movne	r3, #1
 8003abe:	2300      	moveq	r3, #0
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aca:	f003 0308 	and.w	r3, r3, #8
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d103      	bne.n	8003ada <HAL_UART_IRQHandler+0x17a>
 8003ad2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d04f      	beq.n	8003b7a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 fa94 	bl	8004008 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d041      	beq.n	8003b72 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	3314      	adds	r3, #20
 8003af4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003afc:	e853 3f00 	ldrex	r3, [r3]
 8003b00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003b04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003b08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	3314      	adds	r3, #20
 8003b16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003b1a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003b1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003b26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003b2a:	e841 2300 	strex	r3, r2, [r1]
 8003b2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003b32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d1d9      	bne.n	8003aee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d013      	beq.n	8003b6a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b46:	4a7e      	ldr	r2, [pc, #504]	; (8003d40 <HAL_UART_IRQHandler+0x3e0>)
 8003b48:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f7fd f884 	bl	8000c5c <HAL_DMA_Abort_IT>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d016      	beq.n	8003b88 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003b64:	4610      	mov	r0, r2
 8003b66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b68:	e00e      	b.n	8003b88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 f99c 	bl	8003ea8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b70:	e00a      	b.n	8003b88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 f998 	bl	8003ea8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b78:	e006      	b.n	8003b88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 f994 	bl	8003ea8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003b86:	e175      	b.n	8003e74 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b88:	bf00      	nop
    return;
 8003b8a:	e173      	b.n	8003e74 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	f040 814f 	bne.w	8003e34 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003b96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b9a:	f003 0310 	and.w	r3, r3, #16
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	f000 8148 	beq.w	8003e34 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003ba4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ba8:	f003 0310 	and.w	r3, r3, #16
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	f000 8141 	beq.w	8003e34 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	60bb      	str	r3, [r7, #8]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	60bb      	str	r3, [r7, #8]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	60bb      	str	r3, [r7, #8]
 8003bc6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	695b      	ldr	r3, [r3, #20]
 8003bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	f000 80b6 	beq.w	8003d44 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003be4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	f000 8145 	beq.w	8003e78 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003bf2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	f080 813e 	bcs.w	8003e78 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c02:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c08:	699b      	ldr	r3, [r3, #24]
 8003c0a:	2b20      	cmp	r3, #32
 8003c0c:	f000 8088 	beq.w	8003d20 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	330c      	adds	r3, #12
 8003c16:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c1e:	e853 3f00 	ldrex	r3, [r3]
 8003c22:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003c26:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c2e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	330c      	adds	r3, #12
 8003c38:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003c3c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c40:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c44:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003c48:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003c4c:	e841 2300 	strex	r3, r2, [r1]
 8003c50:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003c54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d1d9      	bne.n	8003c10 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	3314      	adds	r3, #20
 8003c62:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c66:	e853 3f00 	ldrex	r3, [r3]
 8003c6a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003c6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c6e:	f023 0301 	bic.w	r3, r3, #1
 8003c72:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	3314      	adds	r3, #20
 8003c7c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003c80:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003c84:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c86:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003c88:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003c8c:	e841 2300 	strex	r3, r2, [r1]
 8003c90:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003c92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d1e1      	bne.n	8003c5c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	3314      	adds	r3, #20
 8003c9e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ca2:	e853 3f00 	ldrex	r3, [r3]
 8003ca6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003ca8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003caa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	3314      	adds	r3, #20
 8003cb8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003cbc:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003cbe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003cc2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003cc4:	e841 2300 	strex	r3, r2, [r1]
 8003cc8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003cca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d1e3      	bne.n	8003c98 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2220      	movs	r2, #32
 8003cd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	330c      	adds	r3, #12
 8003ce4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ce8:	e853 3f00 	ldrex	r3, [r3]
 8003cec:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003cee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cf0:	f023 0310 	bic.w	r3, r3, #16
 8003cf4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	330c      	adds	r3, #12
 8003cfe:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003d02:	65ba      	str	r2, [r7, #88]	; 0x58
 8003d04:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d06:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003d08:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d0a:	e841 2300 	strex	r3, r2, [r1]
 8003d0e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003d10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d1e3      	bne.n	8003cde <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7fc ff63 	bl	8000be6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2202      	movs	r2, #2
 8003d24:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	4619      	mov	r1, r3
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f7fc fa44 	bl	80001c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d3c:	e09c      	b.n	8003e78 <HAL_UART_IRQHandler+0x518>
 8003d3e:	bf00      	nop
 8003d40:	080040cd 	.word	0x080040cd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	f000 808e 	beq.w	8003e7c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003d60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	f000 8089 	beq.w	8003e7c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	330c      	adds	r3, #12
 8003d70:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d74:	e853 3f00 	ldrex	r3, [r3]
 8003d78:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003d7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d80:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	330c      	adds	r3, #12
 8003d8a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003d8e:	647a      	str	r2, [r7, #68]	; 0x44
 8003d90:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d92:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003d94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d96:	e841 2300 	strex	r3, r2, [r1]
 8003d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003d9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d1e3      	bne.n	8003d6a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	3314      	adds	r3, #20
 8003da8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dac:	e853 3f00 	ldrex	r3, [r3]
 8003db0:	623b      	str	r3, [r7, #32]
   return(result);
 8003db2:	6a3b      	ldr	r3, [r7, #32]
 8003db4:	f023 0301 	bic.w	r3, r3, #1
 8003db8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	3314      	adds	r3, #20
 8003dc2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003dc6:	633a      	str	r2, [r7, #48]	; 0x30
 8003dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003dcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dce:	e841 2300 	strex	r3, r2, [r1]
 8003dd2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d1e3      	bne.n	8003da2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2220      	movs	r2, #32
 8003dde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	330c      	adds	r3, #12
 8003dee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	e853 3f00 	ldrex	r3, [r3]
 8003df6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f023 0310 	bic.w	r3, r3, #16
 8003dfe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	330c      	adds	r3, #12
 8003e08:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003e0c:	61fa      	str	r2, [r7, #28]
 8003e0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e10:	69b9      	ldr	r1, [r7, #24]
 8003e12:	69fa      	ldr	r2, [r7, #28]
 8003e14:	e841 2300 	strex	r3, r2, [r1]
 8003e18:	617b      	str	r3, [r7, #20]
   return(result);
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d1e3      	bne.n	8003de8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2202      	movs	r2, #2
 8003e24:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e26:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f7fc f9c9 	bl	80001c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e32:	e023      	b.n	8003e7c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d009      	beq.n	8003e54 <HAL_UART_IRQHandler+0x4f4>
 8003e40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d003      	beq.n	8003e54 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f000 f951 	bl	80040f4 <UART_Transmit_IT>
    return;
 8003e52:	e014      	b.n	8003e7e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d00e      	beq.n	8003e7e <HAL_UART_IRQHandler+0x51e>
 8003e60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d008      	beq.n	8003e7e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 f990 	bl	8004192 <UART_EndTransmit_IT>
    return;
 8003e72:	e004      	b.n	8003e7e <HAL_UART_IRQHandler+0x51e>
    return;
 8003e74:	bf00      	nop
 8003e76:	e002      	b.n	8003e7e <HAL_UART_IRQHandler+0x51e>
      return;
 8003e78:	bf00      	nop
 8003e7a:	e000      	b.n	8003e7e <HAL_UART_IRQHandler+0x51e>
      return;
 8003e7c:	bf00      	nop
  }
}
 8003e7e:	37e8      	adds	r7, #232	; 0xe8
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003e8c:	bf00      	nop
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bc80      	pop	{r7}
 8003e94:	4770      	bx	lr

08003e96 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e96:	b480      	push	{r7}
 8003e98:	b083      	sub	sp, #12
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003e9e:	bf00      	nop
 8003ea0:	370c      	adds	r7, #12
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bc80      	pop	{r7}
 8003ea6:	4770      	bx	lr

08003ea8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003eb0:	bf00      	nop
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bc80      	pop	{r7}
 8003eb8:	4770      	bx	lr

08003eba <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003eba:	b580      	push	{r7, lr}
 8003ebc:	b090      	sub	sp, #64	; 0x40
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	60f8      	str	r0, [r7, #12]
 8003ec2:	60b9      	str	r1, [r7, #8]
 8003ec4:	603b      	str	r3, [r7, #0]
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003eca:	e050      	b.n	8003f6e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ecc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed2:	d04c      	beq.n	8003f6e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003ed4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d007      	beq.n	8003eea <UART_WaitOnFlagUntilTimeout+0x30>
 8003eda:	f7fc fd17 	bl	800090c <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d241      	bcs.n	8003f6e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	330c      	adds	r3, #12
 8003ef0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef4:	e853 3f00 	ldrex	r3, [r3]
 8003ef8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	330c      	adds	r3, #12
 8003f08:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f0a:	637a      	str	r2, [r7, #52]	; 0x34
 8003f0c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f0e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f12:	e841 2300 	strex	r3, r2, [r1]
 8003f16:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d1e5      	bne.n	8003eea <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	3314      	adds	r3, #20
 8003f24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	e853 3f00 	ldrex	r3, [r3]
 8003f2c:	613b      	str	r3, [r7, #16]
   return(result);
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	f023 0301 	bic.w	r3, r3, #1
 8003f34:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	3314      	adds	r3, #20
 8003f3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f3e:	623a      	str	r2, [r7, #32]
 8003f40:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f42:	69f9      	ldr	r1, [r7, #28]
 8003f44:	6a3a      	ldr	r2, [r7, #32]
 8003f46:	e841 2300 	strex	r3, r2, [r1]
 8003f4a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d1e5      	bne.n	8003f1e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2220      	movs	r2, #32
 8003f56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2220      	movs	r2, #32
 8003f5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e00f      	b.n	8003f8e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	4013      	ands	r3, r2
 8003f78:	68ba      	ldr	r2, [r7, #8]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	bf0c      	ite	eq
 8003f7e:	2301      	moveq	r3, #1
 8003f80:	2300      	movne	r3, #0
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	461a      	mov	r2, r3
 8003f86:	79fb      	ldrb	r3, [r7, #7]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d09f      	beq.n	8003ecc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3740      	adds	r7, #64	; 0x40
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}

08003f96 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f96:	b480      	push	{r7}
 8003f98:	b085      	sub	sp, #20
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	60f8      	str	r0, [r7, #12]
 8003f9e:	60b9      	str	r1, [r7, #8]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	68ba      	ldr	r2, [r7, #8]
 8003fa8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	88fa      	ldrh	r2, [r7, #6]
 8003fae:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	88fa      	ldrh	r2, [r7, #6]
 8003fb4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2222      	movs	r2, #34	; 0x22
 8003fc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	691b      	ldr	r3, [r3, #16]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d007      	beq.n	8003fdc <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	68da      	ldr	r2, [r3, #12]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fda:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	695a      	ldr	r2, [r3, #20]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f042 0201 	orr.w	r2, r2, #1
 8003fea:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68da      	ldr	r2, [r3, #12]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f042 0220 	orr.w	r2, r2, #32
 8003ffa:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3714      	adds	r7, #20
 8004002:	46bd      	mov	sp, r7
 8004004:	bc80      	pop	{r7}
 8004006:	4770      	bx	lr

08004008 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004008:	b480      	push	{r7}
 800400a:	b095      	sub	sp, #84	; 0x54
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	330c      	adds	r3, #12
 8004016:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800401a:	e853 3f00 	ldrex	r3, [r3]
 800401e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004022:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004026:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	330c      	adds	r3, #12
 800402e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004030:	643a      	str	r2, [r7, #64]	; 0x40
 8004032:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004034:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004036:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004038:	e841 2300 	strex	r3, r2, [r1]
 800403c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800403e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004040:	2b00      	cmp	r3, #0
 8004042:	d1e5      	bne.n	8004010 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	3314      	adds	r3, #20
 800404a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800404c:	6a3b      	ldr	r3, [r7, #32]
 800404e:	e853 3f00 	ldrex	r3, [r3]
 8004052:	61fb      	str	r3, [r7, #28]
   return(result);
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	f023 0301 	bic.w	r3, r3, #1
 800405a:	64bb      	str	r3, [r7, #72]	; 0x48
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	3314      	adds	r3, #20
 8004062:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004064:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004066:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004068:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800406a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800406c:	e841 2300 	strex	r3, r2, [r1]
 8004070:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004074:	2b00      	cmp	r3, #0
 8004076:	d1e5      	bne.n	8004044 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407c:	2b01      	cmp	r3, #1
 800407e:	d119      	bne.n	80040b4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	330c      	adds	r3, #12
 8004086:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	e853 3f00 	ldrex	r3, [r3]
 800408e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	f023 0310 	bic.w	r3, r3, #16
 8004096:	647b      	str	r3, [r7, #68]	; 0x44
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	330c      	adds	r3, #12
 800409e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040a0:	61ba      	str	r2, [r7, #24]
 80040a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a4:	6979      	ldr	r1, [r7, #20]
 80040a6:	69ba      	ldr	r2, [r7, #24]
 80040a8:	e841 2300 	strex	r3, r2, [r1]
 80040ac:	613b      	str	r3, [r7, #16]
   return(result);
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d1e5      	bne.n	8004080 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2220      	movs	r2, #32
 80040b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80040c2:	bf00      	nop
 80040c4:	3754      	adds	r7, #84	; 0x54
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bc80      	pop	{r7}
 80040ca:	4770      	bx	lr

080040cc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2200      	movs	r2, #0
 80040de:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2200      	movs	r2, #0
 80040e4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040e6:	68f8      	ldr	r0, [r7, #12]
 80040e8:	f7ff fede 	bl	8003ea8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040ec:	bf00      	nop
 80040ee:	3710      	adds	r7, #16
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b085      	sub	sp, #20
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004102:	b2db      	uxtb	r3, r3
 8004104:	2b21      	cmp	r3, #33	; 0x21
 8004106:	d13e      	bne.n	8004186 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004110:	d114      	bne.n	800413c <UART_Transmit_IT+0x48>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d110      	bne.n	800413c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a1b      	ldr	r3, [r3, #32]
 800411e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	881b      	ldrh	r3, [r3, #0]
 8004124:	461a      	mov	r2, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800412e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a1b      	ldr	r3, [r3, #32]
 8004134:	1c9a      	adds	r2, r3, #2
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	621a      	str	r2, [r3, #32]
 800413a:	e008      	b.n	800414e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a1b      	ldr	r3, [r3, #32]
 8004140:	1c59      	adds	r1, r3, #1
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	6211      	str	r1, [r2, #32]
 8004146:	781a      	ldrb	r2, [r3, #0]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004152:	b29b      	uxth	r3, r3
 8004154:	3b01      	subs	r3, #1
 8004156:	b29b      	uxth	r3, r3
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	4619      	mov	r1, r3
 800415c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800415e:	2b00      	cmp	r3, #0
 8004160:	d10f      	bne.n	8004182 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68da      	ldr	r2, [r3, #12]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004170:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	68da      	ldr	r2, [r3, #12]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004180:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004182:	2300      	movs	r3, #0
 8004184:	e000      	b.n	8004188 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004186:	2302      	movs	r3, #2
  }
}
 8004188:	4618      	mov	r0, r3
 800418a:	3714      	adds	r7, #20
 800418c:	46bd      	mov	sp, r7
 800418e:	bc80      	pop	{r7}
 8004190:	4770      	bx	lr

08004192 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004192:	b580      	push	{r7, lr}
 8004194:	b082      	sub	sp, #8
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	68da      	ldr	r2, [r3, #12]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041a8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2220      	movs	r2, #32
 80041ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f7ff fe66 	bl	8003e84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3708      	adds	r7, #8
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}

080041c2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80041c2:	b580      	push	{r7, lr}
 80041c4:	b08c      	sub	sp, #48	; 0x30
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	2b22      	cmp	r3, #34	; 0x22
 80041d4:	f040 80ae 	bne.w	8004334 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041e0:	d117      	bne.n	8004212 <UART_Receive_IT+0x50>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d113      	bne.n	8004212 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80041ea:	2300      	movs	r3, #0
 80041ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004200:	b29a      	uxth	r2, r3
 8004202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004204:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800420a:	1c9a      	adds	r2, r3, #2
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	629a      	str	r2, [r3, #40]	; 0x28
 8004210:	e026      	b.n	8004260 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004216:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004218:	2300      	movs	r3, #0
 800421a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004224:	d007      	beq.n	8004236 <UART_Receive_IT+0x74>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d10a      	bne.n	8004244 <UART_Receive_IT+0x82>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d106      	bne.n	8004244 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	b2da      	uxtb	r2, r3
 800423e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004240:	701a      	strb	r2, [r3, #0]
 8004242:	e008      	b.n	8004256 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	b2db      	uxtb	r3, r3
 800424c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004250:	b2da      	uxtb	r2, r3
 8004252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004254:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800425a:	1c5a      	adds	r2, r3, #1
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004264:	b29b      	uxth	r3, r3
 8004266:	3b01      	subs	r3, #1
 8004268:	b29b      	uxth	r3, r3
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	4619      	mov	r1, r3
 800426e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004270:	2b00      	cmp	r3, #0
 8004272:	d15d      	bne.n	8004330 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68da      	ldr	r2, [r3, #12]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f022 0220 	bic.w	r2, r2, #32
 8004282:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	68da      	ldr	r2, [r3, #12]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004292:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	695a      	ldr	r2, [r3, #20]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f022 0201 	bic.w	r2, r2, #1
 80042a2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2220      	movs	r2, #32
 80042a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d135      	bne.n	8004326 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	330c      	adds	r3, #12
 80042c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	e853 3f00 	ldrex	r3, [r3]
 80042ce:	613b      	str	r3, [r7, #16]
   return(result);
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	f023 0310 	bic.w	r3, r3, #16
 80042d6:	627b      	str	r3, [r7, #36]	; 0x24
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	330c      	adds	r3, #12
 80042de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042e0:	623a      	str	r2, [r7, #32]
 80042e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e4:	69f9      	ldr	r1, [r7, #28]
 80042e6:	6a3a      	ldr	r2, [r7, #32]
 80042e8:	e841 2300 	strex	r3, r2, [r1]
 80042ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d1e5      	bne.n	80042c0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0310 	and.w	r3, r3, #16
 80042fe:	2b10      	cmp	r3, #16
 8004300:	d10a      	bne.n	8004318 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004302:	2300      	movs	r3, #0
 8004304:	60fb      	str	r3, [r7, #12]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	60fb      	str	r3, [r7, #12]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	60fb      	str	r3, [r7, #12]
 8004316:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800431c:	4619      	mov	r1, r3
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f7fb ff50 	bl	80001c4 <HAL_UARTEx_RxEventCallback>
 8004324:	e002      	b.n	800432c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f7ff fdb5 	bl	8003e96 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800432c:	2300      	movs	r3, #0
 800432e:	e002      	b.n	8004336 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004330:	2300      	movs	r3, #0
 8004332:	e000      	b.n	8004336 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004334:	2302      	movs	r3, #2
  }
}
 8004336:	4618      	mov	r0, r3
 8004338:	3730      	adds	r7, #48	; 0x30
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
	...

08004340 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	68da      	ldr	r2, [r3, #12]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	430a      	orrs	r2, r1
 800435c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	689a      	ldr	r2, [r3, #8]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	431a      	orrs	r2, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	695b      	ldr	r3, [r3, #20]
 800436c:	4313      	orrs	r3, r2
 800436e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800437a:	f023 030c 	bic.w	r3, r3, #12
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	6812      	ldr	r2, [r2, #0]
 8004382:	68b9      	ldr	r1, [r7, #8]
 8004384:	430b      	orrs	r3, r1
 8004386:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	699a      	ldr	r2, [r3, #24]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	430a      	orrs	r2, r1
 800439c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a2c      	ldr	r2, [pc, #176]	; (8004454 <UART_SetConfig+0x114>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d103      	bne.n	80043b0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80043a8:	f7ff f874 	bl	8003494 <HAL_RCC_GetPCLK2Freq>
 80043ac:	60f8      	str	r0, [r7, #12]
 80043ae:	e002      	b.n	80043b6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80043b0:	f7ff f85c 	bl	800346c <HAL_RCC_GetPCLK1Freq>
 80043b4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	4613      	mov	r3, r2
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	4413      	add	r3, r2
 80043be:	009a      	lsls	r2, r3, #2
 80043c0:	441a      	add	r2, r3
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043cc:	4a22      	ldr	r2, [pc, #136]	; (8004458 <UART_SetConfig+0x118>)
 80043ce:	fba2 2303 	umull	r2, r3, r2, r3
 80043d2:	095b      	lsrs	r3, r3, #5
 80043d4:	0119      	lsls	r1, r3, #4
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	4613      	mov	r3, r2
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	4413      	add	r3, r2
 80043de:	009a      	lsls	r2, r3, #2
 80043e0:	441a      	add	r2, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80043ec:	4b1a      	ldr	r3, [pc, #104]	; (8004458 <UART_SetConfig+0x118>)
 80043ee:	fba3 0302 	umull	r0, r3, r3, r2
 80043f2:	095b      	lsrs	r3, r3, #5
 80043f4:	2064      	movs	r0, #100	; 0x64
 80043f6:	fb00 f303 	mul.w	r3, r0, r3
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	011b      	lsls	r3, r3, #4
 80043fe:	3332      	adds	r3, #50	; 0x32
 8004400:	4a15      	ldr	r2, [pc, #84]	; (8004458 <UART_SetConfig+0x118>)
 8004402:	fba2 2303 	umull	r2, r3, r2, r3
 8004406:	095b      	lsrs	r3, r3, #5
 8004408:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800440c:	4419      	add	r1, r3
 800440e:	68fa      	ldr	r2, [r7, #12]
 8004410:	4613      	mov	r3, r2
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	4413      	add	r3, r2
 8004416:	009a      	lsls	r2, r3, #2
 8004418:	441a      	add	r2, r3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	fbb2 f2f3 	udiv	r2, r2, r3
 8004424:	4b0c      	ldr	r3, [pc, #48]	; (8004458 <UART_SetConfig+0x118>)
 8004426:	fba3 0302 	umull	r0, r3, r3, r2
 800442a:	095b      	lsrs	r3, r3, #5
 800442c:	2064      	movs	r0, #100	; 0x64
 800442e:	fb00 f303 	mul.w	r3, r0, r3
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	011b      	lsls	r3, r3, #4
 8004436:	3332      	adds	r3, #50	; 0x32
 8004438:	4a07      	ldr	r2, [pc, #28]	; (8004458 <UART_SetConfig+0x118>)
 800443a:	fba2 2303 	umull	r2, r3, r2, r3
 800443e:	095b      	lsrs	r3, r3, #5
 8004440:	f003 020f 	and.w	r2, r3, #15
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	440a      	add	r2, r1
 800444a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800444c:	bf00      	nop
 800444e:	3710      	adds	r7, #16
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}
 8004454:	40013800 	.word	0x40013800
 8004458:	51eb851f 	.word	0x51eb851f

0800445c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800445c:	b084      	sub	sp, #16
 800445e:	b480      	push	{r7}
 8004460:	b083      	sub	sp, #12
 8004462:	af00      	add	r7, sp, #0
 8004464:	6078      	str	r0, [r7, #4]
 8004466:	f107 0014 	add.w	r0, r7, #20
 800446a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800446e:	2300      	movs	r3, #0
}
 8004470:	4618      	mov	r0, r3
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	bc80      	pop	{r7}
 8004478:	b004      	add	sp, #16
 800447a:	4770      	bx	lr

0800447c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800447c:	b480      	push	{r7}
 800447e:	b085      	sub	sp, #20
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800448c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004490:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	b29a      	uxth	r2, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800449c:	2300      	movs	r3, #0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3714      	adds	r7, #20
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bc80      	pop	{r7}
 80044a6:	4770      	bx	lr

080044a8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b085      	sub	sp, #20
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80044b0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80044b4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80044bc:	b29a      	uxth	r2, r3
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	43db      	mvns	r3, r3
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	4013      	ands	r3, r2
 80044c8:	b29a      	uxth	r2, r3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3714      	adds	r7, #20
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bc80      	pop	{r7}
 80044da:	4770      	bx	lr

080044dc <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	460b      	mov	r3, r1
 80044e6:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	370c      	adds	r7, #12
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bc80      	pop	{r7}
 80044f2:	4770      	bx	lr

080044f4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80044f4:	b084      	sub	sp, #16
 80044f6:	b480      	push	{r7}
 80044f8:	b083      	sub	sp, #12
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]
 80044fe:	f107 0014 	add.w	r0, r7, #20
 8004502:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2201      	movs	r2, #1
 800450a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004526:	2300      	movs	r3, #0
}
 8004528:	4618      	mov	r0, r3
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	bc80      	pop	{r7}
 8004530:	b004      	add	sp, #16
 8004532:	4770      	bx	lr

08004534 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004534:	b480      	push	{r7}
 8004536:	b09d      	sub	sp, #116	; 0x74
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800453e:	2300      	movs	r3, #0
 8004540:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	4413      	add	r3, r2
 800454e:	881b      	ldrh	r3, [r3, #0]
 8004550:	b29b      	uxth	r3, r3
 8004552:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800455a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	78db      	ldrb	r3, [r3, #3]
 8004562:	2b03      	cmp	r3, #3
 8004564:	d81f      	bhi.n	80045a6 <USB_ActivateEndpoint+0x72>
 8004566:	a201      	add	r2, pc, #4	; (adr r2, 800456c <USB_ActivateEndpoint+0x38>)
 8004568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800456c:	0800457d 	.word	0x0800457d
 8004570:	08004599 	.word	0x08004599
 8004574:	080045af 	.word	0x080045af
 8004578:	0800458b 	.word	0x0800458b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800457c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004580:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004584:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004588:	e012      	b.n	80045b0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800458a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800458e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004592:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004596:	e00b      	b.n	80045b0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004598:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800459c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80045a0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80045a4:	e004      	b.n	80045b0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80045ac:	e000      	b.n	80045b0 <USB_ActivateEndpoint+0x7c>
      break;
 80045ae:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	441a      	add	r2, r3
 80045ba:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80045be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	4413      	add	r3, r2
 80045dc:	881b      	ldrh	r3, [r3, #0]
 80045de:	b29b      	uxth	r3, r3
 80045e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045e8:	b29a      	uxth	r2, r3
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	4313      	orrs	r3, r2
 80045f2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	441a      	add	r2, r3
 8004600:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004604:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004608:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800460c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004614:	b29b      	uxth	r3, r3
 8004616:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	7b1b      	ldrb	r3, [r3, #12]
 800461c:	2b00      	cmp	r3, #0
 800461e:	f040 8178 	bne.w	8004912 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	785b      	ldrb	r3, [r3, #1]
 8004626:	2b00      	cmp	r3, #0
 8004628:	f000 8084 	beq.w	8004734 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	61bb      	str	r3, [r7, #24]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004636:	b29b      	uxth	r3, r3
 8004638:	461a      	mov	r2, r3
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	4413      	add	r3, r2
 800463e:	61bb      	str	r3, [r7, #24]
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	011a      	lsls	r2, r3, #4
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	4413      	add	r3, r2
 800464a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800464e:	617b      	str	r3, [r7, #20]
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	88db      	ldrh	r3, [r3, #6]
 8004654:	085b      	lsrs	r3, r3, #1
 8004656:	b29b      	uxth	r3, r3
 8004658:	005b      	lsls	r3, r3, #1
 800465a:	b29a      	uxth	r2, r3
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	781b      	ldrb	r3, [r3, #0]
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	4413      	add	r3, r2
 800466a:	881b      	ldrh	r3, [r3, #0]
 800466c:	827b      	strh	r3, [r7, #18]
 800466e:	8a7b      	ldrh	r3, [r7, #18]
 8004670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004674:	2b00      	cmp	r3, #0
 8004676:	d01b      	beq.n	80046b0 <USB_ActivateEndpoint+0x17c>
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	781b      	ldrb	r3, [r3, #0]
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	4413      	add	r3, r2
 8004682:	881b      	ldrh	r3, [r3, #0]
 8004684:	b29b      	uxth	r3, r3
 8004686:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800468a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800468e:	823b      	strh	r3, [r7, #16]
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	441a      	add	r2, r3
 800469a:	8a3b      	ldrh	r3, [r7, #16]
 800469c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046a8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	78db      	ldrb	r3, [r3, #3]
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d020      	beq.n	80046fa <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	4413      	add	r3, r2
 80046c2:	881b      	ldrh	r3, [r3, #0]
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046ce:	81bb      	strh	r3, [r7, #12]
 80046d0:	89bb      	ldrh	r3, [r7, #12]
 80046d2:	f083 0320 	eor.w	r3, r3, #32
 80046d6:	81bb      	strh	r3, [r7, #12]
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	441a      	add	r2, r3
 80046e2:	89bb      	ldrh	r3, [r7, #12]
 80046e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	8013      	strh	r3, [r2, #0]
 80046f8:	e2d5      	b.n	8004ca6 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	4413      	add	r3, r2
 8004704:	881b      	ldrh	r3, [r3, #0]
 8004706:	b29b      	uxth	r3, r3
 8004708:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800470c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004710:	81fb      	strh	r3, [r7, #14]
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	441a      	add	r2, r3
 800471c:	89fb      	ldrh	r3, [r7, #14]
 800471e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004722:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004726:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800472a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800472e:	b29b      	uxth	r3, r3
 8004730:	8013      	strh	r3, [r2, #0]
 8004732:	e2b8      	b.n	8004ca6 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	633b      	str	r3, [r7, #48]	; 0x30
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800473e:	b29b      	uxth	r3, r3
 8004740:	461a      	mov	r2, r3
 8004742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004744:	4413      	add	r3, r2
 8004746:	633b      	str	r3, [r7, #48]	; 0x30
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	011a      	lsls	r2, r3, #4
 800474e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004750:	4413      	add	r3, r2
 8004752:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004756:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	88db      	ldrh	r3, [r3, #6]
 800475c:	085b      	lsrs	r3, r3, #1
 800475e:	b29b      	uxth	r3, r3
 8004760:	005b      	lsls	r3, r3, #1
 8004762:	b29a      	uxth	r2, r3
 8004764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004766:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	62bb      	str	r3, [r7, #40]	; 0x28
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004772:	b29b      	uxth	r3, r3
 8004774:	461a      	mov	r2, r3
 8004776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004778:	4413      	add	r3, r2
 800477a:	62bb      	str	r3, [r7, #40]	; 0x28
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	011a      	lsls	r2, r3, #4
 8004782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004784:	4413      	add	r3, r2
 8004786:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800478a:	627b      	str	r3, [r7, #36]	; 0x24
 800478c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478e:	881b      	ldrh	r3, [r3, #0]
 8004790:	b29b      	uxth	r3, r3
 8004792:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004796:	b29a      	uxth	r2, r3
 8004798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479a:	801a      	strh	r2, [r3, #0]
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	691b      	ldr	r3, [r3, #16]
 80047a0:	2b3e      	cmp	r3, #62	; 0x3e
 80047a2:	d91d      	bls.n	80047e0 <USB_ActivateEndpoint+0x2ac>
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	691b      	ldr	r3, [r3, #16]
 80047a8:	095b      	lsrs	r3, r3, #5
 80047aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	691b      	ldr	r3, [r3, #16]
 80047b0:	f003 031f 	and.w	r3, r3, #31
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d102      	bne.n	80047be <USB_ActivateEndpoint+0x28a>
 80047b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047ba:	3b01      	subs	r3, #1
 80047bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80047be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c0:	881b      	ldrh	r3, [r3, #0]
 80047c2:	b29a      	uxth	r2, r3
 80047c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	029b      	lsls	r3, r3, #10
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	4313      	orrs	r3, r2
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047d8:	b29a      	uxth	r2, r3
 80047da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047dc:	801a      	strh	r2, [r3, #0]
 80047de:	e026      	b.n	800482e <USB_ActivateEndpoint+0x2fa>
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	691b      	ldr	r3, [r3, #16]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d10a      	bne.n	80047fe <USB_ActivateEndpoint+0x2ca>
 80047e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ea:	881b      	ldrh	r3, [r3, #0]
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047f6:	b29a      	uxth	r2, r3
 80047f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fa:	801a      	strh	r2, [r3, #0]
 80047fc:	e017      	b.n	800482e <USB_ActivateEndpoint+0x2fa>
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	085b      	lsrs	r3, r3, #1
 8004804:	66bb      	str	r3, [r7, #104]	; 0x68
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	f003 0301 	and.w	r3, r3, #1
 800480e:	2b00      	cmp	r3, #0
 8004810:	d002      	beq.n	8004818 <USB_ActivateEndpoint+0x2e4>
 8004812:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004814:	3301      	adds	r3, #1
 8004816:	66bb      	str	r3, [r7, #104]	; 0x68
 8004818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481a:	881b      	ldrh	r3, [r3, #0]
 800481c:	b29a      	uxth	r2, r3
 800481e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004820:	b29b      	uxth	r3, r3
 8004822:	029b      	lsls	r3, r3, #10
 8004824:	b29b      	uxth	r3, r3
 8004826:	4313      	orrs	r3, r2
 8004828:	b29a      	uxth	r2, r3
 800482a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	4413      	add	r3, r2
 8004838:	881b      	ldrh	r3, [r3, #0]
 800483a:	847b      	strh	r3, [r7, #34]	; 0x22
 800483c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800483e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d01b      	beq.n	800487e <USB_ActivateEndpoint+0x34a>
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	4413      	add	r3, r2
 8004850:	881b      	ldrh	r3, [r3, #0]
 8004852:	b29b      	uxth	r3, r3
 8004854:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004858:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800485c:	843b      	strh	r3, [r7, #32]
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	441a      	add	r2, r3
 8004868:	8c3b      	ldrh	r3, [r7, #32]
 800486a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800486e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004872:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004876:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800487a:	b29b      	uxth	r3, r3
 800487c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d124      	bne.n	80048d0 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	4413      	add	r3, r2
 8004890:	881b      	ldrh	r3, [r3, #0]
 8004892:	b29b      	uxth	r3, r3
 8004894:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004898:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800489c:	83bb      	strh	r3, [r7, #28]
 800489e:	8bbb      	ldrh	r3, [r7, #28]
 80048a0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80048a4:	83bb      	strh	r3, [r7, #28]
 80048a6:	8bbb      	ldrh	r3, [r7, #28]
 80048a8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80048ac:	83bb      	strh	r3, [r7, #28]
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	441a      	add	r2, r3
 80048b8:	8bbb      	ldrh	r3, [r7, #28]
 80048ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	8013      	strh	r3, [r2, #0]
 80048ce:	e1ea      	b.n	8004ca6 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	4413      	add	r3, r2
 80048da:	881b      	ldrh	r3, [r3, #0]
 80048dc:	b29b      	uxth	r3, r3
 80048de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048e6:	83fb      	strh	r3, [r7, #30]
 80048e8:	8bfb      	ldrh	r3, [r7, #30]
 80048ea:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80048ee:	83fb      	strh	r3, [r7, #30]
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	441a      	add	r2, r3
 80048fa:	8bfb      	ldrh	r3, [r7, #30]
 80048fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004900:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004904:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800490c:	b29b      	uxth	r3, r3
 800490e:	8013      	strh	r3, [r2, #0]
 8004910:	e1c9      	b.n	8004ca6 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	78db      	ldrb	r3, [r3, #3]
 8004916:	2b02      	cmp	r3, #2
 8004918:	d11e      	bne.n	8004958 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	4413      	add	r3, r2
 8004924:	881b      	ldrh	r3, [r3, #0]
 8004926:	b29b      	uxth	r3, r3
 8004928:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800492c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004930:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	441a      	add	r2, r3
 800493e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004942:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004946:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800494a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800494e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004952:	b29b      	uxth	r3, r3
 8004954:	8013      	strh	r3, [r2, #0]
 8004956:	e01d      	b.n	8004994 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	4413      	add	r3, r2
 8004962:	881b      	ldrh	r3, [r3, #0]
 8004964:	b29b      	uxth	r3, r3
 8004966:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800496a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800496e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	441a      	add	r2, r3
 800497c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004980:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004984:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004988:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800498c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004990:	b29b      	uxth	r3, r3
 8004992:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800499e:	b29b      	uxth	r3, r3
 80049a0:	461a      	mov	r2, r3
 80049a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049a4:	4413      	add	r3, r2
 80049a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	011a      	lsls	r2, r3, #4
 80049ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049b0:	4413      	add	r3, r2
 80049b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049b6:	65bb      	str	r3, [r7, #88]	; 0x58
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	891b      	ldrh	r3, [r3, #8]
 80049bc:	085b      	lsrs	r3, r3, #1
 80049be:	b29b      	uxth	r3, r3
 80049c0:	005b      	lsls	r3, r3, #1
 80049c2:	b29a      	uxth	r2, r3
 80049c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049c6:	801a      	strh	r2, [r3, #0]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	657b      	str	r3, [r7, #84]	; 0x54
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	461a      	mov	r2, r3
 80049d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049d8:	4413      	add	r3, r2
 80049da:	657b      	str	r3, [r7, #84]	; 0x54
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	011a      	lsls	r2, r3, #4
 80049e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049e4:	4413      	add	r3, r2
 80049e6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80049ea:	653b      	str	r3, [r7, #80]	; 0x50
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	895b      	ldrh	r3, [r3, #10]
 80049f0:	085b      	lsrs	r3, r3, #1
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	005b      	lsls	r3, r3, #1
 80049f6:	b29a      	uxth	r2, r3
 80049f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049fa:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	785b      	ldrb	r3, [r3, #1]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	f040 8093 	bne.w	8004b2c <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	4413      	add	r3, r2
 8004a10:	881b      	ldrh	r3, [r3, #0]
 8004a12:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004a16:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004a1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d01b      	beq.n	8004a5a <USB_ActivateEndpoint+0x526>
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	4413      	add	r3, r2
 8004a2c:	881b      	ldrh	r3, [r3, #0]
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a38:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	441a      	add	r2, r3
 8004a44:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004a46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a4e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	4413      	add	r3, r2
 8004a64:	881b      	ldrh	r3, [r3, #0]
 8004a66:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004a68:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d01b      	beq.n	8004aaa <USB_ActivateEndpoint+0x576>
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	4413      	add	r3, r2
 8004a7c:	881b      	ldrh	r3, [r3, #0]
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a88:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	781b      	ldrb	r3, [r3, #0]
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	441a      	add	r2, r3
 8004a94:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004a96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004aa2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	4413      	add	r3, r2
 8004ab4:	881b      	ldrh	r3, [r3, #0]
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004abc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ac0:	873b      	strh	r3, [r7, #56]	; 0x38
 8004ac2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004ac4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004ac8:	873b      	strh	r3, [r7, #56]	; 0x38
 8004aca:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004acc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004ad0:	873b      	strh	r3, [r7, #56]	; 0x38
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	441a      	add	r2, r3
 8004adc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004ade:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ae2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ae6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004aea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	4413      	add	r3, r2
 8004afc:	881b      	ldrh	r3, [r3, #0]
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b08:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	441a      	add	r2, r3
 8004b14:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004b16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	8013      	strh	r3, [r2, #0]
 8004b2a:	e0bc      	b.n	8004ca6 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	4413      	add	r3, r2
 8004b36:	881b      	ldrh	r3, [r3, #0]
 8004b38:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004b3c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004b40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d01d      	beq.n	8004b84 <USB_ActivateEndpoint+0x650>
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	4413      	add	r3, r2
 8004b52:	881b      	ldrh	r3, [r3, #0]
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b5e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	441a      	add	r2, r3
 8004b6c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004b70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	781b      	ldrb	r3, [r3, #0]
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	4413      	add	r3, r2
 8004b8e:	881b      	ldrh	r3, [r3, #0]
 8004b90:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004b94:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d01d      	beq.n	8004bdc <USB_ActivateEndpoint+0x6a8>
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	4413      	add	r3, r2
 8004baa:	881b      	ldrh	r3, [r3, #0]
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bb6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	441a      	add	r2, r3
 8004bc4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004bc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bd4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	78db      	ldrb	r3, [r3, #3]
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d024      	beq.n	8004c2e <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	4413      	add	r3, r2
 8004bee:	881b      	ldrh	r3, [r3, #0]
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bf6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bfa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004bfe:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004c02:	f083 0320 	eor.w	r3, r3, #32
 8004c06:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	441a      	add	r2, r3
 8004c14:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004c18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	8013      	strh	r3, [r2, #0]
 8004c2c:	e01d      	b.n	8004c6a <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	4413      	add	r3, r2
 8004c38:	881b      	ldrh	r3, [r3, #0]
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c44:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	441a      	add	r2, r3
 8004c52:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004c56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	4413      	add	r3, r2
 8004c74:	881b      	ldrh	r3, [r3, #0]
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c80:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	441a      	add	r2, r3
 8004c8e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004c92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004ca6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3774      	adds	r7, #116	; 0x74
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bc80      	pop	{r7}
 8004cb2:	4770      	bx	lr

08004cb4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b08d      	sub	sp, #52	; 0x34
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	7b1b      	ldrb	r3, [r3, #12]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	f040 808e 	bne.w	8004de4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	785b      	ldrb	r3, [r3, #1]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d044      	beq.n	8004d5a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	4413      	add	r3, r2
 8004cda:	881b      	ldrh	r3, [r3, #0]
 8004cdc:	81bb      	strh	r3, [r7, #12]
 8004cde:	89bb      	ldrh	r3, [r7, #12]
 8004ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d01b      	beq.n	8004d20 <USB_DeactivateEndpoint+0x6c>
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	4413      	add	r3, r2
 8004cf2:	881b      	ldrh	r3, [r3, #0]
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cfe:	817b      	strh	r3, [r7, #10]
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	441a      	add	r2, r3
 8004d0a:	897b      	ldrh	r3, [r7, #10]
 8004d0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d18:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	4413      	add	r3, r2
 8004d2a:	881b      	ldrh	r3, [r3, #0]
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d36:	813b      	strh	r3, [r7, #8]
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	441a      	add	r2, r3
 8004d42:	893b      	ldrh	r3, [r7, #8]
 8004d44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	8013      	strh	r3, [r2, #0]
 8004d58:	e192      	b.n	8005080 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	4413      	add	r3, r2
 8004d64:	881b      	ldrh	r3, [r3, #0]
 8004d66:	827b      	strh	r3, [r7, #18]
 8004d68:	8a7b      	ldrh	r3, [r7, #18]
 8004d6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d01b      	beq.n	8004daa <USB_DeactivateEndpoint+0xf6>
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	4413      	add	r3, r2
 8004d7c:	881b      	ldrh	r3, [r3, #0]
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d88:	823b      	strh	r3, [r7, #16]
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	441a      	add	r2, r3
 8004d94:	8a3b      	ldrh	r3, [r7, #16]
 8004d96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d9e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004da2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	4413      	add	r3, r2
 8004db4:	881b      	ldrh	r3, [r3, #0]
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004dbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dc0:	81fb      	strh	r3, [r7, #14]
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	441a      	add	r2, r3
 8004dcc:	89fb      	ldrh	r3, [r7, #14]
 8004dce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	8013      	strh	r3, [r2, #0]
 8004de2:	e14d      	b.n	8005080 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	785b      	ldrb	r3, [r3, #1]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	f040 80a5 	bne.w	8004f38 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	4413      	add	r3, r2
 8004df8:	881b      	ldrh	r3, [r3, #0]
 8004dfa:	843b      	strh	r3, [r7, #32]
 8004dfc:	8c3b      	ldrh	r3, [r7, #32]
 8004dfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d01b      	beq.n	8004e3e <USB_DeactivateEndpoint+0x18a>
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	4413      	add	r3, r2
 8004e10:	881b      	ldrh	r3, [r3, #0]
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e1c:	83fb      	strh	r3, [r7, #30]
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	441a      	add	r2, r3
 8004e28:	8bfb      	ldrh	r3, [r7, #30]
 8004e2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e32:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	4413      	add	r3, r2
 8004e48:	881b      	ldrh	r3, [r3, #0]
 8004e4a:	83bb      	strh	r3, [r7, #28]
 8004e4c:	8bbb      	ldrh	r3, [r7, #28]
 8004e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d01b      	beq.n	8004e8e <USB_DeactivateEndpoint+0x1da>
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	4413      	add	r3, r2
 8004e60:	881b      	ldrh	r3, [r3, #0]
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e6c:	837b      	strh	r3, [r7, #26]
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	441a      	add	r2, r3
 8004e78:	8b7b      	ldrh	r3, [r7, #26]
 8004e7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e86:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	4413      	add	r3, r2
 8004e98:	881b      	ldrh	r3, [r3, #0]
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ea0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ea4:	833b      	strh	r3, [r7, #24]
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	441a      	add	r2, r3
 8004eb0:	8b3b      	ldrh	r3, [r7, #24]
 8004eb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004eb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004eba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ebe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	4413      	add	r3, r2
 8004ed0:	881b      	ldrh	r3, [r3, #0]
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ed8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004edc:	82fb      	strh	r3, [r7, #22]
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	441a      	add	r2, r3
 8004ee8:	8afb      	ldrh	r3, [r7, #22]
 8004eea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004eee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ef2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ef6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	781b      	ldrb	r3, [r3, #0]
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	4413      	add	r3, r2
 8004f08:	881b      	ldrh	r3, [r3, #0]
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f14:	82bb      	strh	r3, [r7, #20]
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	441a      	add	r2, r3
 8004f20:	8abb      	ldrh	r3, [r7, #20]
 8004f22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	8013      	strh	r3, [r2, #0]
 8004f36:	e0a3      	b.n	8005080 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	4413      	add	r3, r2
 8004f42:	881b      	ldrh	r3, [r3, #0]
 8004f44:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004f46:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004f48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d01b      	beq.n	8004f88 <USB_DeactivateEndpoint+0x2d4>
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	009b      	lsls	r3, r3, #2
 8004f58:	4413      	add	r3, r2
 8004f5a:	881b      	ldrh	r3, [r3, #0]
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f66:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	441a      	add	r2, r3
 8004f72:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004f74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	781b      	ldrb	r3, [r3, #0]
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	4413      	add	r3, r2
 8004f92:	881b      	ldrh	r3, [r3, #0]
 8004f94:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004f96:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d01b      	beq.n	8004fd8 <USB_DeactivateEndpoint+0x324>
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	781b      	ldrb	r3, [r3, #0]
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	4413      	add	r3, r2
 8004faa:	881b      	ldrh	r3, [r3, #0]
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fb6:	853b      	strh	r3, [r7, #40]	; 0x28
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	441a      	add	r2, r3
 8004fc2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004fc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fd0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	4413      	add	r3, r2
 8004fe2:	881b      	ldrh	r3, [r3, #0]
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fee:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	441a      	add	r2, r3
 8004ffa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004ffc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005000:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005004:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005008:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800500c:	b29b      	uxth	r3, r3
 800500e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	4413      	add	r3, r2
 800501a:	881b      	ldrh	r3, [r3, #0]
 800501c:	b29b      	uxth	r3, r3
 800501e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005022:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005026:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	441a      	add	r2, r3
 8005032:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005034:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005038:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800503c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005044:	b29b      	uxth	r3, r3
 8005046:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	4413      	add	r3, r2
 8005052:	881b      	ldrh	r3, [r3, #0]
 8005054:	b29b      	uxth	r3, r3
 8005056:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800505a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800505e:	847b      	strh	r3, [r7, #34]	; 0x22
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	441a      	add	r2, r3
 800506a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800506c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005070:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005074:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800507c:	b29b      	uxth	r3, r3
 800507e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005080:	2300      	movs	r3, #0
}
 8005082:	4618      	mov	r0, r3
 8005084:	3734      	adds	r7, #52	; 0x34
 8005086:	46bd      	mov	sp, r7
 8005088:	bc80      	pop	{r7}
 800508a:	4770      	bx	lr

0800508c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b0c2      	sub	sp, #264	; 0x108
 8005090:	af00      	add	r7, sp, #0
 8005092:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005096:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800509a:	6018      	str	r0, [r3, #0]
 800509c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050a4:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80050a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	785b      	ldrb	r3, [r3, #1]
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	f040 86b7 	bne.w	8005e26 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80050b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	699a      	ldr	r2, [r3, #24]
 80050c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	691b      	ldr	r3, [r3, #16]
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d908      	bls.n	80050e6 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80050d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	691b      	ldr	r3, [r3, #16]
 80050e0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80050e4:	e007      	b.n	80050f6 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80050e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	699b      	ldr	r3, [r3, #24]
 80050f2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80050f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	7b1b      	ldrb	r3, [r3, #12]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d13a      	bne.n	800517c <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005106:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800510a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	6959      	ldr	r1, [r3, #20]
 8005112:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005116:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	88da      	ldrh	r2, [r3, #6]
 800511e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005122:	b29b      	uxth	r3, r3
 8005124:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005128:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800512c:	6800      	ldr	r0, [r0, #0]
 800512e:	f001 fc9c 	bl	8006a6a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005132:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005136:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	613b      	str	r3, [r7, #16]
 800513e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005142:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800514c:	b29b      	uxth	r3, r3
 800514e:	461a      	mov	r2, r3
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	4413      	add	r3, r2
 8005154:	613b      	str	r3, [r7, #16]
 8005156:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800515a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	011a      	lsls	r2, r3, #4
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	4413      	add	r3, r2
 8005168:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800516c:	60fb      	str	r3, [r7, #12]
 800516e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005172:	b29a      	uxth	r2, r3
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	801a      	strh	r2, [r3, #0]
 8005178:	f000 be1f 	b.w	8005dba <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800517c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005180:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	78db      	ldrb	r3, [r3, #3]
 8005188:	2b02      	cmp	r3, #2
 800518a:	f040 8462 	bne.w	8005a52 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800518e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005192:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	6a1a      	ldr	r2, [r3, #32]
 800519a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800519e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	691b      	ldr	r3, [r3, #16]
 80051a6:	429a      	cmp	r2, r3
 80051a8:	f240 83df 	bls.w	800596a <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80051ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	781b      	ldrb	r3, [r3, #0]
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	4413      	add	r3, r2
 80051c6:	881b      	ldrh	r3, [r3, #0]
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051d2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80051d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	441a      	add	r2, r3
 80051f0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80051f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051fc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005200:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005204:	b29b      	uxth	r3, r3
 8005206:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005208:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800520c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	6a1a      	ldr	r2, [r3, #32]
 8005214:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005218:	1ad2      	subs	r2, r2, r3
 800521a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800521e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005226:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800522a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005234:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	4413      	add	r3, r2
 8005240:	881b      	ldrh	r3, [r3, #0]
 8005242:	b29b      	uxth	r3, r3
 8005244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005248:	2b00      	cmp	r3, #0
 800524a:	f000 81c7 	beq.w	80055dc <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800524e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005252:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	633b      	str	r3, [r7, #48]	; 0x30
 800525a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800525e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	785b      	ldrb	r3, [r3, #1]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d177      	bne.n	800535a <USB_EPStartXfer+0x2ce>
 800526a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800526e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	62bb      	str	r3, [r7, #40]	; 0x28
 8005276:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800527a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005284:	b29b      	uxth	r3, r3
 8005286:	461a      	mov	r2, r3
 8005288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800528a:	4413      	add	r3, r2
 800528c:	62bb      	str	r3, [r7, #40]	; 0x28
 800528e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005292:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	011a      	lsls	r2, r3, #4
 800529c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800529e:	4413      	add	r3, r2
 80052a0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80052a4:	627b      	str	r3, [r7, #36]	; 0x24
 80052a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a8:	881b      	ldrh	r3, [r3, #0]
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052b0:	b29a      	uxth	r2, r3
 80052b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b4:	801a      	strh	r2, [r3, #0]
 80052b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052ba:	2b3e      	cmp	r3, #62	; 0x3e
 80052bc:	d921      	bls.n	8005302 <USB_EPStartXfer+0x276>
 80052be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052c2:	095b      	lsrs	r3, r3, #5
 80052c4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80052c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052cc:	f003 031f 	and.w	r3, r3, #31
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d104      	bne.n	80052de <USB_EPStartXfer+0x252>
 80052d4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80052d8:	3b01      	subs	r3, #1
 80052da:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80052de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e0:	881b      	ldrh	r3, [r3, #0]
 80052e2:	b29a      	uxth	r2, r3
 80052e4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	029b      	lsls	r3, r3, #10
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	4313      	orrs	r3, r2
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052fa:	b29a      	uxth	r2, r3
 80052fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fe:	801a      	strh	r2, [r3, #0]
 8005300:	e050      	b.n	80053a4 <USB_EPStartXfer+0x318>
 8005302:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005306:	2b00      	cmp	r3, #0
 8005308:	d10a      	bne.n	8005320 <USB_EPStartXfer+0x294>
 800530a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530c:	881b      	ldrh	r3, [r3, #0]
 800530e:	b29b      	uxth	r3, r3
 8005310:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005314:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005318:	b29a      	uxth	r2, r3
 800531a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531c:	801a      	strh	r2, [r3, #0]
 800531e:	e041      	b.n	80053a4 <USB_EPStartXfer+0x318>
 8005320:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005324:	085b      	lsrs	r3, r3, #1
 8005326:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800532a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800532e:	f003 0301 	and.w	r3, r3, #1
 8005332:	2b00      	cmp	r3, #0
 8005334:	d004      	beq.n	8005340 <USB_EPStartXfer+0x2b4>
 8005336:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800533a:	3301      	adds	r3, #1
 800533c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005342:	881b      	ldrh	r3, [r3, #0]
 8005344:	b29a      	uxth	r2, r3
 8005346:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800534a:	b29b      	uxth	r3, r3
 800534c:	029b      	lsls	r3, r3, #10
 800534e:	b29b      	uxth	r3, r3
 8005350:	4313      	orrs	r3, r2
 8005352:	b29a      	uxth	r2, r3
 8005354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005356:	801a      	strh	r2, [r3, #0]
 8005358:	e024      	b.n	80053a4 <USB_EPStartXfer+0x318>
 800535a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800535e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	785b      	ldrb	r3, [r3, #1]
 8005366:	2b01      	cmp	r3, #1
 8005368:	d11c      	bne.n	80053a4 <USB_EPStartXfer+0x318>
 800536a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800536e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005378:	b29b      	uxth	r3, r3
 800537a:	461a      	mov	r2, r3
 800537c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800537e:	4413      	add	r3, r2
 8005380:	633b      	str	r3, [r7, #48]	; 0x30
 8005382:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005386:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	781b      	ldrb	r3, [r3, #0]
 800538e:	011a      	lsls	r2, r3, #4
 8005390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005392:	4413      	add	r3, r2
 8005394:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005398:	62fb      	str	r3, [r7, #44]	; 0x2c
 800539a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800539e:	b29a      	uxth	r2, r3
 80053a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053a2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80053a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	895b      	ldrh	r3, [r3, #10]
 80053b0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80053b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	6959      	ldr	r1, [r3, #20]
 80053c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80053ca:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80053ce:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80053d2:	6800      	ldr	r0, [r0, #0]
 80053d4:	f001 fb49 	bl	8006a6a <USB_WritePMA>
            ep->xfer_buff += len;
 80053d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	695a      	ldr	r2, [r3, #20]
 80053e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053e8:	441a      	add	r2, r3
 80053ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80053f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	6a1a      	ldr	r2, [r3, #32]
 8005402:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005406:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	429a      	cmp	r2, r3
 8005410:	d90f      	bls.n	8005432 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005412:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005416:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	6a1a      	ldr	r2, [r3, #32]
 800541e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005422:	1ad2      	subs	r2, r2, r3
 8005424:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005428:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	621a      	str	r2, [r3, #32]
 8005430:	e00e      	b.n	8005450 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005432:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005436:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	6a1b      	ldr	r3, [r3, #32]
 800543e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005442:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005446:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	2200      	movs	r2, #0
 800544e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005450:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005454:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	785b      	ldrb	r3, [r3, #1]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d177      	bne.n	8005550 <USB_EPStartXfer+0x4c4>
 8005460:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005464:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	61bb      	str	r3, [r7, #24]
 800546c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005470:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800547a:	b29b      	uxth	r3, r3
 800547c:	461a      	mov	r2, r3
 800547e:	69bb      	ldr	r3, [r7, #24]
 8005480:	4413      	add	r3, r2
 8005482:	61bb      	str	r3, [r7, #24]
 8005484:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005488:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	011a      	lsls	r2, r3, #4
 8005492:	69bb      	ldr	r3, [r7, #24]
 8005494:	4413      	add	r3, r2
 8005496:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800549a:	617b      	str	r3, [r7, #20]
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	881b      	ldrh	r3, [r3, #0]
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054a6:	b29a      	uxth	r2, r3
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	801a      	strh	r2, [r3, #0]
 80054ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054b0:	2b3e      	cmp	r3, #62	; 0x3e
 80054b2:	d921      	bls.n	80054f8 <USB_EPStartXfer+0x46c>
 80054b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054b8:	095b      	lsrs	r3, r3, #5
 80054ba:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80054be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054c2:	f003 031f 	and.w	r3, r3, #31
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d104      	bne.n	80054d4 <USB_EPStartXfer+0x448>
 80054ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054ce:	3b01      	subs	r3, #1
 80054d0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	881b      	ldrh	r3, [r3, #0]
 80054d8:	b29a      	uxth	r2, r3
 80054da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054de:	b29b      	uxth	r3, r3
 80054e0:	029b      	lsls	r3, r3, #10
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	4313      	orrs	r3, r2
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054f0:	b29a      	uxth	r2, r3
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	801a      	strh	r2, [r3, #0]
 80054f6:	e056      	b.n	80055a6 <USB_EPStartXfer+0x51a>
 80054f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d10a      	bne.n	8005516 <USB_EPStartXfer+0x48a>
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	881b      	ldrh	r3, [r3, #0]
 8005504:	b29b      	uxth	r3, r3
 8005506:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800550a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800550e:	b29a      	uxth	r2, r3
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	801a      	strh	r2, [r3, #0]
 8005514:	e047      	b.n	80055a6 <USB_EPStartXfer+0x51a>
 8005516:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800551a:	085b      	lsrs	r3, r3, #1
 800551c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005520:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005524:	f003 0301 	and.w	r3, r3, #1
 8005528:	2b00      	cmp	r3, #0
 800552a:	d004      	beq.n	8005536 <USB_EPStartXfer+0x4aa>
 800552c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005530:	3301      	adds	r3, #1
 8005532:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	881b      	ldrh	r3, [r3, #0]
 800553a:	b29a      	uxth	r2, r3
 800553c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005540:	b29b      	uxth	r3, r3
 8005542:	029b      	lsls	r3, r3, #10
 8005544:	b29b      	uxth	r3, r3
 8005546:	4313      	orrs	r3, r2
 8005548:	b29a      	uxth	r2, r3
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	801a      	strh	r2, [r3, #0]
 800554e:	e02a      	b.n	80055a6 <USB_EPStartXfer+0x51a>
 8005550:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005554:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	785b      	ldrb	r3, [r3, #1]
 800555c:	2b01      	cmp	r3, #1
 800555e:	d122      	bne.n	80055a6 <USB_EPStartXfer+0x51a>
 8005560:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005564:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	623b      	str	r3, [r7, #32]
 800556c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005570:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800557a:	b29b      	uxth	r3, r3
 800557c:	461a      	mov	r2, r3
 800557e:	6a3b      	ldr	r3, [r7, #32]
 8005580:	4413      	add	r3, r2
 8005582:	623b      	str	r3, [r7, #32]
 8005584:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005588:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	011a      	lsls	r2, r3, #4
 8005592:	6a3b      	ldr	r3, [r7, #32]
 8005594:	4413      	add	r3, r2
 8005596:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800559a:	61fb      	str	r3, [r7, #28]
 800559c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055a0:	b29a      	uxth	r2, r3
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80055a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	891b      	ldrh	r3, [r3, #8]
 80055b2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80055b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	6959      	ldr	r1, [r3, #20]
 80055c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80055cc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80055d0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80055d4:	6800      	ldr	r0, [r0, #0]
 80055d6:	f001 fa48 	bl	8006a6a <USB_WritePMA>
 80055da:	e3ee      	b.n	8005dba <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80055dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	785b      	ldrb	r3, [r3, #1]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d177      	bne.n	80056dc <USB_EPStartXfer+0x650>
 80055ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80055f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005606:	b29b      	uxth	r3, r3
 8005608:	461a      	mov	r2, r3
 800560a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800560c:	4413      	add	r3, r2
 800560e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005610:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005614:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	011a      	lsls	r2, r3, #4
 800561e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005620:	4413      	add	r3, r2
 8005622:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005626:	647b      	str	r3, [r7, #68]	; 0x44
 8005628:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800562a:	881b      	ldrh	r3, [r3, #0]
 800562c:	b29b      	uxth	r3, r3
 800562e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005632:	b29a      	uxth	r2, r3
 8005634:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005636:	801a      	strh	r2, [r3, #0]
 8005638:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800563c:	2b3e      	cmp	r3, #62	; 0x3e
 800563e:	d921      	bls.n	8005684 <USB_EPStartXfer+0x5f8>
 8005640:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005644:	095b      	lsrs	r3, r3, #5
 8005646:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800564a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800564e:	f003 031f 	and.w	r3, r3, #31
 8005652:	2b00      	cmp	r3, #0
 8005654:	d104      	bne.n	8005660 <USB_EPStartXfer+0x5d4>
 8005656:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800565a:	3b01      	subs	r3, #1
 800565c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005660:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005662:	881b      	ldrh	r3, [r3, #0]
 8005664:	b29a      	uxth	r2, r3
 8005666:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800566a:	b29b      	uxth	r3, r3
 800566c:	029b      	lsls	r3, r3, #10
 800566e:	b29b      	uxth	r3, r3
 8005670:	4313      	orrs	r3, r2
 8005672:	b29b      	uxth	r3, r3
 8005674:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005678:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800567c:	b29a      	uxth	r2, r3
 800567e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005680:	801a      	strh	r2, [r3, #0]
 8005682:	e056      	b.n	8005732 <USB_EPStartXfer+0x6a6>
 8005684:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005688:	2b00      	cmp	r3, #0
 800568a:	d10a      	bne.n	80056a2 <USB_EPStartXfer+0x616>
 800568c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800568e:	881b      	ldrh	r3, [r3, #0]
 8005690:	b29b      	uxth	r3, r3
 8005692:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005696:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800569a:	b29a      	uxth	r2, r3
 800569c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800569e:	801a      	strh	r2, [r3, #0]
 80056a0:	e047      	b.n	8005732 <USB_EPStartXfer+0x6a6>
 80056a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056a6:	085b      	lsrs	r3, r3, #1
 80056a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80056ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056b0:	f003 0301 	and.w	r3, r3, #1
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d004      	beq.n	80056c2 <USB_EPStartXfer+0x636>
 80056b8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80056bc:	3301      	adds	r3, #1
 80056be:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80056c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056c4:	881b      	ldrh	r3, [r3, #0]
 80056c6:	b29a      	uxth	r2, r3
 80056c8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	029b      	lsls	r3, r3, #10
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	4313      	orrs	r3, r2
 80056d4:	b29a      	uxth	r2, r3
 80056d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056d8:	801a      	strh	r2, [r3, #0]
 80056da:	e02a      	b.n	8005732 <USB_EPStartXfer+0x6a6>
 80056dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	785b      	ldrb	r3, [r3, #1]
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d122      	bne.n	8005732 <USB_EPStartXfer+0x6a6>
 80056ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	653b      	str	r3, [r7, #80]	; 0x50
 80056f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005706:	b29b      	uxth	r3, r3
 8005708:	461a      	mov	r2, r3
 800570a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800570c:	4413      	add	r3, r2
 800570e:	653b      	str	r3, [r7, #80]	; 0x50
 8005710:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005714:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	011a      	lsls	r2, r3, #4
 800571e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005720:	4413      	add	r3, r2
 8005722:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005726:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005728:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800572c:	b29a      	uxth	r2, r3
 800572e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005730:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005732:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005736:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	891b      	ldrh	r3, [r3, #8]
 800573e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005742:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005746:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	6959      	ldr	r1, [r3, #20]
 800574e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005752:	b29b      	uxth	r3, r3
 8005754:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005758:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800575c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005760:	6800      	ldr	r0, [r0, #0]
 8005762:	f001 f982 	bl	8006a6a <USB_WritePMA>
            ep->xfer_buff += len;
 8005766:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800576a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	695a      	ldr	r2, [r3, #20]
 8005772:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005776:	441a      	add	r2, r3
 8005778:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800577c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005784:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005788:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	6a1a      	ldr	r2, [r3, #32]
 8005790:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005794:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	691b      	ldr	r3, [r3, #16]
 800579c:	429a      	cmp	r2, r3
 800579e:	d90f      	bls.n	80057c0 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80057a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	6a1a      	ldr	r2, [r3, #32]
 80057ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057b0:	1ad2      	subs	r2, r2, r3
 80057b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	621a      	str	r2, [r3, #32]
 80057be:	e00e      	b.n	80057de <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80057c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	6a1b      	ldr	r3, [r3, #32]
 80057cc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80057d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	2200      	movs	r2, #0
 80057dc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80057de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	643b      	str	r3, [r7, #64]	; 0x40
 80057ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	785b      	ldrb	r3, [r3, #1]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d177      	bne.n	80058ea <USB_EPStartXfer+0x85e>
 80057fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	63bb      	str	r3, [r7, #56]	; 0x38
 8005806:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800580a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005814:	b29b      	uxth	r3, r3
 8005816:	461a      	mov	r2, r3
 8005818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800581a:	4413      	add	r3, r2
 800581c:	63bb      	str	r3, [r7, #56]	; 0x38
 800581e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005822:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	011a      	lsls	r2, r3, #4
 800582c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800582e:	4413      	add	r3, r2
 8005830:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005834:	637b      	str	r3, [r7, #52]	; 0x34
 8005836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005838:	881b      	ldrh	r3, [r3, #0]
 800583a:	b29b      	uxth	r3, r3
 800583c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005840:	b29a      	uxth	r2, r3
 8005842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005844:	801a      	strh	r2, [r3, #0]
 8005846:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800584a:	2b3e      	cmp	r3, #62	; 0x3e
 800584c:	d921      	bls.n	8005892 <USB_EPStartXfer+0x806>
 800584e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005852:	095b      	lsrs	r3, r3, #5
 8005854:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005858:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800585c:	f003 031f 	and.w	r3, r3, #31
 8005860:	2b00      	cmp	r3, #0
 8005862:	d104      	bne.n	800586e <USB_EPStartXfer+0x7e2>
 8005864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005868:	3b01      	subs	r3, #1
 800586a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800586e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005870:	881b      	ldrh	r3, [r3, #0]
 8005872:	b29a      	uxth	r2, r3
 8005874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005878:	b29b      	uxth	r3, r3
 800587a:	029b      	lsls	r3, r3, #10
 800587c:	b29b      	uxth	r3, r3
 800587e:	4313      	orrs	r3, r2
 8005880:	b29b      	uxth	r3, r3
 8005882:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005886:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800588a:	b29a      	uxth	r2, r3
 800588c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800588e:	801a      	strh	r2, [r3, #0]
 8005890:	e050      	b.n	8005934 <USB_EPStartXfer+0x8a8>
 8005892:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005896:	2b00      	cmp	r3, #0
 8005898:	d10a      	bne.n	80058b0 <USB_EPStartXfer+0x824>
 800589a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800589c:	881b      	ldrh	r3, [r3, #0]
 800589e:	b29b      	uxth	r3, r3
 80058a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058a8:	b29a      	uxth	r2, r3
 80058aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ac:	801a      	strh	r2, [r3, #0]
 80058ae:	e041      	b.n	8005934 <USB_EPStartXfer+0x8a8>
 80058b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058b4:	085b      	lsrs	r3, r3, #1
 80058b6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80058ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058be:	f003 0301 	and.w	r3, r3, #1
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d004      	beq.n	80058d0 <USB_EPStartXfer+0x844>
 80058c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058ca:	3301      	adds	r3, #1
 80058cc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80058d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058d2:	881b      	ldrh	r3, [r3, #0]
 80058d4:	b29a      	uxth	r2, r3
 80058d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058da:	b29b      	uxth	r3, r3
 80058dc:	029b      	lsls	r3, r3, #10
 80058de:	b29b      	uxth	r3, r3
 80058e0:	4313      	orrs	r3, r2
 80058e2:	b29a      	uxth	r2, r3
 80058e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058e6:	801a      	strh	r2, [r3, #0]
 80058e8:	e024      	b.n	8005934 <USB_EPStartXfer+0x8a8>
 80058ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	785b      	ldrb	r3, [r3, #1]
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d11c      	bne.n	8005934 <USB_EPStartXfer+0x8a8>
 80058fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005908:	b29b      	uxth	r3, r3
 800590a:	461a      	mov	r2, r3
 800590c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800590e:	4413      	add	r3, r2
 8005910:	643b      	str	r3, [r7, #64]	; 0x40
 8005912:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005916:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	011a      	lsls	r2, r3, #4
 8005920:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005922:	4413      	add	r3, r2
 8005924:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005928:	63fb      	str	r3, [r7, #60]	; 0x3c
 800592a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800592e:	b29a      	uxth	r2, r3
 8005930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005932:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005934:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005938:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	895b      	ldrh	r3, [r3, #10]
 8005940:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005944:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005948:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	6959      	ldr	r1, [r3, #20]
 8005950:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005954:	b29b      	uxth	r3, r3
 8005956:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800595a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800595e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005962:	6800      	ldr	r0, [r0, #0]
 8005964:	f001 f881 	bl	8006a6a <USB_WritePMA>
 8005968:	e227      	b.n	8005dba <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800596a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800596e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	6a1b      	ldr	r3, [r3, #32]
 8005976:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800597a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800597e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005988:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	4413      	add	r3, r2
 8005994:	881b      	ldrh	r3, [r3, #0]
 8005996:	b29b      	uxth	r3, r3
 8005998:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800599c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059a0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80059a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	441a      	add	r2, r3
 80059be:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80059c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80059d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	461a      	mov	r2, r3
 80059f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059f6:	4413      	add	r3, r2
 80059f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	011a      	lsls	r2, r3, #4
 8005a08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a0a:	4413      	add	r3, r2
 8005a0c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a10:	65bb      	str	r3, [r7, #88]	; 0x58
 8005a12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a16:	b29a      	uxth	r2, r3
 8005a18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a1a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005a1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	891b      	ldrh	r3, [r3, #8]
 8005a28:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	6959      	ldr	r1, [r3, #20]
 8005a38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005a42:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005a46:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005a4a:	6800      	ldr	r0, [r0, #0]
 8005a4c:	f001 f80d 	bl	8006a6a <USB_WritePMA>
 8005a50:	e1b3      	b.n	8005dba <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005a52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	6a1a      	ldr	r2, [r3, #32]
 8005a5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a62:	1ad2      	subs	r2, r2, r3
 8005a64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005a70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a74:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	009b      	lsls	r3, r3, #2
 8005a88:	4413      	add	r3, r2
 8005a8a:	881b      	ldrh	r3, [r3, #0]
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	f000 80c6 	beq.w	8005c24 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005a98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	673b      	str	r3, [r7, #112]	; 0x70
 8005aa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005aa8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	785b      	ldrb	r3, [r3, #1]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d177      	bne.n	8005ba4 <USB_EPStartXfer+0xb18>
 8005ab4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ab8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ac0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ac4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ad4:	4413      	add	r3, r2
 8005ad6:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ad8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005adc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	011a      	lsls	r2, r3, #4
 8005ae6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ae8:	4413      	add	r3, r2
 8005aea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005aee:	667b      	str	r3, [r7, #100]	; 0x64
 8005af0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005af2:	881b      	ldrh	r3, [r3, #0]
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005afa:	b29a      	uxth	r2, r3
 8005afc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005afe:	801a      	strh	r2, [r3, #0]
 8005b00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b04:	2b3e      	cmp	r3, #62	; 0x3e
 8005b06:	d921      	bls.n	8005b4c <USB_EPStartXfer+0xac0>
 8005b08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b0c:	095b      	lsrs	r3, r3, #5
 8005b0e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005b12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b16:	f003 031f 	and.w	r3, r3, #31
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d104      	bne.n	8005b28 <USB_EPStartXfer+0xa9c>
 8005b1e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005b22:	3b01      	subs	r3, #1
 8005b24:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005b28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b2a:	881b      	ldrh	r3, [r3, #0]
 8005b2c:	b29a      	uxth	r2, r3
 8005b2e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	029b      	lsls	r3, r3, #10
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b44:	b29a      	uxth	r2, r3
 8005b46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b48:	801a      	strh	r2, [r3, #0]
 8005b4a:	e050      	b.n	8005bee <USB_EPStartXfer+0xb62>
 8005b4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d10a      	bne.n	8005b6a <USB_EPStartXfer+0xade>
 8005b54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b56:	881b      	ldrh	r3, [r3, #0]
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b62:	b29a      	uxth	r2, r3
 8005b64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b66:	801a      	strh	r2, [r3, #0]
 8005b68:	e041      	b.n	8005bee <USB_EPStartXfer+0xb62>
 8005b6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b6e:	085b      	lsrs	r3, r3, #1
 8005b70:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005b74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b78:	f003 0301 	and.w	r3, r3, #1
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d004      	beq.n	8005b8a <USB_EPStartXfer+0xafe>
 8005b80:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005b84:	3301      	adds	r3, #1
 8005b86:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005b8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b8c:	881b      	ldrh	r3, [r3, #0]
 8005b8e:	b29a      	uxth	r2, r3
 8005b90:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	029b      	lsls	r3, r3, #10
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	b29a      	uxth	r2, r3
 8005b9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ba0:	801a      	strh	r2, [r3, #0]
 8005ba2:	e024      	b.n	8005bee <USB_EPStartXfer+0xb62>
 8005ba4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ba8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	785b      	ldrb	r3, [r3, #1]
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d11c      	bne.n	8005bee <USB_EPStartXfer+0xb62>
 8005bb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bb8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005bc8:	4413      	add	r3, r2
 8005bca:	673b      	str	r3, [r7, #112]	; 0x70
 8005bcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	011a      	lsls	r2, r3, #4
 8005bda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005bdc:	4413      	add	r3, r2
 8005bde:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005be2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005be4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005be8:	b29a      	uxth	r2, r3
 8005bea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bec:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005bee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bf2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	895b      	ldrh	r3, [r3, #10]
 8005bfa:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005bfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	6959      	ldr	r1, [r3, #20]
 8005c0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005c14:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005c18:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005c1c:	6800      	ldr	r0, [r0, #0]
 8005c1e:	f000 ff24 	bl	8006a6a <USB_WritePMA>
 8005c22:	e0ca      	b.n	8005dba <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005c24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	785b      	ldrb	r3, [r3, #1]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d177      	bne.n	8005d24 <USB_EPStartXfer+0xc98>
 8005c34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005c40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	461a      	mov	r2, r3
 8005c52:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005c54:	4413      	add	r3, r2
 8005c56:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005c58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	011a      	lsls	r2, r3, #4
 8005c66:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005c68:	4413      	add	r3, r2
 8005c6a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c6e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005c70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c72:	881b      	ldrh	r3, [r3, #0]
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c7a:	b29a      	uxth	r2, r3
 8005c7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c7e:	801a      	strh	r2, [r3, #0]
 8005c80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c84:	2b3e      	cmp	r3, #62	; 0x3e
 8005c86:	d921      	bls.n	8005ccc <USB_EPStartXfer+0xc40>
 8005c88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c8c:	095b      	lsrs	r3, r3, #5
 8005c8e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005c92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c96:	f003 031f 	and.w	r3, r3, #31
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d104      	bne.n	8005ca8 <USB_EPStartXfer+0xc1c>
 8005c9e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005ca2:	3b01      	subs	r3, #1
 8005ca4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005ca8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005caa:	881b      	ldrh	r3, [r3, #0]
 8005cac:	b29a      	uxth	r2, r3
 8005cae:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	029b      	lsls	r3, r3, #10
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cc4:	b29a      	uxth	r2, r3
 8005cc6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cc8:	801a      	strh	r2, [r3, #0]
 8005cca:	e05c      	b.n	8005d86 <USB_EPStartXfer+0xcfa>
 8005ccc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d10a      	bne.n	8005cea <USB_EPStartXfer+0xc5e>
 8005cd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cd6:	881b      	ldrh	r3, [r3, #0]
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ce2:	b29a      	uxth	r2, r3
 8005ce4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ce6:	801a      	strh	r2, [r3, #0]
 8005ce8:	e04d      	b.n	8005d86 <USB_EPStartXfer+0xcfa>
 8005cea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cee:	085b      	lsrs	r3, r3, #1
 8005cf0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005cf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cf8:	f003 0301 	and.w	r3, r3, #1
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d004      	beq.n	8005d0a <USB_EPStartXfer+0xc7e>
 8005d00:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005d04:	3301      	adds	r3, #1
 8005d06:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005d0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d0c:	881b      	ldrh	r3, [r3, #0]
 8005d0e:	b29a      	uxth	r2, r3
 8005d10:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	029b      	lsls	r3, r3, #10
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	b29a      	uxth	r2, r3
 8005d1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d20:	801a      	strh	r2, [r3, #0]
 8005d22:	e030      	b.n	8005d86 <USB_EPStartXfer+0xcfa>
 8005d24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	785b      	ldrb	r3, [r3, #1]
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d128      	bne.n	8005d86 <USB_EPStartXfer+0xcfa>
 8005d34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005d42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	461a      	mov	r2, r3
 8005d54:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d58:	4413      	add	r3, r2
 8005d5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005d5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	781b      	ldrb	r3, [r3, #0]
 8005d6a:	011a      	lsls	r2, r3, #4
 8005d6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d70:	4413      	add	r3, r2
 8005d72:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d76:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005d7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d7e:	b29a      	uxth	r2, r3
 8005d80:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005d84:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005d86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	891b      	ldrh	r3, [r3, #8]
 8005d92:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	6959      	ldr	r1, [r3, #20]
 8005da2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005dac:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005db0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005db4:	6800      	ldr	r0, [r0, #0]
 8005db6:	f000 fe58 	bl	8006a6a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005dba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dbe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005dc2:	681a      	ldr	r2, [r3, #0]
 8005dc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	009b      	lsls	r3, r3, #2
 8005dd2:	4413      	add	r3, r2
 8005dd4:	881b      	ldrh	r3, [r3, #0]
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ddc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005de0:	817b      	strh	r3, [r7, #10]
 8005de2:	897b      	ldrh	r3, [r7, #10]
 8005de4:	f083 0310 	eor.w	r3, r3, #16
 8005de8:	817b      	strh	r3, [r7, #10]
 8005dea:	897b      	ldrh	r3, [r7, #10]
 8005dec:	f083 0320 	eor.w	r3, r3, #32
 8005df0:	817b      	strh	r3, [r7, #10]
 8005df2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005df6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	441a      	add	r2, r3
 8005e0c:	897b      	ldrh	r3, [r7, #10]
 8005e0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	8013      	strh	r3, [r2, #0]
 8005e22:	f000 bcde 	b.w	80067e2 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005e26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	7b1b      	ldrb	r3, [r3, #12]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	f040 80bb 	bne.w	8005fae <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005e38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	699a      	ldr	r2, [r3, #24]
 8005e44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	691b      	ldr	r3, [r3, #16]
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d917      	bls.n	8005e84 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005e54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	691b      	ldr	r3, [r3, #16]
 8005e60:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8005e64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	699a      	ldr	r2, [r3, #24]
 8005e70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e74:	1ad2      	subs	r2, r2, r3
 8005e76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	619a      	str	r2, [r3, #24]
 8005e82:	e00e      	b.n	8005ea2 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005e84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	699b      	ldr	r3, [r3, #24]
 8005e90:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8005e94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005ea2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ea6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005eb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eb4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	461a      	mov	r2, r3
 8005ec2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005ec6:	4413      	add	r3, r2
 8005ec8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005ecc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ed0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	011a      	lsls	r2, r3, #4
 8005eda:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005ede:	4413      	add	r3, r2
 8005ee0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ee4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005ee8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005eec:	881b      	ldrh	r3, [r3, #0]
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ef4:	b29a      	uxth	r2, r3
 8005ef6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005efa:	801a      	strh	r2, [r3, #0]
 8005efc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f00:	2b3e      	cmp	r3, #62	; 0x3e
 8005f02:	d924      	bls.n	8005f4e <USB_EPStartXfer+0xec2>
 8005f04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f08:	095b      	lsrs	r3, r3, #5
 8005f0a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005f0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f12:	f003 031f 	and.w	r3, r3, #31
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d104      	bne.n	8005f24 <USB_EPStartXfer+0xe98>
 8005f1a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005f1e:	3b01      	subs	r3, #1
 8005f20:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005f24:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f28:	881b      	ldrh	r3, [r3, #0]
 8005f2a:	b29a      	uxth	r2, r3
 8005f2c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	029b      	lsls	r3, r3, #10
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	4313      	orrs	r3, r2
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f42:	b29a      	uxth	r2, r3
 8005f44:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f48:	801a      	strh	r2, [r3, #0]
 8005f4a:	f000 bc10 	b.w	800676e <USB_EPStartXfer+0x16e2>
 8005f4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d10c      	bne.n	8005f70 <USB_EPStartXfer+0xee4>
 8005f56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f5a:	881b      	ldrh	r3, [r3, #0]
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f66:	b29a      	uxth	r2, r3
 8005f68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f6c:	801a      	strh	r2, [r3, #0]
 8005f6e:	e3fe      	b.n	800676e <USB_EPStartXfer+0x16e2>
 8005f70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f74:	085b      	lsrs	r3, r3, #1
 8005f76:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005f7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f7e:	f003 0301 	and.w	r3, r3, #1
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d004      	beq.n	8005f90 <USB_EPStartXfer+0xf04>
 8005f86:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005f8a:	3301      	adds	r3, #1
 8005f8c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005f90:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f94:	881b      	ldrh	r3, [r3, #0]
 8005f96:	b29a      	uxth	r2, r3
 8005f98:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	029b      	lsls	r3, r3, #10
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	b29a      	uxth	r2, r3
 8005fa6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005faa:	801a      	strh	r2, [r3, #0]
 8005fac:	e3df      	b.n	800676e <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005fae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	78db      	ldrb	r3, [r3, #3]
 8005fba:	2b02      	cmp	r3, #2
 8005fbc:	f040 8218 	bne.w	80063f0 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005fc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	785b      	ldrb	r3, [r3, #1]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	f040 809d 	bne.w	800610c <USB_EPStartXfer+0x1080>
 8005fd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fd6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005fe0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fe4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ff6:	4413      	add	r3, r2
 8005ff8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005ffc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006000:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	011a      	lsls	r2, r3, #4
 800600a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800600e:	4413      	add	r3, r2
 8006010:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006014:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006018:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800601c:	881b      	ldrh	r3, [r3, #0]
 800601e:	b29b      	uxth	r3, r3
 8006020:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006024:	b29a      	uxth	r2, r3
 8006026:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800602a:	801a      	strh	r2, [r3, #0]
 800602c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006030:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	691b      	ldr	r3, [r3, #16]
 8006038:	2b3e      	cmp	r3, #62	; 0x3e
 800603a:	d92b      	bls.n	8006094 <USB_EPStartXfer+0x1008>
 800603c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006040:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	691b      	ldr	r3, [r3, #16]
 8006048:	095b      	lsrs	r3, r3, #5
 800604a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800604e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006052:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	691b      	ldr	r3, [r3, #16]
 800605a:	f003 031f 	and.w	r3, r3, #31
 800605e:	2b00      	cmp	r3, #0
 8006060:	d104      	bne.n	800606c <USB_EPStartXfer+0xfe0>
 8006062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006066:	3b01      	subs	r3, #1
 8006068:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800606c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006070:	881b      	ldrh	r3, [r3, #0]
 8006072:	b29a      	uxth	r2, r3
 8006074:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006078:	b29b      	uxth	r3, r3
 800607a:	029b      	lsls	r3, r3, #10
 800607c:	b29b      	uxth	r3, r3
 800607e:	4313      	orrs	r3, r2
 8006080:	b29b      	uxth	r3, r3
 8006082:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006086:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800608a:	b29a      	uxth	r2, r3
 800608c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006090:	801a      	strh	r2, [r3, #0]
 8006092:	e070      	b.n	8006176 <USB_EPStartXfer+0x10ea>
 8006094:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006098:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	691b      	ldr	r3, [r3, #16]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d10c      	bne.n	80060be <USB_EPStartXfer+0x1032>
 80060a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80060a8:	881b      	ldrh	r3, [r3, #0]
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060b4:	b29a      	uxth	r2, r3
 80060b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80060ba:	801a      	strh	r2, [r3, #0]
 80060bc:	e05b      	b.n	8006176 <USB_EPStartXfer+0x10ea>
 80060be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	691b      	ldr	r3, [r3, #16]
 80060ca:	085b      	lsrs	r3, r3, #1
 80060cc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80060d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	691b      	ldr	r3, [r3, #16]
 80060dc:	f003 0301 	and.w	r3, r3, #1
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d004      	beq.n	80060ee <USB_EPStartXfer+0x1062>
 80060e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060e8:	3301      	adds	r3, #1
 80060ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80060ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80060f2:	881b      	ldrh	r3, [r3, #0]
 80060f4:	b29a      	uxth	r2, r3
 80060f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	029b      	lsls	r3, r3, #10
 80060fe:	b29b      	uxth	r3, r3
 8006100:	4313      	orrs	r3, r2
 8006102:	b29a      	uxth	r2, r3
 8006104:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006108:	801a      	strh	r2, [r3, #0]
 800610a:	e034      	b.n	8006176 <USB_EPStartXfer+0x10ea>
 800610c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006110:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	785b      	ldrb	r3, [r3, #1]
 8006118:	2b01      	cmp	r3, #1
 800611a:	d12c      	bne.n	8006176 <USB_EPStartXfer+0x10ea>
 800611c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006120:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800612a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800612e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006138:	b29b      	uxth	r3, r3
 800613a:	461a      	mov	r2, r3
 800613c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006140:	4413      	add	r3, r2
 8006142:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006146:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800614a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	011a      	lsls	r2, r3, #4
 8006154:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006158:	4413      	add	r3, r2
 800615a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800615e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006162:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006166:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	691b      	ldr	r3, [r3, #16]
 800616e:	b29a      	uxth	r2, r3
 8006170:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006174:	801a      	strh	r2, [r3, #0]
 8006176:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800617a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006184:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006188:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	785b      	ldrb	r3, [r3, #1]
 8006190:	2b00      	cmp	r3, #0
 8006192:	f040 809d 	bne.w	80062d0 <USB_EPStartXfer+0x1244>
 8006196:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800619a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80061a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	461a      	mov	r2, r3
 80061b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80061ba:	4413      	add	r3, r2
 80061bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80061c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	011a      	lsls	r2, r3, #4
 80061ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80061d2:	4413      	add	r3, r2
 80061d4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80061d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80061dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80061e0:	881b      	ldrh	r3, [r3, #0]
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061e8:	b29a      	uxth	r2, r3
 80061ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80061ee:	801a      	strh	r2, [r3, #0]
 80061f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	691b      	ldr	r3, [r3, #16]
 80061fc:	2b3e      	cmp	r3, #62	; 0x3e
 80061fe:	d92b      	bls.n	8006258 <USB_EPStartXfer+0x11cc>
 8006200:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006204:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	691b      	ldr	r3, [r3, #16]
 800620c:	095b      	lsrs	r3, r3, #5
 800620e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006212:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006216:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	691b      	ldr	r3, [r3, #16]
 800621e:	f003 031f 	and.w	r3, r3, #31
 8006222:	2b00      	cmp	r3, #0
 8006224:	d104      	bne.n	8006230 <USB_EPStartXfer+0x11a4>
 8006226:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800622a:	3b01      	subs	r3, #1
 800622c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006230:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006234:	881b      	ldrh	r3, [r3, #0]
 8006236:	b29a      	uxth	r2, r3
 8006238:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800623c:	b29b      	uxth	r3, r3
 800623e:	029b      	lsls	r3, r3, #10
 8006240:	b29b      	uxth	r3, r3
 8006242:	4313      	orrs	r3, r2
 8006244:	b29b      	uxth	r3, r3
 8006246:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800624a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800624e:	b29a      	uxth	r2, r3
 8006250:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006254:	801a      	strh	r2, [r3, #0]
 8006256:	e069      	b.n	800632c <USB_EPStartXfer+0x12a0>
 8006258:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800625c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	691b      	ldr	r3, [r3, #16]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d10c      	bne.n	8006282 <USB_EPStartXfer+0x11f6>
 8006268:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800626c:	881b      	ldrh	r3, [r3, #0]
 800626e:	b29b      	uxth	r3, r3
 8006270:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006274:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006278:	b29a      	uxth	r2, r3
 800627a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800627e:	801a      	strh	r2, [r3, #0]
 8006280:	e054      	b.n	800632c <USB_EPStartXfer+0x12a0>
 8006282:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006286:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	691b      	ldr	r3, [r3, #16]
 800628e:	085b      	lsrs	r3, r3, #1
 8006290:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006294:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006298:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	691b      	ldr	r3, [r3, #16]
 80062a0:	f003 0301 	and.w	r3, r3, #1
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d004      	beq.n	80062b2 <USB_EPStartXfer+0x1226>
 80062a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062ac:	3301      	adds	r3, #1
 80062ae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80062b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062b6:	881b      	ldrh	r3, [r3, #0]
 80062b8:	b29a      	uxth	r2, r3
 80062ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062be:	b29b      	uxth	r3, r3
 80062c0:	029b      	lsls	r3, r3, #10
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	4313      	orrs	r3, r2
 80062c6:	b29a      	uxth	r2, r3
 80062c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062cc:	801a      	strh	r2, [r3, #0]
 80062ce:	e02d      	b.n	800632c <USB_EPStartXfer+0x12a0>
 80062d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	785b      	ldrb	r3, [r3, #1]
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d125      	bne.n	800632c <USB_EPStartXfer+0x12a0>
 80062e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	461a      	mov	r2, r3
 80062f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80062f6:	4413      	add	r3, r2
 80062f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80062fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006300:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	781b      	ldrb	r3, [r3, #0]
 8006308:	011a      	lsls	r2, r3, #4
 800630a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800630e:	4413      	add	r3, r2
 8006310:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006314:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006318:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800631c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	691b      	ldr	r3, [r3, #16]
 8006324:	b29a      	uxth	r2, r3
 8006326:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800632a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800632c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006330:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	69db      	ldr	r3, [r3, #28]
 8006338:	2b00      	cmp	r3, #0
 800633a:	f000 8218 	beq.w	800676e <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800633e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006342:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800634c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	009b      	lsls	r3, r3, #2
 8006356:	4413      	add	r3, r2
 8006358:	881b      	ldrh	r3, [r3, #0]
 800635a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800635e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006362:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006366:	2b00      	cmp	r3, #0
 8006368:	d005      	beq.n	8006376 <USB_EPStartXfer+0x12ea>
 800636a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800636e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006372:	2b00      	cmp	r3, #0
 8006374:	d10d      	bne.n	8006392 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006376:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800637a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800637e:	2b00      	cmp	r3, #0
 8006380:	f040 81f5 	bne.w	800676e <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006384:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800638c:	2b00      	cmp	r3, #0
 800638e:	f040 81ee 	bne.w	800676e <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006392:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006396:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	4413      	add	r3, r2
 80063ac:	881b      	ldrh	r3, [r3, #0]
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063b8:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80063bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	781b      	ldrb	r3, [r3, #0]
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	441a      	add	r2, r3
 80063d6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80063da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063e6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	8013      	strh	r3, [r2, #0]
 80063ee:	e1be      	b.n	800676e <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80063f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	78db      	ldrb	r3, [r3, #3]
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	f040 81b4 	bne.w	800676a <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006402:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006406:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	699a      	ldr	r2, [r3, #24]
 800640e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006412:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	691b      	ldr	r3, [r3, #16]
 800641a:	429a      	cmp	r2, r3
 800641c:	d917      	bls.n	800644e <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800641e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006422:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	691b      	ldr	r3, [r3, #16]
 800642a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800642e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006432:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	699a      	ldr	r2, [r3, #24]
 800643a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800643e:	1ad2      	subs	r2, r2, r3
 8006440:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006444:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	619a      	str	r2, [r3, #24]
 800644c:	e00e      	b.n	800646c <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800644e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006452:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	699b      	ldr	r3, [r3, #24]
 800645a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800645e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006462:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	2200      	movs	r2, #0
 800646a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800646c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006470:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	785b      	ldrb	r3, [r3, #1]
 8006478:	2b00      	cmp	r3, #0
 800647a:	f040 8085 	bne.w	8006588 <USB_EPStartXfer+0x14fc>
 800647e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006482:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800648c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006490:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800649a:	b29b      	uxth	r3, r3
 800649c:	461a      	mov	r2, r3
 800649e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80064a2:	4413      	add	r3, r2
 80064a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80064a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	011a      	lsls	r2, r3, #4
 80064b6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80064ba:	4413      	add	r3, r2
 80064bc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80064c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80064c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80064c8:	881b      	ldrh	r3, [r3, #0]
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064d0:	b29a      	uxth	r2, r3
 80064d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80064d6:	801a      	strh	r2, [r3, #0]
 80064d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064dc:	2b3e      	cmp	r3, #62	; 0x3e
 80064de:	d923      	bls.n	8006528 <USB_EPStartXfer+0x149c>
 80064e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064e4:	095b      	lsrs	r3, r3, #5
 80064e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80064ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064ee:	f003 031f 	and.w	r3, r3, #31
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d104      	bne.n	8006500 <USB_EPStartXfer+0x1474>
 80064f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064fa:	3b01      	subs	r3, #1
 80064fc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006500:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006504:	881b      	ldrh	r3, [r3, #0]
 8006506:	b29a      	uxth	r2, r3
 8006508:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800650c:	b29b      	uxth	r3, r3
 800650e:	029b      	lsls	r3, r3, #10
 8006510:	b29b      	uxth	r3, r3
 8006512:	4313      	orrs	r3, r2
 8006514:	b29b      	uxth	r3, r3
 8006516:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800651a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800651e:	b29a      	uxth	r2, r3
 8006520:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006524:	801a      	strh	r2, [r3, #0]
 8006526:	e060      	b.n	80065ea <USB_EPStartXfer+0x155e>
 8006528:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800652c:	2b00      	cmp	r3, #0
 800652e:	d10c      	bne.n	800654a <USB_EPStartXfer+0x14be>
 8006530:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006534:	881b      	ldrh	r3, [r3, #0]
 8006536:	b29b      	uxth	r3, r3
 8006538:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800653c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006540:	b29a      	uxth	r2, r3
 8006542:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006546:	801a      	strh	r2, [r3, #0]
 8006548:	e04f      	b.n	80065ea <USB_EPStartXfer+0x155e>
 800654a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800654e:	085b      	lsrs	r3, r3, #1
 8006550:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006554:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006558:	f003 0301 	and.w	r3, r3, #1
 800655c:	2b00      	cmp	r3, #0
 800655e:	d004      	beq.n	800656a <USB_EPStartXfer+0x14de>
 8006560:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006564:	3301      	adds	r3, #1
 8006566:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800656a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800656e:	881b      	ldrh	r3, [r3, #0]
 8006570:	b29a      	uxth	r2, r3
 8006572:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006576:	b29b      	uxth	r3, r3
 8006578:	029b      	lsls	r3, r3, #10
 800657a:	b29b      	uxth	r3, r3
 800657c:	4313      	orrs	r3, r2
 800657e:	b29a      	uxth	r2, r3
 8006580:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006584:	801a      	strh	r2, [r3, #0]
 8006586:	e030      	b.n	80065ea <USB_EPStartXfer+0x155e>
 8006588:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800658c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	785b      	ldrb	r3, [r3, #1]
 8006594:	2b01      	cmp	r3, #1
 8006596:	d128      	bne.n	80065ea <USB_EPStartXfer+0x155e>
 8006598:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800659c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80065a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	461a      	mov	r2, r3
 80065b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065bc:	4413      	add	r3, r2
 80065be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80065c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	011a      	lsls	r2, r3, #4
 80065d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065d4:	4413      	add	r3, r2
 80065d6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80065da:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80065de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065e2:	b29a      	uxth	r2, r3
 80065e4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80065e8:	801a      	strh	r2, [r3, #0]
 80065ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80065f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	785b      	ldrb	r3, [r3, #1]
 8006604:	2b00      	cmp	r3, #0
 8006606:	f040 8085 	bne.w	8006714 <USB_EPStartXfer+0x1688>
 800660a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800660e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006618:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800661c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006626:	b29b      	uxth	r3, r3
 8006628:	461a      	mov	r2, r3
 800662a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800662e:	4413      	add	r3, r2
 8006630:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006634:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006638:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	011a      	lsls	r2, r3, #4
 8006642:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006646:	4413      	add	r3, r2
 8006648:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800664c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006650:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006654:	881b      	ldrh	r3, [r3, #0]
 8006656:	b29b      	uxth	r3, r3
 8006658:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800665c:	b29a      	uxth	r2, r3
 800665e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006662:	801a      	strh	r2, [r3, #0]
 8006664:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006668:	2b3e      	cmp	r3, #62	; 0x3e
 800666a:	d923      	bls.n	80066b4 <USB_EPStartXfer+0x1628>
 800666c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006670:	095b      	lsrs	r3, r3, #5
 8006672:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006676:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800667a:	f003 031f 	and.w	r3, r3, #31
 800667e:	2b00      	cmp	r3, #0
 8006680:	d104      	bne.n	800668c <USB_EPStartXfer+0x1600>
 8006682:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006686:	3b01      	subs	r3, #1
 8006688:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800668c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006690:	881b      	ldrh	r3, [r3, #0]
 8006692:	b29a      	uxth	r2, r3
 8006694:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006698:	b29b      	uxth	r3, r3
 800669a:	029b      	lsls	r3, r3, #10
 800669c:	b29b      	uxth	r3, r3
 800669e:	4313      	orrs	r3, r2
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066aa:	b29a      	uxth	r2, r3
 80066ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80066b0:	801a      	strh	r2, [r3, #0]
 80066b2:	e05c      	b.n	800676e <USB_EPStartXfer+0x16e2>
 80066b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d10c      	bne.n	80066d6 <USB_EPStartXfer+0x164a>
 80066bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80066c0:	881b      	ldrh	r3, [r3, #0]
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066cc:	b29a      	uxth	r2, r3
 80066ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80066d2:	801a      	strh	r2, [r3, #0]
 80066d4:	e04b      	b.n	800676e <USB_EPStartXfer+0x16e2>
 80066d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066da:	085b      	lsrs	r3, r3, #1
 80066dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80066e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066e4:	f003 0301 	and.w	r3, r3, #1
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d004      	beq.n	80066f6 <USB_EPStartXfer+0x166a>
 80066ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066f0:	3301      	adds	r3, #1
 80066f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80066f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80066fa:	881b      	ldrh	r3, [r3, #0]
 80066fc:	b29a      	uxth	r2, r3
 80066fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006702:	b29b      	uxth	r3, r3
 8006704:	029b      	lsls	r3, r3, #10
 8006706:	b29b      	uxth	r3, r3
 8006708:	4313      	orrs	r3, r2
 800670a:	b29a      	uxth	r2, r3
 800670c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006710:	801a      	strh	r2, [r3, #0]
 8006712:	e02c      	b.n	800676e <USB_EPStartXfer+0x16e2>
 8006714:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006718:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	785b      	ldrb	r3, [r3, #1]
 8006720:	2b01      	cmp	r3, #1
 8006722:	d124      	bne.n	800676e <USB_EPStartXfer+0x16e2>
 8006724:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006728:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006732:	b29b      	uxth	r3, r3
 8006734:	461a      	mov	r2, r3
 8006736:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800673a:	4413      	add	r3, r2
 800673c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006740:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006744:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	011a      	lsls	r2, r3, #4
 800674e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006752:	4413      	add	r3, r2
 8006754:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006758:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800675c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006760:	b29a      	uxth	r2, r3
 8006762:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006766:	801a      	strh	r2, [r3, #0]
 8006768:	e001      	b.n	800676e <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	e03a      	b.n	80067e4 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800676e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006772:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006776:	681a      	ldr	r2, [r3, #0]
 8006778:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800677c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	4413      	add	r3, r2
 8006788:	881b      	ldrh	r3, [r3, #0]
 800678a:	b29b      	uxth	r3, r3
 800678c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006790:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006794:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006798:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800679c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80067a0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80067a4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80067a8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80067ac:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80067b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	009b      	lsls	r3, r3, #2
 80067c8:	441a      	add	r2, r3
 80067ca:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80067ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067de:	b29b      	uxth	r3, r3
 80067e0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80067e2:	2300      	movs	r3, #0
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}

080067ee <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80067ee:	b480      	push	{r7}
 80067f0:	b085      	sub	sp, #20
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]
 80067f6:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	785b      	ldrb	r3, [r3, #1]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d020      	beq.n	8006842 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006800:	687a      	ldr	r2, [r7, #4]
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	781b      	ldrb	r3, [r3, #0]
 8006806:	009b      	lsls	r3, r3, #2
 8006808:	4413      	add	r3, r2
 800680a:	881b      	ldrh	r3, [r3, #0]
 800680c:	b29b      	uxth	r3, r3
 800680e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006812:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006816:	81bb      	strh	r3, [r7, #12]
 8006818:	89bb      	ldrh	r3, [r7, #12]
 800681a:	f083 0310 	eor.w	r3, r3, #16
 800681e:	81bb      	strh	r3, [r7, #12]
 8006820:	687a      	ldr	r2, [r7, #4]
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	441a      	add	r2, r3
 800682a:	89bb      	ldrh	r3, [r7, #12]
 800682c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006830:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006834:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800683c:	b29b      	uxth	r3, r3
 800683e:	8013      	strh	r3, [r2, #0]
 8006840:	e01f      	b.n	8006882 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006842:	687a      	ldr	r2, [r7, #4]
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	009b      	lsls	r3, r3, #2
 800684a:	4413      	add	r3, r2
 800684c:	881b      	ldrh	r3, [r3, #0]
 800684e:	b29b      	uxth	r3, r3
 8006850:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006854:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006858:	81fb      	strh	r3, [r7, #14]
 800685a:	89fb      	ldrh	r3, [r7, #14]
 800685c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006860:	81fb      	strh	r3, [r7, #14]
 8006862:	687a      	ldr	r2, [r7, #4]
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	441a      	add	r2, r3
 800686c:	89fb      	ldrh	r3, [r7, #14]
 800686e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006872:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006876:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800687a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800687e:	b29b      	uxth	r3, r3
 8006880:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006882:	2300      	movs	r3, #0
}
 8006884:	4618      	mov	r0, r3
 8006886:	3714      	adds	r7, #20
 8006888:	46bd      	mov	sp, r7
 800688a:	bc80      	pop	{r7}
 800688c:	4770      	bx	lr

0800688e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800688e:	b480      	push	{r7}
 8006890:	b087      	sub	sp, #28
 8006892:	af00      	add	r7, sp, #0
 8006894:	6078      	str	r0, [r7, #4]
 8006896:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	7b1b      	ldrb	r3, [r3, #12]
 800689c:	2b00      	cmp	r3, #0
 800689e:	f040 809d 	bne.w	80069dc <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	785b      	ldrb	r3, [r3, #1]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d04c      	beq.n	8006944 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	781b      	ldrb	r3, [r3, #0]
 80068b0:	009b      	lsls	r3, r3, #2
 80068b2:	4413      	add	r3, r2
 80068b4:	881b      	ldrh	r3, [r3, #0]
 80068b6:	823b      	strh	r3, [r7, #16]
 80068b8:	8a3b      	ldrh	r3, [r7, #16]
 80068ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d01b      	beq.n	80068fa <USB_EPClearStall+0x6c>
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	4413      	add	r3, r2
 80068cc:	881b      	ldrh	r3, [r3, #0]
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068d8:	81fb      	strh	r3, [r7, #14]
 80068da:	687a      	ldr	r2, [r7, #4]
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	781b      	ldrb	r3, [r3, #0]
 80068e0:	009b      	lsls	r3, r3, #2
 80068e2:	441a      	add	r2, r3
 80068e4:	89fb      	ldrh	r3, [r7, #14]
 80068e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068f2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	78db      	ldrb	r3, [r3, #3]
 80068fe:	2b01      	cmp	r3, #1
 8006900:	d06c      	beq.n	80069dc <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006902:	687a      	ldr	r2, [r7, #4]
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	009b      	lsls	r3, r3, #2
 800690a:	4413      	add	r3, r2
 800690c:	881b      	ldrh	r3, [r3, #0]
 800690e:	b29b      	uxth	r3, r3
 8006910:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006914:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006918:	81bb      	strh	r3, [r7, #12]
 800691a:	89bb      	ldrh	r3, [r7, #12]
 800691c:	f083 0320 	eor.w	r3, r3, #32
 8006920:	81bb      	strh	r3, [r7, #12]
 8006922:	687a      	ldr	r2, [r7, #4]
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	009b      	lsls	r3, r3, #2
 800692a:	441a      	add	r2, r3
 800692c:	89bb      	ldrh	r3, [r7, #12]
 800692e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006932:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006936:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800693a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800693e:	b29b      	uxth	r3, r3
 8006940:	8013      	strh	r3, [r2, #0]
 8006942:	e04b      	b.n	80069dc <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	4413      	add	r3, r2
 800694e:	881b      	ldrh	r3, [r3, #0]
 8006950:	82fb      	strh	r3, [r7, #22]
 8006952:	8afb      	ldrh	r3, [r7, #22]
 8006954:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006958:	2b00      	cmp	r3, #0
 800695a:	d01b      	beq.n	8006994 <USB_EPClearStall+0x106>
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	4413      	add	r3, r2
 8006966:	881b      	ldrh	r3, [r3, #0]
 8006968:	b29b      	uxth	r3, r3
 800696a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800696e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006972:	82bb      	strh	r3, [r7, #20]
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	441a      	add	r2, r3
 800697e:	8abb      	ldrh	r3, [r7, #20]
 8006980:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006984:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006988:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800698c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006990:	b29b      	uxth	r3, r3
 8006992:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	009b      	lsls	r3, r3, #2
 800699c:	4413      	add	r3, r2
 800699e:	881b      	ldrh	r3, [r3, #0]
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069aa:	827b      	strh	r3, [r7, #18]
 80069ac:	8a7b      	ldrh	r3, [r7, #18]
 80069ae:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80069b2:	827b      	strh	r3, [r7, #18]
 80069b4:	8a7b      	ldrh	r3, [r7, #18]
 80069b6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80069ba:	827b      	strh	r3, [r7, #18]
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	781b      	ldrb	r3, [r3, #0]
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	441a      	add	r2, r3
 80069c6:	8a7b      	ldrh	r3, [r7, #18]
 80069c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069d8:	b29b      	uxth	r3, r3
 80069da:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80069dc:	2300      	movs	r3, #0
}
 80069de:	4618      	mov	r0, r3
 80069e0:	371c      	adds	r7, #28
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bc80      	pop	{r7}
 80069e6:	4770      	bx	lr

080069e8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b083      	sub	sp, #12
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	460b      	mov	r3, r1
 80069f2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80069f4:	78fb      	ldrb	r3, [r7, #3]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d103      	bne.n	8006a02 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2280      	movs	r2, #128	; 0x80
 80069fe:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006a02:	2300      	movs	r3, #0
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	370c      	adds	r7, #12
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bc80      	pop	{r7}
 8006a0c:	4770      	bx	lr

08006a0e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006a0e:	b480      	push	{r7}
 8006a10:	b083      	sub	sp, #12
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006a16:	2300      	movs	r3, #0
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	370c      	adds	r7, #12
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bc80      	pop	{r7}
 8006a20:	4770      	bx	lr

08006a22 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006a22:	b480      	push	{r7}
 8006a24:	b083      	sub	sp, #12
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006a2a:	2300      	movs	r3, #0
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	370c      	adds	r7, #12
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bc80      	pop	{r7}
 8006a34:	4770      	bx	lr

08006a36 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8006a36:	b480      	push	{r7}
 8006a38:	b085      	sub	sp, #20
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006a48:	68fb      	ldr	r3, [r7, #12]
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3714      	adds	r7, #20
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bc80      	pop	{r7}
 8006a52:	4770      	bx	lr

08006a54 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b083      	sub	sp, #12
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006a5e:	2300      	movs	r3, #0
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	370c      	adds	r7, #12
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bc80      	pop	{r7}
 8006a68:	4770      	bx	lr

08006a6a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006a6a:	b480      	push	{r7}
 8006a6c:	b08b      	sub	sp, #44	; 0x2c
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	60f8      	str	r0, [r7, #12]
 8006a72:	60b9      	str	r1, [r7, #8]
 8006a74:	4611      	mov	r1, r2
 8006a76:	461a      	mov	r2, r3
 8006a78:	460b      	mov	r3, r1
 8006a7a:	80fb      	strh	r3, [r7, #6]
 8006a7c:	4613      	mov	r3, r2
 8006a7e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006a80:	88bb      	ldrh	r3, [r7, #4]
 8006a82:	3301      	adds	r3, #1
 8006a84:	085b      	lsrs	r3, r3, #1
 8006a86:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006a90:	88fb      	ldrh	r3, [r7, #6]
 8006a92:	005a      	lsls	r2, r3, #1
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	4413      	add	r3, r2
 8006a98:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a9c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006a9e:	69bb      	ldr	r3, [r7, #24]
 8006aa0:	627b      	str	r3, [r7, #36]	; 0x24
 8006aa2:	e01e      	b.n	8006ae2 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8006aa4:	69fb      	ldr	r3, [r7, #28]
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006aaa:	69fb      	ldr	r3, [r7, #28]
 8006aac:	3301      	adds	r3, #1
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	021b      	lsls	r3, r3, #8
 8006ab2:	b21a      	sxth	r2, r3
 8006ab4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	b21b      	sxth	r3, r3
 8006abc:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006abe:	6a3b      	ldr	r3, [r7, #32]
 8006ac0:	8a7a      	ldrh	r2, [r7, #18]
 8006ac2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006ac4:	6a3b      	ldr	r3, [r7, #32]
 8006ac6:	3302      	adds	r3, #2
 8006ac8:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006aca:	6a3b      	ldr	r3, [r7, #32]
 8006acc:	3302      	adds	r3, #2
 8006ace:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8006ad0:	69fb      	ldr	r3, [r7, #28]
 8006ad2:	3301      	adds	r3, #1
 8006ad4:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	3301      	adds	r3, #1
 8006ada:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ade:	3b01      	subs	r3, #1
 8006ae0:	627b      	str	r3, [r7, #36]	; 0x24
 8006ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d1dd      	bne.n	8006aa4 <USB_WritePMA+0x3a>
  }
}
 8006ae8:	bf00      	nop
 8006aea:	bf00      	nop
 8006aec:	372c      	adds	r7, #44	; 0x2c
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bc80      	pop	{r7}
 8006af2:	4770      	bx	lr

08006af4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b08b      	sub	sp, #44	; 0x2c
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	60f8      	str	r0, [r7, #12]
 8006afc:	60b9      	str	r1, [r7, #8]
 8006afe:	4611      	mov	r1, r2
 8006b00:	461a      	mov	r2, r3
 8006b02:	460b      	mov	r3, r1
 8006b04:	80fb      	strh	r3, [r7, #6]
 8006b06:	4613      	mov	r3, r2
 8006b08:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006b0a:	88bb      	ldrh	r3, [r7, #4]
 8006b0c:	085b      	lsrs	r3, r3, #1
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006b1a:	88fb      	ldrh	r3, [r7, #6]
 8006b1c:	005a      	lsls	r2, r3, #1
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	4413      	add	r3, r2
 8006b22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b26:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006b28:	69bb      	ldr	r3, [r7, #24]
 8006b2a:	627b      	str	r3, [r7, #36]	; 0x24
 8006b2c:	e01b      	b.n	8006b66 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006b2e:	6a3b      	ldr	r3, [r7, #32]
 8006b30:	881b      	ldrh	r3, [r3, #0]
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006b36:	6a3b      	ldr	r3, [r7, #32]
 8006b38:	3302      	adds	r3, #2
 8006b3a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	b2da      	uxtb	r2, r3
 8006b40:	69fb      	ldr	r3, [r7, #28]
 8006b42:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006b44:	69fb      	ldr	r3, [r7, #28]
 8006b46:	3301      	adds	r3, #1
 8006b48:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	0a1b      	lsrs	r3, r3, #8
 8006b4e:	b2da      	uxtb	r2, r3
 8006b50:	69fb      	ldr	r3, [r7, #28]
 8006b52:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006b54:	69fb      	ldr	r3, [r7, #28]
 8006b56:	3301      	adds	r3, #1
 8006b58:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006b5a:	6a3b      	ldr	r3, [r7, #32]
 8006b5c:	3302      	adds	r3, #2
 8006b5e:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8006b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b62:	3b01      	subs	r3, #1
 8006b64:	627b      	str	r3, [r7, #36]	; 0x24
 8006b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d1e0      	bne.n	8006b2e <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006b6c:	88bb      	ldrh	r3, [r7, #4]
 8006b6e:	f003 0301 	and.w	r3, r3, #1
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d007      	beq.n	8006b88 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8006b78:	6a3b      	ldr	r3, [r7, #32]
 8006b7a:	881b      	ldrh	r3, [r3, #0]
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	b2da      	uxtb	r2, r3
 8006b84:	69fb      	ldr	r3, [r7, #28]
 8006b86:	701a      	strb	r2, [r3, #0]
  }
}
 8006b88:	bf00      	nop
 8006b8a:	372c      	adds	r7, #44	; 0x2c
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bc80      	pop	{r7}
 8006b90:	4770      	bx	lr

08006b92 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b92:	b580      	push	{r7, lr}
 8006b94:	b084      	sub	sp, #16
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	6078      	str	r0, [r7, #4]
 8006b9a:	460b      	mov	r3, r1
 8006b9c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	7c1b      	ldrb	r3, [r3, #16]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d115      	bne.n	8006bd6 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006baa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006bae:	2202      	movs	r2, #2
 8006bb0:	2181      	movs	r1, #129	; 0x81
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f001 fe87 	bl	80088c6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006bbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006bc2:	2202      	movs	r2, #2
 8006bc4:	2101      	movs	r1, #1
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f001 fe7d 	bl	80088c6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006bd4:	e012      	b.n	8006bfc <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006bd6:	2340      	movs	r3, #64	; 0x40
 8006bd8:	2202      	movs	r2, #2
 8006bda:	2181      	movs	r1, #129	; 0x81
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f001 fe72 	bl	80088c6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2201      	movs	r2, #1
 8006be6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006be8:	2340      	movs	r3, #64	; 0x40
 8006bea:	2202      	movs	r2, #2
 8006bec:	2101      	movs	r1, #1
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f001 fe69 	bl	80088c6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006bfc:	2308      	movs	r3, #8
 8006bfe:	2203      	movs	r2, #3
 8006c00:	2182      	movs	r1, #130	; 0x82
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f001 fe5f 	bl	80088c6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006c0e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006c12:	f001 ff7f 	bl	8008b14 <USBD_static_malloc>
 8006c16:	4602      	mov	r2, r0
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d102      	bne.n	8006c2e <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006c28:	2301      	movs	r3, #1
 8006c2a:	73fb      	strb	r3, [r7, #15]
 8006c2c:	e026      	b.n	8006c7c <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c34:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	2200      	movs	r2, #0
 8006c44:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	7c1b      	ldrb	r3, [r3, #16]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d109      	bne.n	8006c6c <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c62:	2101      	movs	r1, #1
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f001 ff1f 	bl	8008aa8 <USBD_LL_PrepareReceive>
 8006c6a:	e007      	b.n	8006c7c <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c72:	2340      	movs	r3, #64	; 0x40
 8006c74:	2101      	movs	r1, #1
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f001 ff16 	bl	8008aa8 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3710      	adds	r7, #16
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}

08006c86 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c86:	b580      	push	{r7, lr}
 8006c88:	b084      	sub	sp, #16
 8006c8a:	af00      	add	r7, sp, #0
 8006c8c:	6078      	str	r0, [r7, #4]
 8006c8e:	460b      	mov	r3, r1
 8006c90:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006c92:	2300      	movs	r3, #0
 8006c94:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006c96:	2181      	movs	r1, #129	; 0x81
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f001 fe3a 	bl	8008912 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006ca4:	2101      	movs	r1, #1
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f001 fe33 	bl	8008912 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006cb4:	2182      	movs	r1, #130	; 0x82
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f001 fe2b 	bl	8008912 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d00e      	beq.n	8006cea <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f001 ff25 	bl	8008b2c <USBD_static_free>
    pdev->pClassData = NULL;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3710      	adds	r7, #16
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}

08006cf4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b086      	sub	sp, #24
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d04:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006d06:	2300      	movs	r3, #0
 8006d08:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	781b      	ldrb	r3, [r3, #0]
 8006d16:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d039      	beq.n	8006d92 <USBD_CDC_Setup+0x9e>
 8006d1e:	2b20      	cmp	r3, #32
 8006d20:	d17f      	bne.n	8006e22 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	88db      	ldrh	r3, [r3, #6]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d029      	beq.n	8006d7e <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	781b      	ldrb	r3, [r3, #0]
 8006d2e:	b25b      	sxtb	r3, r3
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	da11      	bge.n	8006d58 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	683a      	ldr	r2, [r7, #0]
 8006d3e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006d40:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006d42:	683a      	ldr	r2, [r7, #0]
 8006d44:	88d2      	ldrh	r2, [r2, #6]
 8006d46:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006d48:	6939      	ldr	r1, [r7, #16]
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	88db      	ldrh	r3, [r3, #6]
 8006d4e:	461a      	mov	r2, r3
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f001 fa0a 	bl	800816a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006d56:	e06b      	b.n	8006e30 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	785a      	ldrb	r2, [r3, #1]
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	88db      	ldrh	r3, [r3, #6]
 8006d66:	b2da      	uxtb	r2, r3
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006d6e:	6939      	ldr	r1, [r7, #16]
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	88db      	ldrh	r3, [r3, #6]
 8006d74:	461a      	mov	r2, r3
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f001 fa25 	bl	80081c6 <USBD_CtlPrepareRx>
      break;
 8006d7c:	e058      	b.n	8006e30 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	683a      	ldr	r2, [r7, #0]
 8006d88:	7850      	ldrb	r0, [r2, #1]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	6839      	ldr	r1, [r7, #0]
 8006d8e:	4798      	blx	r3
      break;
 8006d90:	e04e      	b.n	8006e30 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	785b      	ldrb	r3, [r3, #1]
 8006d96:	2b0b      	cmp	r3, #11
 8006d98:	d02e      	beq.n	8006df8 <USBD_CDC_Setup+0x104>
 8006d9a:	2b0b      	cmp	r3, #11
 8006d9c:	dc38      	bgt.n	8006e10 <USBD_CDC_Setup+0x11c>
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d002      	beq.n	8006da8 <USBD_CDC_Setup+0xb4>
 8006da2:	2b0a      	cmp	r3, #10
 8006da4:	d014      	beq.n	8006dd0 <USBD_CDC_Setup+0xdc>
 8006da6:	e033      	b.n	8006e10 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dae:	2b03      	cmp	r3, #3
 8006db0:	d107      	bne.n	8006dc2 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006db2:	f107 030c 	add.w	r3, r7, #12
 8006db6:	2202      	movs	r2, #2
 8006db8:	4619      	mov	r1, r3
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f001 f9d5 	bl	800816a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006dc0:	e02e      	b.n	8006e20 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006dc2:	6839      	ldr	r1, [r7, #0]
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f001 f966 	bl	8008096 <USBD_CtlError>
            ret = USBD_FAIL;
 8006dca:	2302      	movs	r3, #2
 8006dcc:	75fb      	strb	r3, [r7, #23]
          break;
 8006dce:	e027      	b.n	8006e20 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dd6:	2b03      	cmp	r3, #3
 8006dd8:	d107      	bne.n	8006dea <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006dda:	f107 030f 	add.w	r3, r7, #15
 8006dde:	2201      	movs	r2, #1
 8006de0:	4619      	mov	r1, r3
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f001 f9c1 	bl	800816a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006de8:	e01a      	b.n	8006e20 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006dea:	6839      	ldr	r1, [r7, #0]
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f001 f952 	bl	8008096 <USBD_CtlError>
            ret = USBD_FAIL;
 8006df2:	2302      	movs	r3, #2
 8006df4:	75fb      	strb	r3, [r7, #23]
          break;
 8006df6:	e013      	b.n	8006e20 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dfe:	2b03      	cmp	r3, #3
 8006e00:	d00d      	beq.n	8006e1e <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006e02:	6839      	ldr	r1, [r7, #0]
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f001 f946 	bl	8008096 <USBD_CtlError>
            ret = USBD_FAIL;
 8006e0a:	2302      	movs	r3, #2
 8006e0c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006e0e:	e006      	b.n	8006e1e <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006e10:	6839      	ldr	r1, [r7, #0]
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f001 f93f 	bl	8008096 <USBD_CtlError>
          ret = USBD_FAIL;
 8006e18:	2302      	movs	r3, #2
 8006e1a:	75fb      	strb	r3, [r7, #23]
          break;
 8006e1c:	e000      	b.n	8006e20 <USBD_CDC_Setup+0x12c>
          break;
 8006e1e:	bf00      	nop
      }
      break;
 8006e20:	e006      	b.n	8006e30 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006e22:	6839      	ldr	r1, [r7, #0]
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f001 f936 	bl	8008096 <USBD_CtlError>
      ret = USBD_FAIL;
 8006e2a:	2302      	movs	r3, #2
 8006e2c:	75fb      	strb	r3, [r7, #23]
      break;
 8006e2e:	bf00      	nop
  }

  return ret;
 8006e30:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3718      	adds	r7, #24
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}

08006e3a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006e3a:	b580      	push	{r7, lr}
 8006e3c:	b084      	sub	sp, #16
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	6078      	str	r0, [r7, #4]
 8006e42:	460b      	mov	r3, r1
 8006e44:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e4c:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006e54:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d03a      	beq.n	8006ed6 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006e60:	78fa      	ldrb	r2, [r7, #3]
 8006e62:	6879      	ldr	r1, [r7, #4]
 8006e64:	4613      	mov	r3, r2
 8006e66:	009b      	lsls	r3, r3, #2
 8006e68:	4413      	add	r3, r2
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	440b      	add	r3, r1
 8006e6e:	331c      	adds	r3, #28
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d029      	beq.n	8006eca <USBD_CDC_DataIn+0x90>
 8006e76:	78fa      	ldrb	r2, [r7, #3]
 8006e78:	6879      	ldr	r1, [r7, #4]
 8006e7a:	4613      	mov	r3, r2
 8006e7c:	009b      	lsls	r3, r3, #2
 8006e7e:	4413      	add	r3, r2
 8006e80:	009b      	lsls	r3, r3, #2
 8006e82:	440b      	add	r3, r1
 8006e84:	331c      	adds	r3, #28
 8006e86:	681a      	ldr	r2, [r3, #0]
 8006e88:	78f9      	ldrb	r1, [r7, #3]
 8006e8a:	68b8      	ldr	r0, [r7, #8]
 8006e8c:	460b      	mov	r3, r1
 8006e8e:	009b      	lsls	r3, r3, #2
 8006e90:	440b      	add	r3, r1
 8006e92:	00db      	lsls	r3, r3, #3
 8006e94:	4403      	add	r3, r0
 8006e96:	3338      	adds	r3, #56	; 0x38
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	fbb2 f1f3 	udiv	r1, r2, r3
 8006e9e:	fb01 f303 	mul.w	r3, r1, r3
 8006ea2:	1ad3      	subs	r3, r2, r3
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d110      	bne.n	8006eca <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006ea8:	78fa      	ldrb	r2, [r7, #3]
 8006eaa:	6879      	ldr	r1, [r7, #4]
 8006eac:	4613      	mov	r3, r2
 8006eae:	009b      	lsls	r3, r3, #2
 8006eb0:	4413      	add	r3, r2
 8006eb2:	009b      	lsls	r3, r3, #2
 8006eb4:	440b      	add	r3, r1
 8006eb6:	331c      	adds	r3, #28
 8006eb8:	2200      	movs	r2, #0
 8006eba:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006ebc:	78f9      	ldrb	r1, [r7, #3]
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f001 fdcd 	bl	8008a62 <USBD_LL_Transmit>
 8006ec8:	e003      	b.n	8006ed2 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	e000      	b.n	8006ed8 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006ed6:	2302      	movs	r3, #2
  }
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3710      	adds	r7, #16
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}

08006ee0 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b084      	sub	sp, #16
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	460b      	mov	r3, r1
 8006eea:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ef2:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006ef4:	78fb      	ldrb	r3, [r7, #3]
 8006ef6:	4619      	mov	r1, r3
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f001 fdf8 	bl	8008aee <USBD_LL_GetRxDataSize>
 8006efe:	4602      	mov	r2, r0
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d00d      	beq.n	8006f2c <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f16:	68db      	ldr	r3, [r3, #12]
 8006f18:	68fa      	ldr	r2, [r7, #12]
 8006f1a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006f1e:	68fa      	ldr	r2, [r7, #12]
 8006f20:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006f24:	4611      	mov	r1, r2
 8006f26:	4798      	blx	r3

    return USBD_OK;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	e000      	b.n	8006f2e <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006f2c:	2302      	movs	r3, #2
  }
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	3710      	adds	r7, #16
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}

08006f36 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006f36:	b580      	push	{r7, lr}
 8006f38:	b084      	sub	sp, #16
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f44:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d015      	beq.n	8006f7c <USBD_CDC_EP0_RxReady+0x46>
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006f56:	2bff      	cmp	r3, #255	; 0xff
 8006f58:	d010      	beq.n	8006f7c <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f60:	689b      	ldr	r3, [r3, #8]
 8006f62:	68fa      	ldr	r2, [r7, #12]
 8006f64:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006f68:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006f6a:	68fa      	ldr	r2, [r7, #12]
 8006f6c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006f70:	b292      	uxth	r2, r2
 8006f72:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	22ff      	movs	r2, #255	; 0xff
 8006f78:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006f7c:	2300      	movs	r3, #0
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3710      	adds	r7, #16
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
	...

08006f88 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b083      	sub	sp, #12
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2243      	movs	r2, #67	; 0x43
 8006f94:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006f96:	4b03      	ldr	r3, [pc, #12]	; (8006fa4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	370c      	adds	r7, #12
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bc80      	pop	{r7}
 8006fa0:	4770      	bx	lr
 8006fa2:	bf00      	nop
 8006fa4:	200000a0 	.word	0x200000a0

08006fa8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b083      	sub	sp, #12
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2243      	movs	r2, #67	; 0x43
 8006fb4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006fb6:	4b03      	ldr	r3, [pc, #12]	; (8006fc4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	370c      	adds	r7, #12
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bc80      	pop	{r7}
 8006fc0:	4770      	bx	lr
 8006fc2:	bf00      	nop
 8006fc4:	2000005c 	.word	0x2000005c

08006fc8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b083      	sub	sp, #12
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2243      	movs	r2, #67	; 0x43
 8006fd4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006fd6:	4b03      	ldr	r3, [pc, #12]	; (8006fe4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	370c      	adds	r7, #12
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bc80      	pop	{r7}
 8006fe0:	4770      	bx	lr
 8006fe2:	bf00      	nop
 8006fe4:	200000e4 	.word	0x200000e4

08006fe8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b083      	sub	sp, #12
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	220a      	movs	r2, #10
 8006ff4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006ff6:	4b03      	ldr	r3, [pc, #12]	; (8007004 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	370c      	adds	r7, #12
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bc80      	pop	{r7}
 8007000:	4770      	bx	lr
 8007002:	bf00      	nop
 8007004:	20000018 	.word	0x20000018

08007008 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007008:	b480      	push	{r7}
 800700a:	b085      	sub	sp, #20
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007012:	2302      	movs	r3, #2
 8007014:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d005      	beq.n	8007028 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	683a      	ldr	r2, [r7, #0]
 8007020:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8007024:	2300      	movs	r3, #0
 8007026:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007028:	7bfb      	ldrb	r3, [r7, #15]
}
 800702a:	4618      	mov	r0, r3
 800702c:	3714      	adds	r7, #20
 800702e:	46bd      	mov	sp, r7
 8007030:	bc80      	pop	{r7}
 8007032:	4770      	bx	lr

08007034 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007034:	b480      	push	{r7}
 8007036:	b087      	sub	sp, #28
 8007038:	af00      	add	r7, sp, #0
 800703a:	60f8      	str	r0, [r7, #12]
 800703c:	60b9      	str	r1, [r7, #8]
 800703e:	4613      	mov	r3, r2
 8007040:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007048:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	68ba      	ldr	r2, [r7, #8]
 800704e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007052:	88fa      	ldrh	r2, [r7, #6]
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800705a:	2300      	movs	r3, #0
}
 800705c:	4618      	mov	r0, r3
 800705e:	371c      	adds	r7, #28
 8007060:	46bd      	mov	sp, r7
 8007062:	bc80      	pop	{r7}
 8007064:	4770      	bx	lr

08007066 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8007066:	b480      	push	{r7}
 8007068:	b085      	sub	sp, #20
 800706a:	af00      	add	r7, sp, #0
 800706c:	6078      	str	r0, [r7, #4]
 800706e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007076:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	683a      	ldr	r2, [r7, #0]
 800707c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007080:	2300      	movs	r3, #0
}
 8007082:	4618      	mov	r0, r3
 8007084:	3714      	adds	r7, #20
 8007086:	46bd      	mov	sp, r7
 8007088:	bc80      	pop	{r7}
 800708a:	4770      	bx	lr

0800708c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b084      	sub	sp, #16
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800709a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d01c      	beq.n	80070e0 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d115      	bne.n	80070dc <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2201      	movs	r2, #1
 80070b4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	2181      	movs	r1, #129	; 0x81
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f001 fcc5 	bl	8008a62 <USBD_LL_Transmit>

      return USBD_OK;
 80070d8:	2300      	movs	r3, #0
 80070da:	e002      	b.n	80070e2 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80070dc:	2301      	movs	r3, #1
 80070de:	e000      	b.n	80070e2 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80070e0:	2302      	movs	r3, #2
  }
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3710      	adds	r7, #16
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}

080070ea <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80070ea:	b580      	push	{r7, lr}
 80070ec:	b084      	sub	sp, #16
 80070ee:	af00      	add	r7, sp, #0
 80070f0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070f8:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007100:	2b00      	cmp	r3, #0
 8007102:	d017      	beq.n	8007134 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	7c1b      	ldrb	r3, [r3, #16]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d109      	bne.n	8007120 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007112:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007116:	2101      	movs	r1, #1
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f001 fcc5 	bl	8008aa8 <USBD_LL_PrepareReceive>
 800711e:	e007      	b.n	8007130 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007126:	2340      	movs	r3, #64	; 0x40
 8007128:	2101      	movs	r1, #1
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f001 fcbc 	bl	8008aa8 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007130:	2300      	movs	r3, #0
 8007132:	e000      	b.n	8007136 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007134:	2302      	movs	r3, #2
  }
}
 8007136:	4618      	mov	r0, r3
 8007138:	3710      	adds	r7, #16
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}

0800713e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800713e:	b580      	push	{r7, lr}
 8007140:	b084      	sub	sp, #16
 8007142:	af00      	add	r7, sp, #0
 8007144:	60f8      	str	r0, [r7, #12]
 8007146:	60b9      	str	r1, [r7, #8]
 8007148:	4613      	mov	r3, r2
 800714a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d101      	bne.n	8007156 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007152:	2302      	movs	r3, #2
 8007154:	e01a      	b.n	800718c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800715c:	2b00      	cmp	r3, #0
 800715e:	d003      	beq.n	8007168 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2200      	movs	r2, #0
 8007164:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d003      	beq.n	8007176 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	68ba      	ldr	r2, [r7, #8]
 8007172:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2201      	movs	r2, #1
 800717a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	79fa      	ldrb	r2, [r7, #7]
 8007182:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007184:	68f8      	ldr	r0, [r7, #12]
 8007186:	f001 fb29 	bl	80087dc <USBD_LL_Init>

  return USBD_OK;
 800718a:	2300      	movs	r3, #0
}
 800718c:	4618      	mov	r0, r3
 800718e:	3710      	adds	r7, #16
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}

08007194 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007194:	b480      	push	{r7}
 8007196:	b085      	sub	sp, #20
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
 800719c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800719e:	2300      	movs	r3, #0
 80071a0:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d006      	beq.n	80071b6 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	683a      	ldr	r2, [r7, #0]
 80071ac:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80071b0:	2300      	movs	r3, #0
 80071b2:	73fb      	strb	r3, [r7, #15]
 80071b4:	e001      	b.n	80071ba <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80071b6:	2302      	movs	r3, #2
 80071b8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80071ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3714      	adds	r7, #20
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bc80      	pop	{r7}
 80071c4:	4770      	bx	lr

080071c6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80071c6:	b580      	push	{r7, lr}
 80071c8:	b082      	sub	sp, #8
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f001 fb5e 	bl	8008890 <USBD_LL_Start>

  return USBD_OK;
 80071d4:	2300      	movs	r3, #0
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3708      	adds	r7, #8
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}

080071de <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80071de:	b480      	push	{r7}
 80071e0:	b083      	sub	sp, #12
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80071e6:	2300      	movs	r3, #0
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	370c      	adds	r7, #12
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bc80      	pop	{r7}
 80071f0:	4770      	bx	lr

080071f2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80071f2:	b580      	push	{r7, lr}
 80071f4:	b084      	sub	sp, #16
 80071f6:	af00      	add	r7, sp, #0
 80071f8:	6078      	str	r0, [r7, #4]
 80071fa:	460b      	mov	r3, r1
 80071fc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80071fe:	2302      	movs	r3, #2
 8007200:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007208:	2b00      	cmp	r3, #0
 800720a:	d00c      	beq.n	8007226 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	78fa      	ldrb	r2, [r7, #3]
 8007216:	4611      	mov	r1, r2
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	4798      	blx	r3
 800721c:	4603      	mov	r3, r0
 800721e:	2b00      	cmp	r3, #0
 8007220:	d101      	bne.n	8007226 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007222:	2300      	movs	r3, #0
 8007224:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007226:	7bfb      	ldrb	r3, [r7, #15]
}
 8007228:	4618      	mov	r0, r3
 800722a:	3710      	adds	r7, #16
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}

08007230 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b082      	sub	sp, #8
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	460b      	mov	r3, r1
 800723a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	78fa      	ldrb	r2, [r7, #3]
 8007246:	4611      	mov	r1, r2
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	4798      	blx	r3

  return USBD_OK;
 800724c:	2300      	movs	r3, #0
}
 800724e:	4618      	mov	r0, r3
 8007250:	3708      	adds	r7, #8
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}

08007256 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007256:	b580      	push	{r7, lr}
 8007258:	b082      	sub	sp, #8
 800725a:	af00      	add	r7, sp, #0
 800725c:	6078      	str	r0, [r7, #4]
 800725e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007266:	6839      	ldr	r1, [r7, #0]
 8007268:	4618      	mov	r0, r3
 800726a:	f000 fed8 	bl	800801e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2201      	movs	r2, #1
 8007272:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800727c:	461a      	mov	r2, r3
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800728a:	f003 031f 	and.w	r3, r3, #31
 800728e:	2b02      	cmp	r3, #2
 8007290:	d016      	beq.n	80072c0 <USBD_LL_SetupStage+0x6a>
 8007292:	2b02      	cmp	r3, #2
 8007294:	d81c      	bhi.n	80072d0 <USBD_LL_SetupStage+0x7a>
 8007296:	2b00      	cmp	r3, #0
 8007298:	d002      	beq.n	80072a0 <USBD_LL_SetupStage+0x4a>
 800729a:	2b01      	cmp	r3, #1
 800729c:	d008      	beq.n	80072b0 <USBD_LL_SetupStage+0x5a>
 800729e:	e017      	b.n	80072d0 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80072a6:	4619      	mov	r1, r3
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f000 f9cb 	bl	8007644 <USBD_StdDevReq>
      break;
 80072ae:	e01a      	b.n	80072e6 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80072b6:	4619      	mov	r1, r3
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f000 fa2d 	bl	8007718 <USBD_StdItfReq>
      break;
 80072be:	e012      	b.n	80072e6 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80072c6:	4619      	mov	r1, r3
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 fa6d 	bl	80077a8 <USBD_StdEPReq>
      break;
 80072ce:	e00a      	b.n	80072e6 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80072d6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80072da:	b2db      	uxtb	r3, r3
 80072dc:	4619      	mov	r1, r3
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f001 fb36 	bl	8008950 <USBD_LL_StallEP>
      break;
 80072e4:	bf00      	nop
  }

  return USBD_OK;
 80072e6:	2300      	movs	r3, #0
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3708      	adds	r7, #8
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b086      	sub	sp, #24
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	60f8      	str	r0, [r7, #12]
 80072f8:	460b      	mov	r3, r1
 80072fa:	607a      	str	r2, [r7, #4]
 80072fc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80072fe:	7afb      	ldrb	r3, [r7, #11]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d14b      	bne.n	800739c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800730a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007312:	2b03      	cmp	r3, #3
 8007314:	d134      	bne.n	8007380 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	68da      	ldr	r2, [r3, #12]
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	691b      	ldr	r3, [r3, #16]
 800731e:	429a      	cmp	r2, r3
 8007320:	d919      	bls.n	8007356 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	68da      	ldr	r2, [r3, #12]
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	691b      	ldr	r3, [r3, #16]
 800732a:	1ad2      	subs	r2, r2, r3
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	68da      	ldr	r2, [r3, #12]
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007338:	429a      	cmp	r2, r3
 800733a:	d203      	bcs.n	8007344 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007340:	b29b      	uxth	r3, r3
 8007342:	e002      	b.n	800734a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007348:	b29b      	uxth	r3, r3
 800734a:	461a      	mov	r2, r3
 800734c:	6879      	ldr	r1, [r7, #4]
 800734e:	68f8      	ldr	r0, [r7, #12]
 8007350:	f000 ff57 	bl	8008202 <USBD_CtlContinueRx>
 8007354:	e038      	b.n	80073c8 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800735c:	691b      	ldr	r3, [r3, #16]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d00a      	beq.n	8007378 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007368:	2b03      	cmp	r3, #3
 800736a:	d105      	bne.n	8007378 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007372:	691b      	ldr	r3, [r3, #16]
 8007374:	68f8      	ldr	r0, [r7, #12]
 8007376:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007378:	68f8      	ldr	r0, [r7, #12]
 800737a:	f000 ff54 	bl	8008226 <USBD_CtlSendStatus>
 800737e:	e023      	b.n	80073c8 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007386:	2b05      	cmp	r3, #5
 8007388:	d11e      	bne.n	80073c8 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2200      	movs	r2, #0
 800738e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007392:	2100      	movs	r1, #0
 8007394:	68f8      	ldr	r0, [r7, #12]
 8007396:	f001 fadb 	bl	8008950 <USBD_LL_StallEP>
 800739a:	e015      	b.n	80073c8 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073a2:	699b      	ldr	r3, [r3, #24]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d00d      	beq.n	80073c4 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80073ae:	2b03      	cmp	r3, #3
 80073b0:	d108      	bne.n	80073c4 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073b8:	699b      	ldr	r3, [r3, #24]
 80073ba:	7afa      	ldrb	r2, [r7, #11]
 80073bc:	4611      	mov	r1, r2
 80073be:	68f8      	ldr	r0, [r7, #12]
 80073c0:	4798      	blx	r3
 80073c2:	e001      	b.n	80073c8 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80073c4:	2302      	movs	r3, #2
 80073c6:	e000      	b.n	80073ca <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80073c8:	2300      	movs	r3, #0
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3718      	adds	r7, #24
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}

080073d2 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80073d2:	b580      	push	{r7, lr}
 80073d4:	b086      	sub	sp, #24
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	60f8      	str	r0, [r7, #12]
 80073da:	460b      	mov	r3, r1
 80073dc:	607a      	str	r2, [r7, #4]
 80073de:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80073e0:	7afb      	ldrb	r3, [r7, #11]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d17f      	bne.n	80074e6 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	3314      	adds	r3, #20
 80073ea:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80073f2:	2b02      	cmp	r3, #2
 80073f4:	d15c      	bne.n	80074b0 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	68da      	ldr	r2, [r3, #12]
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	691b      	ldr	r3, [r3, #16]
 80073fe:	429a      	cmp	r2, r3
 8007400:	d915      	bls.n	800742e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	68da      	ldr	r2, [r3, #12]
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	691b      	ldr	r3, [r3, #16]
 800740a:	1ad2      	subs	r2, r2, r3
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	68db      	ldr	r3, [r3, #12]
 8007414:	b29b      	uxth	r3, r3
 8007416:	461a      	mov	r2, r3
 8007418:	6879      	ldr	r1, [r7, #4]
 800741a:	68f8      	ldr	r0, [r7, #12]
 800741c:	f000 fec1 	bl	80081a2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007420:	2300      	movs	r3, #0
 8007422:	2200      	movs	r2, #0
 8007424:	2100      	movs	r1, #0
 8007426:	68f8      	ldr	r0, [r7, #12]
 8007428:	f001 fb3e 	bl	8008aa8 <USBD_LL_PrepareReceive>
 800742c:	e04e      	b.n	80074cc <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	689b      	ldr	r3, [r3, #8]
 8007432:	697a      	ldr	r2, [r7, #20]
 8007434:	6912      	ldr	r2, [r2, #16]
 8007436:	fbb3 f1f2 	udiv	r1, r3, r2
 800743a:	fb01 f202 	mul.w	r2, r1, r2
 800743e:	1a9b      	subs	r3, r3, r2
 8007440:	2b00      	cmp	r3, #0
 8007442:	d11c      	bne.n	800747e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	689a      	ldr	r2, [r3, #8]
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800744c:	429a      	cmp	r2, r3
 800744e:	d316      	bcc.n	800747e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	689a      	ldr	r2, [r3, #8]
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800745a:	429a      	cmp	r2, r3
 800745c:	d20f      	bcs.n	800747e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800745e:	2200      	movs	r2, #0
 8007460:	2100      	movs	r1, #0
 8007462:	68f8      	ldr	r0, [r7, #12]
 8007464:	f000 fe9d 	bl	80081a2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2200      	movs	r2, #0
 800746c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007470:	2300      	movs	r3, #0
 8007472:	2200      	movs	r2, #0
 8007474:	2100      	movs	r1, #0
 8007476:	68f8      	ldr	r0, [r7, #12]
 8007478:	f001 fb16 	bl	8008aa8 <USBD_LL_PrepareReceive>
 800747c:	e026      	b.n	80074cc <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007484:	68db      	ldr	r3, [r3, #12]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d00a      	beq.n	80074a0 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007490:	2b03      	cmp	r3, #3
 8007492:	d105      	bne.n	80074a0 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800749a:	68db      	ldr	r3, [r3, #12]
 800749c:	68f8      	ldr	r0, [r7, #12]
 800749e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80074a0:	2180      	movs	r1, #128	; 0x80
 80074a2:	68f8      	ldr	r0, [r7, #12]
 80074a4:	f001 fa54 	bl	8008950 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80074a8:	68f8      	ldr	r0, [r7, #12]
 80074aa:	f000 fecf 	bl	800824c <USBD_CtlReceiveStatus>
 80074ae:	e00d      	b.n	80074cc <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80074b6:	2b04      	cmp	r3, #4
 80074b8:	d004      	beq.n	80074c4 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d103      	bne.n	80074cc <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80074c4:	2180      	movs	r1, #128	; 0x80
 80074c6:	68f8      	ldr	r0, [r7, #12]
 80074c8:	f001 fa42 	bl	8008950 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80074d2:	2b01      	cmp	r3, #1
 80074d4:	d11d      	bne.n	8007512 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80074d6:	68f8      	ldr	r0, [r7, #12]
 80074d8:	f7ff fe81 	bl	80071de <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2200      	movs	r2, #0
 80074e0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80074e4:	e015      	b.n	8007512 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074ec:	695b      	ldr	r3, [r3, #20]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d00d      	beq.n	800750e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80074f8:	2b03      	cmp	r3, #3
 80074fa:	d108      	bne.n	800750e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007502:	695b      	ldr	r3, [r3, #20]
 8007504:	7afa      	ldrb	r2, [r7, #11]
 8007506:	4611      	mov	r1, r2
 8007508:	68f8      	ldr	r0, [r7, #12]
 800750a:	4798      	blx	r3
 800750c:	e001      	b.n	8007512 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800750e:	2302      	movs	r3, #2
 8007510:	e000      	b.n	8007514 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007512:	2300      	movs	r3, #0
}
 8007514:	4618      	mov	r0, r3
 8007516:	3718      	adds	r7, #24
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}

0800751c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b082      	sub	sp, #8
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007524:	2340      	movs	r3, #64	; 0x40
 8007526:	2200      	movs	r2, #0
 8007528:	2100      	movs	r1, #0
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f001 f9cb 	bl	80088c6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2201      	movs	r2, #1
 8007534:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2240      	movs	r2, #64	; 0x40
 800753c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007540:	2340      	movs	r3, #64	; 0x40
 8007542:	2200      	movs	r2, #0
 8007544:	2180      	movs	r1, #128	; 0x80
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f001 f9bd 	bl	80088c6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2201      	movs	r2, #1
 8007550:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2240      	movs	r2, #64	; 0x40
 8007556:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2201      	movs	r2, #1
 800755c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2200      	movs	r2, #0
 8007564:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2200      	movs	r2, #0
 800756c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2200      	movs	r2, #0
 8007572:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800757c:	2b00      	cmp	r3, #0
 800757e:	d009      	beq.n	8007594 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	687a      	ldr	r2, [r7, #4]
 800758a:	6852      	ldr	r2, [r2, #4]
 800758c:	b2d2      	uxtb	r2, r2
 800758e:	4611      	mov	r1, r2
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	4798      	blx	r3
  }

  return USBD_OK;
 8007594:	2300      	movs	r3, #0
}
 8007596:	4618      	mov	r0, r3
 8007598:	3708      	adds	r7, #8
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}

0800759e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800759e:	b480      	push	{r7}
 80075a0:	b083      	sub	sp, #12
 80075a2:	af00      	add	r7, sp, #0
 80075a4:	6078      	str	r0, [r7, #4]
 80075a6:	460b      	mov	r3, r1
 80075a8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	78fa      	ldrb	r2, [r7, #3]
 80075ae:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80075b0:	2300      	movs	r3, #0
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	370c      	adds	r7, #12
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bc80      	pop	{r7}
 80075ba:	4770      	bx	lr

080075bc <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80075bc:	b480      	push	{r7}
 80075be:	b083      	sub	sp, #12
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2204      	movs	r2, #4
 80075d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80075d8:	2300      	movs	r3, #0
}
 80075da:	4618      	mov	r0, r3
 80075dc:	370c      	adds	r7, #12
 80075de:	46bd      	mov	sp, r7
 80075e0:	bc80      	pop	{r7}
 80075e2:	4770      	bx	lr

080075e4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b083      	sub	sp, #12
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075f2:	2b04      	cmp	r3, #4
 80075f4:	d105      	bne.n	8007602 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007602:	2300      	movs	r3, #0
}
 8007604:	4618      	mov	r0, r3
 8007606:	370c      	adds	r7, #12
 8007608:	46bd      	mov	sp, r7
 800760a:	bc80      	pop	{r7}
 800760c:	4770      	bx	lr

0800760e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800760e:	b580      	push	{r7, lr}
 8007610:	b082      	sub	sp, #8
 8007612:	af00      	add	r7, sp, #0
 8007614:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800761c:	2b03      	cmp	r3, #3
 800761e:	d10b      	bne.n	8007638 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007626:	69db      	ldr	r3, [r3, #28]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d005      	beq.n	8007638 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007632:	69db      	ldr	r3, [r3, #28]
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007638:	2300      	movs	r3, #0
}
 800763a:	4618      	mov	r0, r3
 800763c:	3708      	adds	r7, #8
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}
	...

08007644 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b084      	sub	sp, #16
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800764e:	2300      	movs	r3, #0
 8007650:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800765a:	2b40      	cmp	r3, #64	; 0x40
 800765c:	d005      	beq.n	800766a <USBD_StdDevReq+0x26>
 800765e:	2b40      	cmp	r3, #64	; 0x40
 8007660:	d84f      	bhi.n	8007702 <USBD_StdDevReq+0xbe>
 8007662:	2b00      	cmp	r3, #0
 8007664:	d009      	beq.n	800767a <USBD_StdDevReq+0x36>
 8007666:	2b20      	cmp	r3, #32
 8007668:	d14b      	bne.n	8007702 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007670:	689b      	ldr	r3, [r3, #8]
 8007672:	6839      	ldr	r1, [r7, #0]
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	4798      	blx	r3
      break;
 8007678:	e048      	b.n	800770c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	785b      	ldrb	r3, [r3, #1]
 800767e:	2b09      	cmp	r3, #9
 8007680:	d839      	bhi.n	80076f6 <USBD_StdDevReq+0xb2>
 8007682:	a201      	add	r2, pc, #4	; (adr r2, 8007688 <USBD_StdDevReq+0x44>)
 8007684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007688:	080076d9 	.word	0x080076d9
 800768c:	080076ed 	.word	0x080076ed
 8007690:	080076f7 	.word	0x080076f7
 8007694:	080076e3 	.word	0x080076e3
 8007698:	080076f7 	.word	0x080076f7
 800769c:	080076bb 	.word	0x080076bb
 80076a0:	080076b1 	.word	0x080076b1
 80076a4:	080076f7 	.word	0x080076f7
 80076a8:	080076cf 	.word	0x080076cf
 80076ac:	080076c5 	.word	0x080076c5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80076b0:	6839      	ldr	r1, [r7, #0]
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f000 f9dc 	bl	8007a70 <USBD_GetDescriptor>
          break;
 80076b8:	e022      	b.n	8007700 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80076ba:	6839      	ldr	r1, [r7, #0]
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f000 fb3f 	bl	8007d40 <USBD_SetAddress>
          break;
 80076c2:	e01d      	b.n	8007700 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80076c4:	6839      	ldr	r1, [r7, #0]
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f000 fb7e 	bl	8007dc8 <USBD_SetConfig>
          break;
 80076cc:	e018      	b.n	8007700 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80076ce:	6839      	ldr	r1, [r7, #0]
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f000 fc07 	bl	8007ee4 <USBD_GetConfig>
          break;
 80076d6:	e013      	b.n	8007700 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80076d8:	6839      	ldr	r1, [r7, #0]
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f000 fc37 	bl	8007f4e <USBD_GetStatus>
          break;
 80076e0:	e00e      	b.n	8007700 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80076e2:	6839      	ldr	r1, [r7, #0]
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f000 fc65 	bl	8007fb4 <USBD_SetFeature>
          break;
 80076ea:	e009      	b.n	8007700 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80076ec:	6839      	ldr	r1, [r7, #0]
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 fc74 	bl	8007fdc <USBD_ClrFeature>
          break;
 80076f4:	e004      	b.n	8007700 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80076f6:	6839      	ldr	r1, [r7, #0]
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f000 fccc 	bl	8008096 <USBD_CtlError>
          break;
 80076fe:	bf00      	nop
      }
      break;
 8007700:	e004      	b.n	800770c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007702:	6839      	ldr	r1, [r7, #0]
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f000 fcc6 	bl	8008096 <USBD_CtlError>
      break;
 800770a:	bf00      	nop
  }

  return ret;
 800770c:	7bfb      	ldrb	r3, [r7, #15]
}
 800770e:	4618      	mov	r0, r3
 8007710:	3710      	adds	r7, #16
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}
 8007716:	bf00      	nop

08007718 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b084      	sub	sp, #16
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
 8007720:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007722:	2300      	movs	r3, #0
 8007724:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	781b      	ldrb	r3, [r3, #0]
 800772a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800772e:	2b40      	cmp	r3, #64	; 0x40
 8007730:	d005      	beq.n	800773e <USBD_StdItfReq+0x26>
 8007732:	2b40      	cmp	r3, #64	; 0x40
 8007734:	d82e      	bhi.n	8007794 <USBD_StdItfReq+0x7c>
 8007736:	2b00      	cmp	r3, #0
 8007738:	d001      	beq.n	800773e <USBD_StdItfReq+0x26>
 800773a:	2b20      	cmp	r3, #32
 800773c:	d12a      	bne.n	8007794 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007744:	3b01      	subs	r3, #1
 8007746:	2b02      	cmp	r3, #2
 8007748:	d81d      	bhi.n	8007786 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	889b      	ldrh	r3, [r3, #4]
 800774e:	b2db      	uxtb	r3, r3
 8007750:	2b01      	cmp	r3, #1
 8007752:	d813      	bhi.n	800777c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800775a:	689b      	ldr	r3, [r3, #8]
 800775c:	6839      	ldr	r1, [r7, #0]
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	4798      	blx	r3
 8007762:	4603      	mov	r3, r0
 8007764:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	88db      	ldrh	r3, [r3, #6]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d110      	bne.n	8007790 <USBD_StdItfReq+0x78>
 800776e:	7bfb      	ldrb	r3, [r7, #15]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d10d      	bne.n	8007790 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f000 fd56 	bl	8008226 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800777a:	e009      	b.n	8007790 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800777c:	6839      	ldr	r1, [r7, #0]
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f000 fc89 	bl	8008096 <USBD_CtlError>
          break;
 8007784:	e004      	b.n	8007790 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007786:	6839      	ldr	r1, [r7, #0]
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f000 fc84 	bl	8008096 <USBD_CtlError>
          break;
 800778e:	e000      	b.n	8007792 <USBD_StdItfReq+0x7a>
          break;
 8007790:	bf00      	nop
      }
      break;
 8007792:	e004      	b.n	800779e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007794:	6839      	ldr	r1, [r7, #0]
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 fc7d 	bl	8008096 <USBD_CtlError>
      break;
 800779c:	bf00      	nop
  }

  return USBD_OK;
 800779e:	2300      	movs	r3, #0
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3710      	adds	r7, #16
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}

080077a8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b084      	sub	sp, #16
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80077b2:	2300      	movs	r3, #0
 80077b4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	889b      	ldrh	r3, [r3, #4]
 80077ba:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	781b      	ldrb	r3, [r3, #0]
 80077c0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077c4:	2b40      	cmp	r3, #64	; 0x40
 80077c6:	d007      	beq.n	80077d8 <USBD_StdEPReq+0x30>
 80077c8:	2b40      	cmp	r3, #64	; 0x40
 80077ca:	f200 8146 	bhi.w	8007a5a <USBD_StdEPReq+0x2b2>
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d00a      	beq.n	80077e8 <USBD_StdEPReq+0x40>
 80077d2:	2b20      	cmp	r3, #32
 80077d4:	f040 8141 	bne.w	8007a5a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077de:	689b      	ldr	r3, [r3, #8]
 80077e0:	6839      	ldr	r1, [r7, #0]
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	4798      	blx	r3
      break;
 80077e6:	e13d      	b.n	8007a64 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	781b      	ldrb	r3, [r3, #0]
 80077ec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077f0:	2b20      	cmp	r3, #32
 80077f2:	d10a      	bne.n	800780a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077fa:	689b      	ldr	r3, [r3, #8]
 80077fc:	6839      	ldr	r1, [r7, #0]
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	4798      	blx	r3
 8007802:	4603      	mov	r3, r0
 8007804:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007806:	7bfb      	ldrb	r3, [r7, #15]
 8007808:	e12d      	b.n	8007a66 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	785b      	ldrb	r3, [r3, #1]
 800780e:	2b03      	cmp	r3, #3
 8007810:	d007      	beq.n	8007822 <USBD_StdEPReq+0x7a>
 8007812:	2b03      	cmp	r3, #3
 8007814:	f300 811b 	bgt.w	8007a4e <USBD_StdEPReq+0x2a6>
 8007818:	2b00      	cmp	r3, #0
 800781a:	d072      	beq.n	8007902 <USBD_StdEPReq+0x15a>
 800781c:	2b01      	cmp	r3, #1
 800781e:	d03a      	beq.n	8007896 <USBD_StdEPReq+0xee>
 8007820:	e115      	b.n	8007a4e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007828:	2b02      	cmp	r3, #2
 800782a:	d002      	beq.n	8007832 <USBD_StdEPReq+0x8a>
 800782c:	2b03      	cmp	r3, #3
 800782e:	d015      	beq.n	800785c <USBD_StdEPReq+0xb4>
 8007830:	e02b      	b.n	800788a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007832:	7bbb      	ldrb	r3, [r7, #14]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d00c      	beq.n	8007852 <USBD_StdEPReq+0xaa>
 8007838:	7bbb      	ldrb	r3, [r7, #14]
 800783a:	2b80      	cmp	r3, #128	; 0x80
 800783c:	d009      	beq.n	8007852 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800783e:	7bbb      	ldrb	r3, [r7, #14]
 8007840:	4619      	mov	r1, r3
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f001 f884 	bl	8008950 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007848:	2180      	movs	r1, #128	; 0x80
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f001 f880 	bl	8008950 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007850:	e020      	b.n	8007894 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007852:	6839      	ldr	r1, [r7, #0]
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f000 fc1e 	bl	8008096 <USBD_CtlError>
              break;
 800785a:	e01b      	b.n	8007894 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	885b      	ldrh	r3, [r3, #2]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d10e      	bne.n	8007882 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007864:	7bbb      	ldrb	r3, [r7, #14]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d00b      	beq.n	8007882 <USBD_StdEPReq+0xda>
 800786a:	7bbb      	ldrb	r3, [r7, #14]
 800786c:	2b80      	cmp	r3, #128	; 0x80
 800786e:	d008      	beq.n	8007882 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	88db      	ldrh	r3, [r3, #6]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d104      	bne.n	8007882 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007878:	7bbb      	ldrb	r3, [r7, #14]
 800787a:	4619      	mov	r1, r3
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f001 f867 	bl	8008950 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 fccf 	bl	8008226 <USBD_CtlSendStatus>

              break;
 8007888:	e004      	b.n	8007894 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800788a:	6839      	ldr	r1, [r7, #0]
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f000 fc02 	bl	8008096 <USBD_CtlError>
              break;
 8007892:	bf00      	nop
          }
          break;
 8007894:	e0e0      	b.n	8007a58 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800789c:	2b02      	cmp	r3, #2
 800789e:	d002      	beq.n	80078a6 <USBD_StdEPReq+0xfe>
 80078a0:	2b03      	cmp	r3, #3
 80078a2:	d015      	beq.n	80078d0 <USBD_StdEPReq+0x128>
 80078a4:	e026      	b.n	80078f4 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80078a6:	7bbb      	ldrb	r3, [r7, #14]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d00c      	beq.n	80078c6 <USBD_StdEPReq+0x11e>
 80078ac:	7bbb      	ldrb	r3, [r7, #14]
 80078ae:	2b80      	cmp	r3, #128	; 0x80
 80078b0:	d009      	beq.n	80078c6 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80078b2:	7bbb      	ldrb	r3, [r7, #14]
 80078b4:	4619      	mov	r1, r3
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f001 f84a 	bl	8008950 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80078bc:	2180      	movs	r1, #128	; 0x80
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f001 f846 	bl	8008950 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80078c4:	e01c      	b.n	8007900 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80078c6:	6839      	ldr	r1, [r7, #0]
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f000 fbe4 	bl	8008096 <USBD_CtlError>
              break;
 80078ce:	e017      	b.n	8007900 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	885b      	ldrh	r3, [r3, #2]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d112      	bne.n	80078fe <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80078d8:	7bbb      	ldrb	r3, [r7, #14]
 80078da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d004      	beq.n	80078ec <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80078e2:	7bbb      	ldrb	r3, [r7, #14]
 80078e4:	4619      	mov	r1, r3
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f001 f851 	bl	800898e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f000 fc9a 	bl	8008226 <USBD_CtlSendStatus>
              }
              break;
 80078f2:	e004      	b.n	80078fe <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80078f4:	6839      	ldr	r1, [r7, #0]
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 fbcd 	bl	8008096 <USBD_CtlError>
              break;
 80078fc:	e000      	b.n	8007900 <USBD_StdEPReq+0x158>
              break;
 80078fe:	bf00      	nop
          }
          break;
 8007900:	e0aa      	b.n	8007a58 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007908:	2b02      	cmp	r3, #2
 800790a:	d002      	beq.n	8007912 <USBD_StdEPReq+0x16a>
 800790c:	2b03      	cmp	r3, #3
 800790e:	d032      	beq.n	8007976 <USBD_StdEPReq+0x1ce>
 8007910:	e097      	b.n	8007a42 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007912:	7bbb      	ldrb	r3, [r7, #14]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d007      	beq.n	8007928 <USBD_StdEPReq+0x180>
 8007918:	7bbb      	ldrb	r3, [r7, #14]
 800791a:	2b80      	cmp	r3, #128	; 0x80
 800791c:	d004      	beq.n	8007928 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800791e:	6839      	ldr	r1, [r7, #0]
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f000 fbb8 	bl	8008096 <USBD_CtlError>
                break;
 8007926:	e091      	b.n	8007a4c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007928:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800792c:	2b00      	cmp	r3, #0
 800792e:	da0b      	bge.n	8007948 <USBD_StdEPReq+0x1a0>
 8007930:	7bbb      	ldrb	r3, [r7, #14]
 8007932:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007936:	4613      	mov	r3, r2
 8007938:	009b      	lsls	r3, r3, #2
 800793a:	4413      	add	r3, r2
 800793c:	009b      	lsls	r3, r3, #2
 800793e:	3310      	adds	r3, #16
 8007940:	687a      	ldr	r2, [r7, #4]
 8007942:	4413      	add	r3, r2
 8007944:	3304      	adds	r3, #4
 8007946:	e00b      	b.n	8007960 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007948:	7bbb      	ldrb	r3, [r7, #14]
 800794a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800794e:	4613      	mov	r3, r2
 8007950:	009b      	lsls	r3, r3, #2
 8007952:	4413      	add	r3, r2
 8007954:	009b      	lsls	r3, r3, #2
 8007956:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800795a:	687a      	ldr	r2, [r7, #4]
 800795c:	4413      	add	r3, r2
 800795e:	3304      	adds	r3, #4
 8007960:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	2200      	movs	r2, #0
 8007966:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	2202      	movs	r2, #2
 800796c:	4619      	mov	r1, r3
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f000 fbfb 	bl	800816a <USBD_CtlSendData>
              break;
 8007974:	e06a      	b.n	8007a4c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007976:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800797a:	2b00      	cmp	r3, #0
 800797c:	da11      	bge.n	80079a2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800797e:	7bbb      	ldrb	r3, [r7, #14]
 8007980:	f003 020f 	and.w	r2, r3, #15
 8007984:	6879      	ldr	r1, [r7, #4]
 8007986:	4613      	mov	r3, r2
 8007988:	009b      	lsls	r3, r3, #2
 800798a:	4413      	add	r3, r2
 800798c:	009b      	lsls	r3, r3, #2
 800798e:	440b      	add	r3, r1
 8007990:	3318      	adds	r3, #24
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d117      	bne.n	80079c8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007998:	6839      	ldr	r1, [r7, #0]
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 fb7b 	bl	8008096 <USBD_CtlError>
                  break;
 80079a0:	e054      	b.n	8007a4c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80079a2:	7bbb      	ldrb	r3, [r7, #14]
 80079a4:	f003 020f 	and.w	r2, r3, #15
 80079a8:	6879      	ldr	r1, [r7, #4]
 80079aa:	4613      	mov	r3, r2
 80079ac:	009b      	lsls	r3, r3, #2
 80079ae:	4413      	add	r3, r2
 80079b0:	009b      	lsls	r3, r3, #2
 80079b2:	440b      	add	r3, r1
 80079b4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d104      	bne.n	80079c8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80079be:	6839      	ldr	r1, [r7, #0]
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f000 fb68 	bl	8008096 <USBD_CtlError>
                  break;
 80079c6:	e041      	b.n	8007a4c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	da0b      	bge.n	80079e8 <USBD_StdEPReq+0x240>
 80079d0:	7bbb      	ldrb	r3, [r7, #14]
 80079d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80079d6:	4613      	mov	r3, r2
 80079d8:	009b      	lsls	r3, r3, #2
 80079da:	4413      	add	r3, r2
 80079dc:	009b      	lsls	r3, r3, #2
 80079de:	3310      	adds	r3, #16
 80079e0:	687a      	ldr	r2, [r7, #4]
 80079e2:	4413      	add	r3, r2
 80079e4:	3304      	adds	r3, #4
 80079e6:	e00b      	b.n	8007a00 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80079e8:	7bbb      	ldrb	r3, [r7, #14]
 80079ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079ee:	4613      	mov	r3, r2
 80079f0:	009b      	lsls	r3, r3, #2
 80079f2:	4413      	add	r3, r2
 80079f4:	009b      	lsls	r3, r3, #2
 80079f6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80079fa:	687a      	ldr	r2, [r7, #4]
 80079fc:	4413      	add	r3, r2
 80079fe:	3304      	adds	r3, #4
 8007a00:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007a02:	7bbb      	ldrb	r3, [r7, #14]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d002      	beq.n	8007a0e <USBD_StdEPReq+0x266>
 8007a08:	7bbb      	ldrb	r3, [r7, #14]
 8007a0a:	2b80      	cmp	r3, #128	; 0x80
 8007a0c:	d103      	bne.n	8007a16 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	2200      	movs	r2, #0
 8007a12:	601a      	str	r2, [r3, #0]
 8007a14:	e00e      	b.n	8007a34 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007a16:	7bbb      	ldrb	r3, [r7, #14]
 8007a18:	4619      	mov	r1, r3
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f000 ffd6 	bl	80089cc <USBD_LL_IsStallEP>
 8007a20:	4603      	mov	r3, r0
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d003      	beq.n	8007a2e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	2201      	movs	r2, #1
 8007a2a:	601a      	str	r2, [r3, #0]
 8007a2c:	e002      	b.n	8007a34 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	2200      	movs	r2, #0
 8007a32:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	2202      	movs	r2, #2
 8007a38:	4619      	mov	r1, r3
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 fb95 	bl	800816a <USBD_CtlSendData>
              break;
 8007a40:	e004      	b.n	8007a4c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007a42:	6839      	ldr	r1, [r7, #0]
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f000 fb26 	bl	8008096 <USBD_CtlError>
              break;
 8007a4a:	bf00      	nop
          }
          break;
 8007a4c:	e004      	b.n	8007a58 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007a4e:	6839      	ldr	r1, [r7, #0]
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f000 fb20 	bl	8008096 <USBD_CtlError>
          break;
 8007a56:	bf00      	nop
      }
      break;
 8007a58:	e004      	b.n	8007a64 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007a5a:	6839      	ldr	r1, [r7, #0]
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f000 fb1a 	bl	8008096 <USBD_CtlError>
      break;
 8007a62:	bf00      	nop
  }

  return ret;
 8007a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3710      	adds	r7, #16
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}
	...

08007a70 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b084      	sub	sp, #16
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007a82:	2300      	movs	r3, #0
 8007a84:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	885b      	ldrh	r3, [r3, #2]
 8007a8a:	0a1b      	lsrs	r3, r3, #8
 8007a8c:	b29b      	uxth	r3, r3
 8007a8e:	3b01      	subs	r3, #1
 8007a90:	2b06      	cmp	r3, #6
 8007a92:	f200 8128 	bhi.w	8007ce6 <USBD_GetDescriptor+0x276>
 8007a96:	a201      	add	r2, pc, #4	; (adr r2, 8007a9c <USBD_GetDescriptor+0x2c>)
 8007a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a9c:	08007ab9 	.word	0x08007ab9
 8007aa0:	08007ad1 	.word	0x08007ad1
 8007aa4:	08007b11 	.word	0x08007b11
 8007aa8:	08007ce7 	.word	0x08007ce7
 8007aac:	08007ce7 	.word	0x08007ce7
 8007ab0:	08007c87 	.word	0x08007c87
 8007ab4:	08007cb3 	.word	0x08007cb3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	687a      	ldr	r2, [r7, #4]
 8007ac2:	7c12      	ldrb	r2, [r2, #16]
 8007ac4:	f107 0108 	add.w	r1, r7, #8
 8007ac8:	4610      	mov	r0, r2
 8007aca:	4798      	blx	r3
 8007acc:	60f8      	str	r0, [r7, #12]
      break;
 8007ace:	e112      	b.n	8007cf6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	7c1b      	ldrb	r3, [r3, #16]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d10d      	bne.n	8007af4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ae0:	f107 0208 	add.w	r2, r7, #8
 8007ae4:	4610      	mov	r0, r2
 8007ae6:	4798      	blx	r3
 8007ae8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	3301      	adds	r3, #1
 8007aee:	2202      	movs	r2, #2
 8007af0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007af2:	e100      	b.n	8007cf6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007afc:	f107 0208 	add.w	r2, r7, #8
 8007b00:	4610      	mov	r0, r2
 8007b02:	4798      	blx	r3
 8007b04:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	3301      	adds	r3, #1
 8007b0a:	2202      	movs	r2, #2
 8007b0c:	701a      	strb	r2, [r3, #0]
      break;
 8007b0e:	e0f2      	b.n	8007cf6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	885b      	ldrh	r3, [r3, #2]
 8007b14:	b2db      	uxtb	r3, r3
 8007b16:	2b05      	cmp	r3, #5
 8007b18:	f200 80ac 	bhi.w	8007c74 <USBD_GetDescriptor+0x204>
 8007b1c:	a201      	add	r2, pc, #4	; (adr r2, 8007b24 <USBD_GetDescriptor+0xb4>)
 8007b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b22:	bf00      	nop
 8007b24:	08007b3d 	.word	0x08007b3d
 8007b28:	08007b71 	.word	0x08007b71
 8007b2c:	08007ba5 	.word	0x08007ba5
 8007b30:	08007bd9 	.word	0x08007bd9
 8007b34:	08007c0d 	.word	0x08007c0d
 8007b38:	08007c41 	.word	0x08007c41
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d00b      	beq.n	8007b60 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b4e:	685b      	ldr	r3, [r3, #4]
 8007b50:	687a      	ldr	r2, [r7, #4]
 8007b52:	7c12      	ldrb	r2, [r2, #16]
 8007b54:	f107 0108 	add.w	r1, r7, #8
 8007b58:	4610      	mov	r0, r2
 8007b5a:	4798      	blx	r3
 8007b5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b5e:	e091      	b.n	8007c84 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b60:	6839      	ldr	r1, [r7, #0]
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f000 fa97 	bl	8008096 <USBD_CtlError>
            err++;
 8007b68:	7afb      	ldrb	r3, [r7, #11]
 8007b6a:	3301      	adds	r3, #1
 8007b6c:	72fb      	strb	r3, [r7, #11]
          break;
 8007b6e:	e089      	b.n	8007c84 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b76:	689b      	ldr	r3, [r3, #8]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d00b      	beq.n	8007b94 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b82:	689b      	ldr	r3, [r3, #8]
 8007b84:	687a      	ldr	r2, [r7, #4]
 8007b86:	7c12      	ldrb	r2, [r2, #16]
 8007b88:	f107 0108 	add.w	r1, r7, #8
 8007b8c:	4610      	mov	r0, r2
 8007b8e:	4798      	blx	r3
 8007b90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b92:	e077      	b.n	8007c84 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b94:	6839      	ldr	r1, [r7, #0]
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 fa7d 	bl	8008096 <USBD_CtlError>
            err++;
 8007b9c:	7afb      	ldrb	r3, [r7, #11]
 8007b9e:	3301      	adds	r3, #1
 8007ba0:	72fb      	strb	r3, [r7, #11]
          break;
 8007ba2:	e06f      	b.n	8007c84 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007baa:	68db      	ldr	r3, [r3, #12]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d00b      	beq.n	8007bc8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007bb6:	68db      	ldr	r3, [r3, #12]
 8007bb8:	687a      	ldr	r2, [r7, #4]
 8007bba:	7c12      	ldrb	r2, [r2, #16]
 8007bbc:	f107 0108 	add.w	r1, r7, #8
 8007bc0:	4610      	mov	r0, r2
 8007bc2:	4798      	blx	r3
 8007bc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bc6:	e05d      	b.n	8007c84 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007bc8:	6839      	ldr	r1, [r7, #0]
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f000 fa63 	bl	8008096 <USBD_CtlError>
            err++;
 8007bd0:	7afb      	ldrb	r3, [r7, #11]
 8007bd2:	3301      	adds	r3, #1
 8007bd4:	72fb      	strb	r3, [r7, #11]
          break;
 8007bd6:	e055      	b.n	8007c84 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007bde:	691b      	ldr	r3, [r3, #16]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d00b      	beq.n	8007bfc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007bea:	691b      	ldr	r3, [r3, #16]
 8007bec:	687a      	ldr	r2, [r7, #4]
 8007bee:	7c12      	ldrb	r2, [r2, #16]
 8007bf0:	f107 0108 	add.w	r1, r7, #8
 8007bf4:	4610      	mov	r0, r2
 8007bf6:	4798      	blx	r3
 8007bf8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bfa:	e043      	b.n	8007c84 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007bfc:	6839      	ldr	r1, [r7, #0]
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f000 fa49 	bl	8008096 <USBD_CtlError>
            err++;
 8007c04:	7afb      	ldrb	r3, [r7, #11]
 8007c06:	3301      	adds	r3, #1
 8007c08:	72fb      	strb	r3, [r7, #11]
          break;
 8007c0a:	e03b      	b.n	8007c84 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c12:	695b      	ldr	r3, [r3, #20]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d00b      	beq.n	8007c30 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c1e:	695b      	ldr	r3, [r3, #20]
 8007c20:	687a      	ldr	r2, [r7, #4]
 8007c22:	7c12      	ldrb	r2, [r2, #16]
 8007c24:	f107 0108 	add.w	r1, r7, #8
 8007c28:	4610      	mov	r0, r2
 8007c2a:	4798      	blx	r3
 8007c2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c2e:	e029      	b.n	8007c84 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c30:	6839      	ldr	r1, [r7, #0]
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f000 fa2f 	bl	8008096 <USBD_CtlError>
            err++;
 8007c38:	7afb      	ldrb	r3, [r7, #11]
 8007c3a:	3301      	adds	r3, #1
 8007c3c:	72fb      	strb	r3, [r7, #11]
          break;
 8007c3e:	e021      	b.n	8007c84 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c46:	699b      	ldr	r3, [r3, #24]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d00b      	beq.n	8007c64 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c52:	699b      	ldr	r3, [r3, #24]
 8007c54:	687a      	ldr	r2, [r7, #4]
 8007c56:	7c12      	ldrb	r2, [r2, #16]
 8007c58:	f107 0108 	add.w	r1, r7, #8
 8007c5c:	4610      	mov	r0, r2
 8007c5e:	4798      	blx	r3
 8007c60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c62:	e00f      	b.n	8007c84 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c64:	6839      	ldr	r1, [r7, #0]
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f000 fa15 	bl	8008096 <USBD_CtlError>
            err++;
 8007c6c:	7afb      	ldrb	r3, [r7, #11]
 8007c6e:	3301      	adds	r3, #1
 8007c70:	72fb      	strb	r3, [r7, #11]
          break;
 8007c72:	e007      	b.n	8007c84 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007c74:	6839      	ldr	r1, [r7, #0]
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f000 fa0d 	bl	8008096 <USBD_CtlError>
          err++;
 8007c7c:	7afb      	ldrb	r3, [r7, #11]
 8007c7e:	3301      	adds	r3, #1
 8007c80:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007c82:	e038      	b.n	8007cf6 <USBD_GetDescriptor+0x286>
 8007c84:	e037      	b.n	8007cf6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	7c1b      	ldrb	r3, [r3, #16]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d109      	bne.n	8007ca2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c96:	f107 0208 	add.w	r2, r7, #8
 8007c9a:	4610      	mov	r0, r2
 8007c9c:	4798      	blx	r3
 8007c9e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007ca0:	e029      	b.n	8007cf6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007ca2:	6839      	ldr	r1, [r7, #0]
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f000 f9f6 	bl	8008096 <USBD_CtlError>
        err++;
 8007caa:	7afb      	ldrb	r3, [r7, #11]
 8007cac:	3301      	adds	r3, #1
 8007cae:	72fb      	strb	r3, [r7, #11]
      break;
 8007cb0:	e021      	b.n	8007cf6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	7c1b      	ldrb	r3, [r3, #16]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d10d      	bne.n	8007cd6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cc2:	f107 0208 	add.w	r2, r7, #8
 8007cc6:	4610      	mov	r0, r2
 8007cc8:	4798      	blx	r3
 8007cca:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	3301      	adds	r3, #1
 8007cd0:	2207      	movs	r2, #7
 8007cd2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007cd4:	e00f      	b.n	8007cf6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007cd6:	6839      	ldr	r1, [r7, #0]
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f000 f9dc 	bl	8008096 <USBD_CtlError>
        err++;
 8007cde:	7afb      	ldrb	r3, [r7, #11]
 8007ce0:	3301      	adds	r3, #1
 8007ce2:	72fb      	strb	r3, [r7, #11]
      break;
 8007ce4:	e007      	b.n	8007cf6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007ce6:	6839      	ldr	r1, [r7, #0]
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f000 f9d4 	bl	8008096 <USBD_CtlError>
      err++;
 8007cee:	7afb      	ldrb	r3, [r7, #11]
 8007cf0:	3301      	adds	r3, #1
 8007cf2:	72fb      	strb	r3, [r7, #11]
      break;
 8007cf4:	bf00      	nop
  }

  if (err != 0U)
 8007cf6:	7afb      	ldrb	r3, [r7, #11]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d11c      	bne.n	8007d36 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007cfc:	893b      	ldrh	r3, [r7, #8]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d011      	beq.n	8007d26 <USBD_GetDescriptor+0x2b6>
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	88db      	ldrh	r3, [r3, #6]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d00d      	beq.n	8007d26 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	88da      	ldrh	r2, [r3, #6]
 8007d0e:	893b      	ldrh	r3, [r7, #8]
 8007d10:	4293      	cmp	r3, r2
 8007d12:	bf28      	it	cs
 8007d14:	4613      	movcs	r3, r2
 8007d16:	b29b      	uxth	r3, r3
 8007d18:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007d1a:	893b      	ldrh	r3, [r7, #8]
 8007d1c:	461a      	mov	r2, r3
 8007d1e:	68f9      	ldr	r1, [r7, #12]
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f000 fa22 	bl	800816a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	88db      	ldrh	r3, [r3, #6]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d104      	bne.n	8007d38 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f000 fa79 	bl	8008226 <USBD_CtlSendStatus>
 8007d34:	e000      	b.n	8007d38 <USBD_GetDescriptor+0x2c8>
    return;
 8007d36:	bf00      	nop
    }
  }
}
 8007d38:	3710      	adds	r7, #16
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
 8007d3e:	bf00      	nop

08007d40 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b084      	sub	sp, #16
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
 8007d48:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	889b      	ldrh	r3, [r3, #4]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d130      	bne.n	8007db4 <USBD_SetAddress+0x74>
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	88db      	ldrh	r3, [r3, #6]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d12c      	bne.n	8007db4 <USBD_SetAddress+0x74>
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	885b      	ldrh	r3, [r3, #2]
 8007d5e:	2b7f      	cmp	r3, #127	; 0x7f
 8007d60:	d828      	bhi.n	8007db4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	885b      	ldrh	r3, [r3, #2]
 8007d66:	b2db      	uxtb	r3, r3
 8007d68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d6c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d74:	2b03      	cmp	r3, #3
 8007d76:	d104      	bne.n	8007d82 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007d78:	6839      	ldr	r1, [r7, #0]
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f000 f98b 	bl	8008096 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d80:	e01d      	b.n	8007dbe <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	7bfa      	ldrb	r2, [r7, #15]
 8007d86:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007d8a:	7bfb      	ldrb	r3, [r7, #15]
 8007d8c:	4619      	mov	r1, r3
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f000 fe48 	bl	8008a24 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f000 fa46 	bl	8008226 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007d9a:	7bfb      	ldrb	r3, [r7, #15]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d004      	beq.n	8007daa <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2202      	movs	r2, #2
 8007da4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007da8:	e009      	b.n	8007dbe <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2201      	movs	r2, #1
 8007dae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007db2:	e004      	b.n	8007dbe <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007db4:	6839      	ldr	r1, [r7, #0]
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f000 f96d 	bl	8008096 <USBD_CtlError>
  }
}
 8007dbc:	bf00      	nop
 8007dbe:	bf00      	nop
 8007dc0:	3710      	adds	r7, #16
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}
	...

08007dc8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b082      	sub	sp, #8
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
 8007dd0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	885b      	ldrh	r3, [r3, #2]
 8007dd6:	b2da      	uxtb	r2, r3
 8007dd8:	4b41      	ldr	r3, [pc, #260]	; (8007ee0 <USBD_SetConfig+0x118>)
 8007dda:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007ddc:	4b40      	ldr	r3, [pc, #256]	; (8007ee0 <USBD_SetConfig+0x118>)
 8007dde:	781b      	ldrb	r3, [r3, #0]
 8007de0:	2b01      	cmp	r3, #1
 8007de2:	d904      	bls.n	8007dee <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007de4:	6839      	ldr	r1, [r7, #0]
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f000 f955 	bl	8008096 <USBD_CtlError>
 8007dec:	e075      	b.n	8007eda <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007df4:	2b02      	cmp	r3, #2
 8007df6:	d002      	beq.n	8007dfe <USBD_SetConfig+0x36>
 8007df8:	2b03      	cmp	r3, #3
 8007dfa:	d023      	beq.n	8007e44 <USBD_SetConfig+0x7c>
 8007dfc:	e062      	b.n	8007ec4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007dfe:	4b38      	ldr	r3, [pc, #224]	; (8007ee0 <USBD_SetConfig+0x118>)
 8007e00:	781b      	ldrb	r3, [r3, #0]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d01a      	beq.n	8007e3c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007e06:	4b36      	ldr	r3, [pc, #216]	; (8007ee0 <USBD_SetConfig+0x118>)
 8007e08:	781b      	ldrb	r3, [r3, #0]
 8007e0a:	461a      	mov	r2, r3
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2203      	movs	r2, #3
 8007e14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007e18:	4b31      	ldr	r3, [pc, #196]	; (8007ee0 <USBD_SetConfig+0x118>)
 8007e1a:	781b      	ldrb	r3, [r3, #0]
 8007e1c:	4619      	mov	r1, r3
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f7ff f9e7 	bl	80071f2 <USBD_SetClassConfig>
 8007e24:	4603      	mov	r3, r0
 8007e26:	2b02      	cmp	r3, #2
 8007e28:	d104      	bne.n	8007e34 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007e2a:	6839      	ldr	r1, [r7, #0]
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f000 f932 	bl	8008096 <USBD_CtlError>
            return;
 8007e32:	e052      	b.n	8007eda <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f000 f9f6 	bl	8008226 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007e3a:	e04e      	b.n	8007eda <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f000 f9f2 	bl	8008226 <USBD_CtlSendStatus>
        break;
 8007e42:	e04a      	b.n	8007eda <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007e44:	4b26      	ldr	r3, [pc, #152]	; (8007ee0 <USBD_SetConfig+0x118>)
 8007e46:	781b      	ldrb	r3, [r3, #0]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d112      	bne.n	8007e72 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2202      	movs	r2, #2
 8007e50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007e54:	4b22      	ldr	r3, [pc, #136]	; (8007ee0 <USBD_SetConfig+0x118>)
 8007e56:	781b      	ldrb	r3, [r3, #0]
 8007e58:	461a      	mov	r2, r3
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007e5e:	4b20      	ldr	r3, [pc, #128]	; (8007ee0 <USBD_SetConfig+0x118>)
 8007e60:	781b      	ldrb	r3, [r3, #0]
 8007e62:	4619      	mov	r1, r3
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f7ff f9e3 	bl	8007230 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f000 f9db 	bl	8008226 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007e70:	e033      	b.n	8007eda <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007e72:	4b1b      	ldr	r3, [pc, #108]	; (8007ee0 <USBD_SetConfig+0x118>)
 8007e74:	781b      	ldrb	r3, [r3, #0]
 8007e76:	461a      	mov	r2, r3
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	685b      	ldr	r3, [r3, #4]
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	d01d      	beq.n	8007ebc <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	685b      	ldr	r3, [r3, #4]
 8007e84:	b2db      	uxtb	r3, r3
 8007e86:	4619      	mov	r1, r3
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f7ff f9d1 	bl	8007230 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007e8e:	4b14      	ldr	r3, [pc, #80]	; (8007ee0 <USBD_SetConfig+0x118>)
 8007e90:	781b      	ldrb	r3, [r3, #0]
 8007e92:	461a      	mov	r2, r3
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007e98:	4b11      	ldr	r3, [pc, #68]	; (8007ee0 <USBD_SetConfig+0x118>)
 8007e9a:	781b      	ldrb	r3, [r3, #0]
 8007e9c:	4619      	mov	r1, r3
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f7ff f9a7 	bl	80071f2 <USBD_SetClassConfig>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	2b02      	cmp	r3, #2
 8007ea8:	d104      	bne.n	8007eb4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007eaa:	6839      	ldr	r1, [r7, #0]
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f000 f8f2 	bl	8008096 <USBD_CtlError>
            return;
 8007eb2:	e012      	b.n	8007eda <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f000 f9b6 	bl	8008226 <USBD_CtlSendStatus>
        break;
 8007eba:	e00e      	b.n	8007eda <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f000 f9b2 	bl	8008226 <USBD_CtlSendStatus>
        break;
 8007ec2:	e00a      	b.n	8007eda <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007ec4:	6839      	ldr	r1, [r7, #0]
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f000 f8e5 	bl	8008096 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007ecc:	4b04      	ldr	r3, [pc, #16]	; (8007ee0 <USBD_SetConfig+0x118>)
 8007ece:	781b      	ldrb	r3, [r3, #0]
 8007ed0:	4619      	mov	r1, r3
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f7ff f9ac 	bl	8007230 <USBD_ClrClassConfig>
        break;
 8007ed8:	bf00      	nop
    }
  }
}
 8007eda:	3708      	adds	r7, #8
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}
 8007ee0:	2000028c 	.word	0x2000028c

08007ee4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b082      	sub	sp, #8
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	88db      	ldrh	r3, [r3, #6]
 8007ef2:	2b01      	cmp	r3, #1
 8007ef4:	d004      	beq.n	8007f00 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007ef6:	6839      	ldr	r1, [r7, #0]
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f000 f8cc 	bl	8008096 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007efe:	e022      	b.n	8007f46 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f06:	2b02      	cmp	r3, #2
 8007f08:	dc02      	bgt.n	8007f10 <USBD_GetConfig+0x2c>
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	dc03      	bgt.n	8007f16 <USBD_GetConfig+0x32>
 8007f0e:	e015      	b.n	8007f3c <USBD_GetConfig+0x58>
 8007f10:	2b03      	cmp	r3, #3
 8007f12:	d00b      	beq.n	8007f2c <USBD_GetConfig+0x48>
 8007f14:	e012      	b.n	8007f3c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	3308      	adds	r3, #8
 8007f20:	2201      	movs	r2, #1
 8007f22:	4619      	mov	r1, r3
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f000 f920 	bl	800816a <USBD_CtlSendData>
        break;
 8007f2a:	e00c      	b.n	8007f46 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	3304      	adds	r3, #4
 8007f30:	2201      	movs	r2, #1
 8007f32:	4619      	mov	r1, r3
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f000 f918 	bl	800816a <USBD_CtlSendData>
        break;
 8007f3a:	e004      	b.n	8007f46 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007f3c:	6839      	ldr	r1, [r7, #0]
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f000 f8a9 	bl	8008096 <USBD_CtlError>
        break;
 8007f44:	bf00      	nop
}
 8007f46:	bf00      	nop
 8007f48:	3708      	adds	r7, #8
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}

08007f4e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f4e:	b580      	push	{r7, lr}
 8007f50:	b082      	sub	sp, #8
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	6078      	str	r0, [r7, #4]
 8007f56:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f5e:	3b01      	subs	r3, #1
 8007f60:	2b02      	cmp	r3, #2
 8007f62:	d81e      	bhi.n	8007fa2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	88db      	ldrh	r3, [r3, #6]
 8007f68:	2b02      	cmp	r3, #2
 8007f6a:	d004      	beq.n	8007f76 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007f6c:	6839      	ldr	r1, [r7, #0]
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f000 f891 	bl	8008096 <USBD_CtlError>
        break;
 8007f74:	e01a      	b.n	8007fac <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2201      	movs	r2, #1
 8007f7a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d005      	beq.n	8007f92 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	68db      	ldr	r3, [r3, #12]
 8007f8a:	f043 0202 	orr.w	r2, r3, #2
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	330c      	adds	r3, #12
 8007f96:	2202      	movs	r2, #2
 8007f98:	4619      	mov	r1, r3
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f000 f8e5 	bl	800816a <USBD_CtlSendData>
      break;
 8007fa0:	e004      	b.n	8007fac <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007fa2:	6839      	ldr	r1, [r7, #0]
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f000 f876 	bl	8008096 <USBD_CtlError>
      break;
 8007faa:	bf00      	nop
  }
}
 8007fac:	bf00      	nop
 8007fae:	3708      	adds	r7, #8
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b082      	sub	sp, #8
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	885b      	ldrh	r3, [r3, #2]
 8007fc2:	2b01      	cmp	r3, #1
 8007fc4:	d106      	bne.n	8007fd4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2201      	movs	r2, #1
 8007fca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f000 f929 	bl	8008226 <USBD_CtlSendStatus>
  }
}
 8007fd4:	bf00      	nop
 8007fd6:	3708      	adds	r7, #8
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}

08007fdc <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b082      	sub	sp, #8
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
 8007fe4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fec:	3b01      	subs	r3, #1
 8007fee:	2b02      	cmp	r3, #2
 8007ff0:	d80b      	bhi.n	800800a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	885b      	ldrh	r3, [r3, #2]
 8007ff6:	2b01      	cmp	r3, #1
 8007ff8:	d10c      	bne.n	8008014 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f000 f90f 	bl	8008226 <USBD_CtlSendStatus>
      }
      break;
 8008008:	e004      	b.n	8008014 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800800a:	6839      	ldr	r1, [r7, #0]
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f000 f842 	bl	8008096 <USBD_CtlError>
      break;
 8008012:	e000      	b.n	8008016 <USBD_ClrFeature+0x3a>
      break;
 8008014:	bf00      	nop
  }
}
 8008016:	bf00      	nop
 8008018:	3708      	adds	r7, #8
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}

0800801e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800801e:	b480      	push	{r7}
 8008020:	b083      	sub	sp, #12
 8008022:	af00      	add	r7, sp, #0
 8008024:	6078      	str	r0, [r7, #4]
 8008026:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	781a      	ldrb	r2, [r3, #0]
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	785a      	ldrb	r2, [r3, #1]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	3302      	adds	r3, #2
 800803c:	781b      	ldrb	r3, [r3, #0]
 800803e:	b29a      	uxth	r2, r3
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	3303      	adds	r3, #3
 8008044:	781b      	ldrb	r3, [r3, #0]
 8008046:	b29b      	uxth	r3, r3
 8008048:	021b      	lsls	r3, r3, #8
 800804a:	b29b      	uxth	r3, r3
 800804c:	4413      	add	r3, r2
 800804e:	b29a      	uxth	r2, r3
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	3304      	adds	r3, #4
 8008058:	781b      	ldrb	r3, [r3, #0]
 800805a:	b29a      	uxth	r2, r3
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	3305      	adds	r3, #5
 8008060:	781b      	ldrb	r3, [r3, #0]
 8008062:	b29b      	uxth	r3, r3
 8008064:	021b      	lsls	r3, r3, #8
 8008066:	b29b      	uxth	r3, r3
 8008068:	4413      	add	r3, r2
 800806a:	b29a      	uxth	r2, r3
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	3306      	adds	r3, #6
 8008074:	781b      	ldrb	r3, [r3, #0]
 8008076:	b29a      	uxth	r2, r3
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	3307      	adds	r3, #7
 800807c:	781b      	ldrb	r3, [r3, #0]
 800807e:	b29b      	uxth	r3, r3
 8008080:	021b      	lsls	r3, r3, #8
 8008082:	b29b      	uxth	r3, r3
 8008084:	4413      	add	r3, r2
 8008086:	b29a      	uxth	r2, r3
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	80da      	strh	r2, [r3, #6]

}
 800808c:	bf00      	nop
 800808e:	370c      	adds	r7, #12
 8008090:	46bd      	mov	sp, r7
 8008092:	bc80      	pop	{r7}
 8008094:	4770      	bx	lr

08008096 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008096:	b580      	push	{r7, lr}
 8008098:	b082      	sub	sp, #8
 800809a:	af00      	add	r7, sp, #0
 800809c:	6078      	str	r0, [r7, #4]
 800809e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80080a0:	2180      	movs	r1, #128	; 0x80
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f000 fc54 	bl	8008950 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80080a8:	2100      	movs	r1, #0
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 fc50 	bl	8008950 <USBD_LL_StallEP>
}
 80080b0:	bf00      	nop
 80080b2:	3708      	adds	r7, #8
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}

080080b8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b086      	sub	sp, #24
 80080bc:	af00      	add	r7, sp, #0
 80080be:	60f8      	str	r0, [r7, #12]
 80080c0:	60b9      	str	r1, [r7, #8]
 80080c2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80080c4:	2300      	movs	r3, #0
 80080c6:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d032      	beq.n	8008134 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80080ce:	68f8      	ldr	r0, [r7, #12]
 80080d0:	f000 f834 	bl	800813c <USBD_GetLen>
 80080d4:	4603      	mov	r3, r0
 80080d6:	3301      	adds	r3, #1
 80080d8:	b29b      	uxth	r3, r3
 80080da:	005b      	lsls	r3, r3, #1
 80080dc:	b29a      	uxth	r2, r3
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80080e2:	7dfb      	ldrb	r3, [r7, #23]
 80080e4:	1c5a      	adds	r2, r3, #1
 80080e6:	75fa      	strb	r2, [r7, #23]
 80080e8:	461a      	mov	r2, r3
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	4413      	add	r3, r2
 80080ee:	687a      	ldr	r2, [r7, #4]
 80080f0:	7812      	ldrb	r2, [r2, #0]
 80080f2:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80080f4:	7dfb      	ldrb	r3, [r7, #23]
 80080f6:	1c5a      	adds	r2, r3, #1
 80080f8:	75fa      	strb	r2, [r7, #23]
 80080fa:	461a      	mov	r2, r3
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	4413      	add	r3, r2
 8008100:	2203      	movs	r2, #3
 8008102:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008104:	e012      	b.n	800812c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	1c5a      	adds	r2, r3, #1
 800810a:	60fa      	str	r2, [r7, #12]
 800810c:	7dfa      	ldrb	r2, [r7, #23]
 800810e:	1c51      	adds	r1, r2, #1
 8008110:	75f9      	strb	r1, [r7, #23]
 8008112:	4611      	mov	r1, r2
 8008114:	68ba      	ldr	r2, [r7, #8]
 8008116:	440a      	add	r2, r1
 8008118:	781b      	ldrb	r3, [r3, #0]
 800811a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800811c:	7dfb      	ldrb	r3, [r7, #23]
 800811e:	1c5a      	adds	r2, r3, #1
 8008120:	75fa      	strb	r2, [r7, #23]
 8008122:	461a      	mov	r2, r3
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	4413      	add	r3, r2
 8008128:	2200      	movs	r2, #0
 800812a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	781b      	ldrb	r3, [r3, #0]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d1e8      	bne.n	8008106 <USBD_GetString+0x4e>
    }
  }
}
 8008134:	bf00      	nop
 8008136:	3718      	adds	r7, #24
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}

0800813c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800813c:	b480      	push	{r7}
 800813e:	b085      	sub	sp, #20
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008144:	2300      	movs	r3, #0
 8008146:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008148:	e005      	b.n	8008156 <USBD_GetLen+0x1a>
  {
    len++;
 800814a:	7bfb      	ldrb	r3, [r7, #15]
 800814c:	3301      	adds	r3, #1
 800814e:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	3301      	adds	r3, #1
 8008154:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	781b      	ldrb	r3, [r3, #0]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d1f5      	bne.n	800814a <USBD_GetLen+0xe>
  }

  return len;
 800815e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008160:	4618      	mov	r0, r3
 8008162:	3714      	adds	r7, #20
 8008164:	46bd      	mov	sp, r7
 8008166:	bc80      	pop	{r7}
 8008168:	4770      	bx	lr

0800816a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800816a:	b580      	push	{r7, lr}
 800816c:	b084      	sub	sp, #16
 800816e:	af00      	add	r7, sp, #0
 8008170:	60f8      	str	r0, [r7, #12]
 8008172:	60b9      	str	r1, [r7, #8]
 8008174:	4613      	mov	r3, r2
 8008176:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	2202      	movs	r2, #2
 800817c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008180:	88fa      	ldrh	r2, [r7, #6]
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008186:	88fa      	ldrh	r2, [r7, #6]
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800818c:	88fb      	ldrh	r3, [r7, #6]
 800818e:	68ba      	ldr	r2, [r7, #8]
 8008190:	2100      	movs	r1, #0
 8008192:	68f8      	ldr	r0, [r7, #12]
 8008194:	f000 fc65 	bl	8008a62 <USBD_LL_Transmit>

  return USBD_OK;
 8008198:	2300      	movs	r3, #0
}
 800819a:	4618      	mov	r0, r3
 800819c:	3710      	adds	r7, #16
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}

080081a2 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80081a2:	b580      	push	{r7, lr}
 80081a4:	b084      	sub	sp, #16
 80081a6:	af00      	add	r7, sp, #0
 80081a8:	60f8      	str	r0, [r7, #12]
 80081aa:	60b9      	str	r1, [r7, #8]
 80081ac:	4613      	mov	r3, r2
 80081ae:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80081b0:	88fb      	ldrh	r3, [r7, #6]
 80081b2:	68ba      	ldr	r2, [r7, #8]
 80081b4:	2100      	movs	r1, #0
 80081b6:	68f8      	ldr	r0, [r7, #12]
 80081b8:	f000 fc53 	bl	8008a62 <USBD_LL_Transmit>

  return USBD_OK;
 80081bc:	2300      	movs	r3, #0
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3710      	adds	r7, #16
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}

080081c6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80081c6:	b580      	push	{r7, lr}
 80081c8:	b084      	sub	sp, #16
 80081ca:	af00      	add	r7, sp, #0
 80081cc:	60f8      	str	r0, [r7, #12]
 80081ce:	60b9      	str	r1, [r7, #8]
 80081d0:	4613      	mov	r3, r2
 80081d2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2203      	movs	r2, #3
 80081d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80081dc:	88fa      	ldrh	r2, [r7, #6]
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80081e4:	88fa      	ldrh	r2, [r7, #6]
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80081ec:	88fb      	ldrh	r3, [r7, #6]
 80081ee:	68ba      	ldr	r2, [r7, #8]
 80081f0:	2100      	movs	r1, #0
 80081f2:	68f8      	ldr	r0, [r7, #12]
 80081f4:	f000 fc58 	bl	8008aa8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80081f8:	2300      	movs	r3, #0
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3710      	adds	r7, #16
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}

08008202 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008202:	b580      	push	{r7, lr}
 8008204:	b084      	sub	sp, #16
 8008206:	af00      	add	r7, sp, #0
 8008208:	60f8      	str	r0, [r7, #12]
 800820a:	60b9      	str	r1, [r7, #8]
 800820c:	4613      	mov	r3, r2
 800820e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008210:	88fb      	ldrh	r3, [r7, #6]
 8008212:	68ba      	ldr	r2, [r7, #8]
 8008214:	2100      	movs	r1, #0
 8008216:	68f8      	ldr	r0, [r7, #12]
 8008218:	f000 fc46 	bl	8008aa8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800821c:	2300      	movs	r3, #0
}
 800821e:	4618      	mov	r0, r3
 8008220:	3710      	adds	r7, #16
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}

08008226 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008226:	b580      	push	{r7, lr}
 8008228:	b082      	sub	sp, #8
 800822a:	af00      	add	r7, sp, #0
 800822c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2204      	movs	r2, #4
 8008232:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008236:	2300      	movs	r3, #0
 8008238:	2200      	movs	r2, #0
 800823a:	2100      	movs	r1, #0
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f000 fc10 	bl	8008a62 <USBD_LL_Transmit>

  return USBD_OK;
 8008242:	2300      	movs	r3, #0
}
 8008244:	4618      	mov	r0, r3
 8008246:	3708      	adds	r7, #8
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}

0800824c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b082      	sub	sp, #8
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2205      	movs	r2, #5
 8008258:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800825c:	2300      	movs	r3, #0
 800825e:	2200      	movs	r2, #0
 8008260:	2100      	movs	r1, #0
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 fc20 	bl	8008aa8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008268:	2300      	movs	r3, #0
}
 800826a:	4618      	mov	r0, r3
 800826c:	3708      	adds	r7, #8
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}
	...

08008274 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008278:	2200      	movs	r2, #0
 800827a:	4912      	ldr	r1, [pc, #72]	; (80082c4 <MX_USB_DEVICE_Init+0x50>)
 800827c:	4812      	ldr	r0, [pc, #72]	; (80082c8 <MX_USB_DEVICE_Init+0x54>)
 800827e:	f7fe ff5e 	bl	800713e <USBD_Init>
 8008282:	4603      	mov	r3, r0
 8008284:	2b00      	cmp	r3, #0
 8008286:	d001      	beq.n	800828c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008288:	f7f8 f986 	bl	8000598 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800828c:	490f      	ldr	r1, [pc, #60]	; (80082cc <MX_USB_DEVICE_Init+0x58>)
 800828e:	480e      	ldr	r0, [pc, #56]	; (80082c8 <MX_USB_DEVICE_Init+0x54>)
 8008290:	f7fe ff80 	bl	8007194 <USBD_RegisterClass>
 8008294:	4603      	mov	r3, r0
 8008296:	2b00      	cmp	r3, #0
 8008298:	d001      	beq.n	800829e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800829a:	f7f8 f97d 	bl	8000598 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800829e:	490c      	ldr	r1, [pc, #48]	; (80082d0 <MX_USB_DEVICE_Init+0x5c>)
 80082a0:	4809      	ldr	r0, [pc, #36]	; (80082c8 <MX_USB_DEVICE_Init+0x54>)
 80082a2:	f7fe feb1 	bl	8007008 <USBD_CDC_RegisterInterface>
 80082a6:	4603      	mov	r3, r0
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d001      	beq.n	80082b0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80082ac:	f7f8 f974 	bl	8000598 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80082b0:	4805      	ldr	r0, [pc, #20]	; (80082c8 <MX_USB_DEVICE_Init+0x54>)
 80082b2:	f7fe ff88 	bl	80071c6 <USBD_Start>
 80082b6:	4603      	mov	r3, r0
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d001      	beq.n	80082c0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80082bc:	f7f8 f96c 	bl	8000598 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80082c0:	bf00      	nop
 80082c2:	bd80      	pop	{r7, pc}
 80082c4:	20000138 	.word	0x20000138
 80082c8:	20000290 	.word	0x20000290
 80082cc:	20000024 	.word	0x20000024
 80082d0:	20000128 	.word	0x20000128

080082d4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80082d8:	2200      	movs	r2, #0
 80082da:	4905      	ldr	r1, [pc, #20]	; (80082f0 <CDC_Init_FS+0x1c>)
 80082dc:	4805      	ldr	r0, [pc, #20]	; (80082f4 <CDC_Init_FS+0x20>)
 80082de:	f7fe fea9 	bl	8007034 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80082e2:	4905      	ldr	r1, [pc, #20]	; (80082f8 <CDC_Init_FS+0x24>)
 80082e4:	4803      	ldr	r0, [pc, #12]	; (80082f4 <CDC_Init_FS+0x20>)
 80082e6:	f7fe febe 	bl	8007066 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80082ea:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	bd80      	pop	{r7, pc}
 80082f0:	20000954 	.word	0x20000954
 80082f4:	20000290 	.word	0x20000290
 80082f8:	20000554 	.word	0x20000554

080082fc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80082fc:	b480      	push	{r7}
 80082fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008300:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008302:	4618      	mov	r0, r3
 8008304:	46bd      	mov	sp, r7
 8008306:	bc80      	pop	{r7}
 8008308:	4770      	bx	lr
	...

0800830c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800830c:	b480      	push	{r7}
 800830e:	b083      	sub	sp, #12
 8008310:	af00      	add	r7, sp, #0
 8008312:	4603      	mov	r3, r0
 8008314:	6039      	str	r1, [r7, #0]
 8008316:	71fb      	strb	r3, [r7, #7]
 8008318:	4613      	mov	r3, r2
 800831a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800831c:	79fb      	ldrb	r3, [r7, #7]
 800831e:	2b23      	cmp	r3, #35	; 0x23
 8008320:	d84a      	bhi.n	80083b8 <CDC_Control_FS+0xac>
 8008322:	a201      	add	r2, pc, #4	; (adr r2, 8008328 <CDC_Control_FS+0x1c>)
 8008324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008328:	080083b9 	.word	0x080083b9
 800832c:	080083b9 	.word	0x080083b9
 8008330:	080083b9 	.word	0x080083b9
 8008334:	080083b9 	.word	0x080083b9
 8008338:	080083b9 	.word	0x080083b9
 800833c:	080083b9 	.word	0x080083b9
 8008340:	080083b9 	.word	0x080083b9
 8008344:	080083b9 	.word	0x080083b9
 8008348:	080083b9 	.word	0x080083b9
 800834c:	080083b9 	.word	0x080083b9
 8008350:	080083b9 	.word	0x080083b9
 8008354:	080083b9 	.word	0x080083b9
 8008358:	080083b9 	.word	0x080083b9
 800835c:	080083b9 	.word	0x080083b9
 8008360:	080083b9 	.word	0x080083b9
 8008364:	080083b9 	.word	0x080083b9
 8008368:	080083b9 	.word	0x080083b9
 800836c:	080083b9 	.word	0x080083b9
 8008370:	080083b9 	.word	0x080083b9
 8008374:	080083b9 	.word	0x080083b9
 8008378:	080083b9 	.word	0x080083b9
 800837c:	080083b9 	.word	0x080083b9
 8008380:	080083b9 	.word	0x080083b9
 8008384:	080083b9 	.word	0x080083b9
 8008388:	080083b9 	.word	0x080083b9
 800838c:	080083b9 	.word	0x080083b9
 8008390:	080083b9 	.word	0x080083b9
 8008394:	080083b9 	.word	0x080083b9
 8008398:	080083b9 	.word	0x080083b9
 800839c:	080083b9 	.word	0x080083b9
 80083a0:	080083b9 	.word	0x080083b9
 80083a4:	080083b9 	.word	0x080083b9
 80083a8:	080083b9 	.word	0x080083b9
 80083ac:	080083b9 	.word	0x080083b9
 80083b0:	080083b9 	.word	0x080083b9
 80083b4:	080083b9 	.word	0x080083b9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80083b8:	bf00      	nop
  }

  return (USBD_OK);
 80083ba:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80083bc:	4618      	mov	r0, r3
 80083be:	370c      	adds	r7, #12
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bc80      	pop	{r7}
 80083c4:	4770      	bx	lr
 80083c6:	bf00      	nop

080083c8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b082      	sub	sp, #8
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
 80083d0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80083d2:	6879      	ldr	r1, [r7, #4]
 80083d4:	4805      	ldr	r0, [pc, #20]	; (80083ec <CDC_Receive_FS+0x24>)
 80083d6:	f7fe fe46 	bl	8007066 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80083da:	4804      	ldr	r0, [pc, #16]	; (80083ec <CDC_Receive_FS+0x24>)
 80083dc:	f7fe fe85 	bl	80070ea <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80083e0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3708      	adds	r7, #8
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}
 80083ea:	bf00      	nop
 80083ec:	20000290 	.word	0x20000290

080083f0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b084      	sub	sp, #16
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
 80083f8:	460b      	mov	r3, r1
 80083fa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80083fc:	2300      	movs	r3, #0
 80083fe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008400:	4b0d      	ldr	r3, [pc, #52]	; (8008438 <CDC_Transmit_FS+0x48>)
 8008402:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008406:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800840e:	2b00      	cmp	r3, #0
 8008410:	d001      	beq.n	8008416 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008412:	2301      	movs	r3, #1
 8008414:	e00b      	b.n	800842e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008416:	887b      	ldrh	r3, [r7, #2]
 8008418:	461a      	mov	r2, r3
 800841a:	6879      	ldr	r1, [r7, #4]
 800841c:	4806      	ldr	r0, [pc, #24]	; (8008438 <CDC_Transmit_FS+0x48>)
 800841e:	f7fe fe09 	bl	8007034 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008422:	4805      	ldr	r0, [pc, #20]	; (8008438 <CDC_Transmit_FS+0x48>)
 8008424:	f7fe fe32 	bl	800708c <USBD_CDC_TransmitPacket>
 8008428:	4603      	mov	r3, r0
 800842a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800842c:	7bfb      	ldrb	r3, [r7, #15]
}
 800842e:	4618      	mov	r0, r3
 8008430:	3710      	adds	r7, #16
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}
 8008436:	bf00      	nop
 8008438:	20000290 	.word	0x20000290

0800843c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800843c:	b480      	push	{r7}
 800843e:	b083      	sub	sp, #12
 8008440:	af00      	add	r7, sp, #0
 8008442:	4603      	mov	r3, r0
 8008444:	6039      	str	r1, [r7, #0]
 8008446:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	2212      	movs	r2, #18
 800844c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800844e:	4b03      	ldr	r3, [pc, #12]	; (800845c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008450:	4618      	mov	r0, r3
 8008452:	370c      	adds	r7, #12
 8008454:	46bd      	mov	sp, r7
 8008456:	bc80      	pop	{r7}
 8008458:	4770      	bx	lr
 800845a:	bf00      	nop
 800845c:	20000154 	.word	0x20000154

08008460 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008460:	b480      	push	{r7}
 8008462:	b083      	sub	sp, #12
 8008464:	af00      	add	r7, sp, #0
 8008466:	4603      	mov	r3, r0
 8008468:	6039      	str	r1, [r7, #0]
 800846a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	2204      	movs	r2, #4
 8008470:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008472:	4b03      	ldr	r3, [pc, #12]	; (8008480 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008474:	4618      	mov	r0, r3
 8008476:	370c      	adds	r7, #12
 8008478:	46bd      	mov	sp, r7
 800847a:	bc80      	pop	{r7}
 800847c:	4770      	bx	lr
 800847e:	bf00      	nop
 8008480:	20000168 	.word	0x20000168

08008484 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b082      	sub	sp, #8
 8008488:	af00      	add	r7, sp, #0
 800848a:	4603      	mov	r3, r0
 800848c:	6039      	str	r1, [r7, #0]
 800848e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008490:	79fb      	ldrb	r3, [r7, #7]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d105      	bne.n	80084a2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008496:	683a      	ldr	r2, [r7, #0]
 8008498:	4907      	ldr	r1, [pc, #28]	; (80084b8 <USBD_FS_ProductStrDescriptor+0x34>)
 800849a:	4808      	ldr	r0, [pc, #32]	; (80084bc <USBD_FS_ProductStrDescriptor+0x38>)
 800849c:	f7ff fe0c 	bl	80080b8 <USBD_GetString>
 80084a0:	e004      	b.n	80084ac <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80084a2:	683a      	ldr	r2, [r7, #0]
 80084a4:	4904      	ldr	r1, [pc, #16]	; (80084b8 <USBD_FS_ProductStrDescriptor+0x34>)
 80084a6:	4805      	ldr	r0, [pc, #20]	; (80084bc <USBD_FS_ProductStrDescriptor+0x38>)
 80084a8:	f7ff fe06 	bl	80080b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80084ac:	4b02      	ldr	r3, [pc, #8]	; (80084b8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3708      	adds	r7, #8
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}
 80084b6:	bf00      	nop
 80084b8:	20000d54 	.word	0x20000d54
 80084bc:	08009558 	.word	0x08009558

080084c0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b082      	sub	sp, #8
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	4603      	mov	r3, r0
 80084c8:	6039      	str	r1, [r7, #0]
 80084ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80084cc:	683a      	ldr	r2, [r7, #0]
 80084ce:	4904      	ldr	r1, [pc, #16]	; (80084e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80084d0:	4804      	ldr	r0, [pc, #16]	; (80084e4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80084d2:	f7ff fdf1 	bl	80080b8 <USBD_GetString>
  return USBD_StrDesc;
 80084d6:	4b02      	ldr	r3, [pc, #8]	; (80084e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3708      	adds	r7, #8
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}
 80084e0:	20000d54 	.word	0x20000d54
 80084e4:	08009570 	.word	0x08009570

080084e8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b082      	sub	sp, #8
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	4603      	mov	r3, r0
 80084f0:	6039      	str	r1, [r7, #0]
 80084f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	221a      	movs	r2, #26
 80084f8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80084fa:	f000 f843 	bl	8008584 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80084fe:	4b02      	ldr	r3, [pc, #8]	; (8008508 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008500:	4618      	mov	r0, r3
 8008502:	3708      	adds	r7, #8
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}
 8008508:	2000016c 	.word	0x2000016c

0800850c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b082      	sub	sp, #8
 8008510:	af00      	add	r7, sp, #0
 8008512:	4603      	mov	r3, r0
 8008514:	6039      	str	r1, [r7, #0]
 8008516:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008518:	79fb      	ldrb	r3, [r7, #7]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d105      	bne.n	800852a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800851e:	683a      	ldr	r2, [r7, #0]
 8008520:	4907      	ldr	r1, [pc, #28]	; (8008540 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008522:	4808      	ldr	r0, [pc, #32]	; (8008544 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008524:	f7ff fdc8 	bl	80080b8 <USBD_GetString>
 8008528:	e004      	b.n	8008534 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800852a:	683a      	ldr	r2, [r7, #0]
 800852c:	4904      	ldr	r1, [pc, #16]	; (8008540 <USBD_FS_ConfigStrDescriptor+0x34>)
 800852e:	4805      	ldr	r0, [pc, #20]	; (8008544 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008530:	f7ff fdc2 	bl	80080b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008534:	4b02      	ldr	r3, [pc, #8]	; (8008540 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008536:	4618      	mov	r0, r3
 8008538:	3708      	adds	r7, #8
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}
 800853e:	bf00      	nop
 8008540:	20000d54 	.word	0x20000d54
 8008544:	08009584 	.word	0x08009584

08008548 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b082      	sub	sp, #8
 800854c:	af00      	add	r7, sp, #0
 800854e:	4603      	mov	r3, r0
 8008550:	6039      	str	r1, [r7, #0]
 8008552:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008554:	79fb      	ldrb	r3, [r7, #7]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d105      	bne.n	8008566 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800855a:	683a      	ldr	r2, [r7, #0]
 800855c:	4907      	ldr	r1, [pc, #28]	; (800857c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800855e:	4808      	ldr	r0, [pc, #32]	; (8008580 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008560:	f7ff fdaa 	bl	80080b8 <USBD_GetString>
 8008564:	e004      	b.n	8008570 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008566:	683a      	ldr	r2, [r7, #0]
 8008568:	4904      	ldr	r1, [pc, #16]	; (800857c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800856a:	4805      	ldr	r0, [pc, #20]	; (8008580 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800856c:	f7ff fda4 	bl	80080b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008570:	4b02      	ldr	r3, [pc, #8]	; (800857c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008572:	4618      	mov	r0, r3
 8008574:	3708      	adds	r7, #8
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}
 800857a:	bf00      	nop
 800857c:	20000d54 	.word	0x20000d54
 8008580:	08009590 	.word	0x08009590

08008584 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b084      	sub	sp, #16
 8008588:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800858a:	4b0f      	ldr	r3, [pc, #60]	; (80085c8 <Get_SerialNum+0x44>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008590:	4b0e      	ldr	r3, [pc, #56]	; (80085cc <Get_SerialNum+0x48>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008596:	4b0e      	ldr	r3, [pc, #56]	; (80085d0 <Get_SerialNum+0x4c>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800859c:	68fa      	ldr	r2, [r7, #12]
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	4413      	add	r3, r2
 80085a2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d009      	beq.n	80085be <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80085aa:	2208      	movs	r2, #8
 80085ac:	4909      	ldr	r1, [pc, #36]	; (80085d4 <Get_SerialNum+0x50>)
 80085ae:	68f8      	ldr	r0, [r7, #12]
 80085b0:	f000 f814 	bl	80085dc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80085b4:	2204      	movs	r2, #4
 80085b6:	4908      	ldr	r1, [pc, #32]	; (80085d8 <Get_SerialNum+0x54>)
 80085b8:	68b8      	ldr	r0, [r7, #8]
 80085ba:	f000 f80f 	bl	80085dc <IntToUnicode>
  }
}
 80085be:	bf00      	nop
 80085c0:	3710      	adds	r7, #16
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}
 80085c6:	bf00      	nop
 80085c8:	1ffff7e8 	.word	0x1ffff7e8
 80085cc:	1ffff7ec 	.word	0x1ffff7ec
 80085d0:	1ffff7f0 	.word	0x1ffff7f0
 80085d4:	2000016e 	.word	0x2000016e
 80085d8:	2000017e 	.word	0x2000017e

080085dc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80085dc:	b480      	push	{r7}
 80085de:	b087      	sub	sp, #28
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	60f8      	str	r0, [r7, #12]
 80085e4:	60b9      	str	r1, [r7, #8]
 80085e6:	4613      	mov	r3, r2
 80085e8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80085ea:	2300      	movs	r3, #0
 80085ec:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80085ee:	2300      	movs	r3, #0
 80085f0:	75fb      	strb	r3, [r7, #23]
 80085f2:	e027      	b.n	8008644 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	0f1b      	lsrs	r3, r3, #28
 80085f8:	2b09      	cmp	r3, #9
 80085fa:	d80b      	bhi.n	8008614 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	0f1b      	lsrs	r3, r3, #28
 8008600:	b2da      	uxtb	r2, r3
 8008602:	7dfb      	ldrb	r3, [r7, #23]
 8008604:	005b      	lsls	r3, r3, #1
 8008606:	4619      	mov	r1, r3
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	440b      	add	r3, r1
 800860c:	3230      	adds	r2, #48	; 0x30
 800860e:	b2d2      	uxtb	r2, r2
 8008610:	701a      	strb	r2, [r3, #0]
 8008612:	e00a      	b.n	800862a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	0f1b      	lsrs	r3, r3, #28
 8008618:	b2da      	uxtb	r2, r3
 800861a:	7dfb      	ldrb	r3, [r7, #23]
 800861c:	005b      	lsls	r3, r3, #1
 800861e:	4619      	mov	r1, r3
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	440b      	add	r3, r1
 8008624:	3237      	adds	r2, #55	; 0x37
 8008626:	b2d2      	uxtb	r2, r2
 8008628:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	011b      	lsls	r3, r3, #4
 800862e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008630:	7dfb      	ldrb	r3, [r7, #23]
 8008632:	005b      	lsls	r3, r3, #1
 8008634:	3301      	adds	r3, #1
 8008636:	68ba      	ldr	r2, [r7, #8]
 8008638:	4413      	add	r3, r2
 800863a:	2200      	movs	r2, #0
 800863c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800863e:	7dfb      	ldrb	r3, [r7, #23]
 8008640:	3301      	adds	r3, #1
 8008642:	75fb      	strb	r3, [r7, #23]
 8008644:	7dfa      	ldrb	r2, [r7, #23]
 8008646:	79fb      	ldrb	r3, [r7, #7]
 8008648:	429a      	cmp	r2, r3
 800864a:	d3d3      	bcc.n	80085f4 <IntToUnicode+0x18>
  }
}
 800864c:	bf00      	nop
 800864e:	bf00      	nop
 8008650:	371c      	adds	r7, #28
 8008652:	46bd      	mov	sp, r7
 8008654:	bc80      	pop	{r7}
 8008656:	4770      	bx	lr

08008658 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b084      	sub	sp, #16
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4a0d      	ldr	r2, [pc, #52]	; (800869c <HAL_PCD_MspInit+0x44>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d113      	bne.n	8008692 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800866a:	4b0d      	ldr	r3, [pc, #52]	; (80086a0 <HAL_PCD_MspInit+0x48>)
 800866c:	69db      	ldr	r3, [r3, #28]
 800866e:	4a0c      	ldr	r2, [pc, #48]	; (80086a0 <HAL_PCD_MspInit+0x48>)
 8008670:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008674:	61d3      	str	r3, [r2, #28]
 8008676:	4b0a      	ldr	r3, [pc, #40]	; (80086a0 <HAL_PCD_MspInit+0x48>)
 8008678:	69db      	ldr	r3, [r3, #28]
 800867a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800867e:	60fb      	str	r3, [r7, #12]
 8008680:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008682:	2200      	movs	r2, #0
 8008684:	2100      	movs	r1, #0
 8008686:	2014      	movs	r0, #20
 8008688:	f7f8 fa69 	bl	8000b5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800868c:	2014      	movs	r0, #20
 800868e:	f7f8 fa82 	bl	8000b96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008692:	bf00      	nop
 8008694:	3710      	adds	r7, #16
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}
 800869a:	bf00      	nop
 800869c:	40005c00 	.word	0x40005c00
 80086a0:	40021000 	.word	0x40021000

080086a4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b082      	sub	sp, #8
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80086b8:	4619      	mov	r1, r3
 80086ba:	4610      	mov	r0, r2
 80086bc:	f7fe fdcb 	bl	8007256 <USBD_LL_SetupStage>
}
 80086c0:	bf00      	nop
 80086c2:	3708      	adds	r7, #8
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}

080086c8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b082      	sub	sp, #8
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
 80086d0:	460b      	mov	r3, r1
 80086d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 80086da:	78fa      	ldrb	r2, [r7, #3]
 80086dc:	6879      	ldr	r1, [r7, #4]
 80086de:	4613      	mov	r3, r2
 80086e0:	009b      	lsls	r3, r3, #2
 80086e2:	4413      	add	r3, r2
 80086e4:	00db      	lsls	r3, r3, #3
 80086e6:	440b      	add	r3, r1
 80086e8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80086ec:	681a      	ldr	r2, [r3, #0]
 80086ee:	78fb      	ldrb	r3, [r7, #3]
 80086f0:	4619      	mov	r1, r3
 80086f2:	f7fe fdfd 	bl	80072f0 <USBD_LL_DataOutStage>
}
 80086f6:	bf00      	nop
 80086f8:	3708      	adds	r7, #8
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}

080086fe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086fe:	b580      	push	{r7, lr}
 8008700:	b082      	sub	sp, #8
 8008702:	af00      	add	r7, sp, #0
 8008704:	6078      	str	r0, [r7, #4]
 8008706:	460b      	mov	r3, r1
 8008708:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8008710:	78fa      	ldrb	r2, [r7, #3]
 8008712:	6879      	ldr	r1, [r7, #4]
 8008714:	4613      	mov	r3, r2
 8008716:	009b      	lsls	r3, r3, #2
 8008718:	4413      	add	r3, r2
 800871a:	00db      	lsls	r3, r3, #3
 800871c:	440b      	add	r3, r1
 800871e:	333c      	adds	r3, #60	; 0x3c
 8008720:	681a      	ldr	r2, [r3, #0]
 8008722:	78fb      	ldrb	r3, [r7, #3]
 8008724:	4619      	mov	r1, r3
 8008726:	f7fe fe54 	bl	80073d2 <USBD_LL_DataInStage>
}
 800872a:	bf00      	nop
 800872c:	3708      	adds	r7, #8
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}

08008732 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008732:	b580      	push	{r7, lr}
 8008734:	b082      	sub	sp, #8
 8008736:	af00      	add	r7, sp, #0
 8008738:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8008740:	4618      	mov	r0, r3
 8008742:	f7fe ff64 	bl	800760e <USBD_LL_SOF>
}
 8008746:	bf00      	nop
 8008748:	3708      	adds	r7, #8
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}

0800874e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800874e:	b580      	push	{r7, lr}
 8008750:	b084      	sub	sp, #16
 8008752:	af00      	add	r7, sp, #0
 8008754:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008756:	2301      	movs	r3, #1
 8008758:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	689b      	ldr	r3, [r3, #8]
 800875e:	2b02      	cmp	r3, #2
 8008760:	d001      	beq.n	8008766 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008762:	f7f7 ff19 	bl	8000598 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800876c:	7bfa      	ldrb	r2, [r7, #15]
 800876e:	4611      	mov	r1, r2
 8008770:	4618      	mov	r0, r3
 8008772:	f7fe ff14 	bl	800759e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800877c:	4618      	mov	r0, r3
 800877e:	f7fe fecd 	bl	800751c <USBD_LL_Reset>
}
 8008782:	bf00      	nop
 8008784:	3710      	adds	r7, #16
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}
	...

0800878c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b082      	sub	sp, #8
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800879a:	4618      	mov	r0, r3
 800879c:	f7fe ff0e 	bl	80075bc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	699b      	ldr	r3, [r3, #24]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d005      	beq.n	80087b4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80087a8:	4b04      	ldr	r3, [pc, #16]	; (80087bc <HAL_PCD_SuspendCallback+0x30>)
 80087aa:	691b      	ldr	r3, [r3, #16]
 80087ac:	4a03      	ldr	r2, [pc, #12]	; (80087bc <HAL_PCD_SuspendCallback+0x30>)
 80087ae:	f043 0306 	orr.w	r3, r3, #6
 80087b2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80087b4:	bf00      	nop
 80087b6:	3708      	adds	r7, #8
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}
 80087bc:	e000ed00 	.word	0xe000ed00

080087c0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b082      	sub	sp, #8
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80087ce:	4618      	mov	r0, r3
 80087d0:	f7fe ff08 	bl	80075e4 <USBD_LL_Resume>
}
 80087d4:	bf00      	nop
 80087d6:	3708      	adds	r7, #8
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}

080087dc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b082      	sub	sp, #8
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80087e4:	4a28      	ldr	r2, [pc, #160]	; (8008888 <USBD_LL_Init+0xac>)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	4a26      	ldr	r2, [pc, #152]	; (8008888 <USBD_LL_Init+0xac>)
 80087f0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80087f4:	4b24      	ldr	r3, [pc, #144]	; (8008888 <USBD_LL_Init+0xac>)
 80087f6:	4a25      	ldr	r2, [pc, #148]	; (800888c <USBD_LL_Init+0xb0>)
 80087f8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80087fa:	4b23      	ldr	r3, [pc, #140]	; (8008888 <USBD_LL_Init+0xac>)
 80087fc:	2208      	movs	r2, #8
 80087fe:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008800:	4b21      	ldr	r3, [pc, #132]	; (8008888 <USBD_LL_Init+0xac>)
 8008802:	2202      	movs	r2, #2
 8008804:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008806:	4b20      	ldr	r3, [pc, #128]	; (8008888 <USBD_LL_Init+0xac>)
 8008808:	2200      	movs	r2, #0
 800880a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800880c:	4b1e      	ldr	r3, [pc, #120]	; (8008888 <USBD_LL_Init+0xac>)
 800880e:	2200      	movs	r2, #0
 8008810:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008812:	4b1d      	ldr	r3, [pc, #116]	; (8008888 <USBD_LL_Init+0xac>)
 8008814:	2200      	movs	r2, #0
 8008816:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008818:	481b      	ldr	r0, [pc, #108]	; (8008888 <USBD_LL_Init+0xac>)
 800881a:	f7f8 fcef 	bl	80011fc <HAL_PCD_Init>
 800881e:	4603      	mov	r3, r0
 8008820:	2b00      	cmp	r3, #0
 8008822:	d001      	beq.n	8008828 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008824:	f7f7 feb8 	bl	8000598 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800882e:	2318      	movs	r3, #24
 8008830:	2200      	movs	r2, #0
 8008832:	2100      	movs	r1, #0
 8008834:	f7fa fa0e 	bl	8002c54 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800883e:	2358      	movs	r3, #88	; 0x58
 8008840:	2200      	movs	r2, #0
 8008842:	2180      	movs	r1, #128	; 0x80
 8008844:	f7fa fa06 	bl	8002c54 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800884e:	23c0      	movs	r3, #192	; 0xc0
 8008850:	2200      	movs	r2, #0
 8008852:	2181      	movs	r1, #129	; 0x81
 8008854:	f7fa f9fe 	bl	8002c54 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800885e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008862:	2200      	movs	r2, #0
 8008864:	2101      	movs	r1, #1
 8008866:	f7fa f9f5 	bl	8002c54 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008870:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008874:	2200      	movs	r2, #0
 8008876:	2182      	movs	r1, #130	; 0x82
 8008878:	f7fa f9ec 	bl	8002c54 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800887c:	2300      	movs	r3, #0
}
 800887e:	4618      	mov	r0, r3
 8008880:	3708      	adds	r7, #8
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}
 8008886:	bf00      	nop
 8008888:	20000f54 	.word	0x20000f54
 800888c:	40005c00 	.word	0x40005c00

08008890 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b084      	sub	sp, #16
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008898:	2300      	movs	r3, #0
 800889a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800889c:	2300      	movs	r3, #0
 800889e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80088a6:	4618      	mov	r0, r3
 80088a8:	f7f8 fda7 	bl	80013fa <HAL_PCD_Start>
 80088ac:	4603      	mov	r3, r0
 80088ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088b0:	7bfb      	ldrb	r3, [r7, #15]
 80088b2:	4618      	mov	r0, r3
 80088b4:	f000 f94e 	bl	8008b54 <USBD_Get_USB_Status>
 80088b8:	4603      	mov	r3, r0
 80088ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80088be:	4618      	mov	r0, r3
 80088c0:	3710      	adds	r7, #16
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}

080088c6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80088c6:	b580      	push	{r7, lr}
 80088c8:	b084      	sub	sp, #16
 80088ca:	af00      	add	r7, sp, #0
 80088cc:	6078      	str	r0, [r7, #4]
 80088ce:	4608      	mov	r0, r1
 80088d0:	4611      	mov	r1, r2
 80088d2:	461a      	mov	r2, r3
 80088d4:	4603      	mov	r3, r0
 80088d6:	70fb      	strb	r3, [r7, #3]
 80088d8:	460b      	mov	r3, r1
 80088da:	70bb      	strb	r3, [r7, #2]
 80088dc:	4613      	mov	r3, r2
 80088de:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088e0:	2300      	movs	r3, #0
 80088e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088e4:	2300      	movs	r3, #0
 80088e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80088ee:	78bb      	ldrb	r3, [r7, #2]
 80088f0:	883a      	ldrh	r2, [r7, #0]
 80088f2:	78f9      	ldrb	r1, [r7, #3]
 80088f4:	f7f8 fefc 	bl	80016f0 <HAL_PCD_EP_Open>
 80088f8:	4603      	mov	r3, r0
 80088fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088fc:	7bfb      	ldrb	r3, [r7, #15]
 80088fe:	4618      	mov	r0, r3
 8008900:	f000 f928 	bl	8008b54 <USBD_Get_USB_Status>
 8008904:	4603      	mov	r3, r0
 8008906:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008908:	7bbb      	ldrb	r3, [r7, #14]
}
 800890a:	4618      	mov	r0, r3
 800890c:	3710      	adds	r7, #16
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}

08008912 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008912:	b580      	push	{r7, lr}
 8008914:	b084      	sub	sp, #16
 8008916:	af00      	add	r7, sp, #0
 8008918:	6078      	str	r0, [r7, #4]
 800891a:	460b      	mov	r3, r1
 800891c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800891e:	2300      	movs	r3, #0
 8008920:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008922:	2300      	movs	r3, #0
 8008924:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800892c:	78fa      	ldrb	r2, [r7, #3]
 800892e:	4611      	mov	r1, r2
 8008930:	4618      	mov	r0, r3
 8008932:	f7f8 ff3a 	bl	80017aa <HAL_PCD_EP_Close>
 8008936:	4603      	mov	r3, r0
 8008938:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800893a:	7bfb      	ldrb	r3, [r7, #15]
 800893c:	4618      	mov	r0, r3
 800893e:	f000 f909 	bl	8008b54 <USBD_Get_USB_Status>
 8008942:	4603      	mov	r3, r0
 8008944:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008946:	7bbb      	ldrb	r3, [r7, #14]
}
 8008948:	4618      	mov	r0, r3
 800894a:	3710      	adds	r7, #16
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}

08008950 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b084      	sub	sp, #16
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
 8008958:	460b      	mov	r3, r1
 800895a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800895c:	2300      	movs	r3, #0
 800895e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008960:	2300      	movs	r3, #0
 8008962:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800896a:	78fa      	ldrb	r2, [r7, #3]
 800896c:	4611      	mov	r1, r2
 800896e:	4618      	mov	r0, r3
 8008970:	f7f8 ffe2 	bl	8001938 <HAL_PCD_EP_SetStall>
 8008974:	4603      	mov	r3, r0
 8008976:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008978:	7bfb      	ldrb	r3, [r7, #15]
 800897a:	4618      	mov	r0, r3
 800897c:	f000 f8ea 	bl	8008b54 <USBD_Get_USB_Status>
 8008980:	4603      	mov	r3, r0
 8008982:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008984:	7bbb      	ldrb	r3, [r7, #14]
}
 8008986:	4618      	mov	r0, r3
 8008988:	3710      	adds	r7, #16
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}

0800898e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800898e:	b580      	push	{r7, lr}
 8008990:	b084      	sub	sp, #16
 8008992:	af00      	add	r7, sp, #0
 8008994:	6078      	str	r0, [r7, #4]
 8008996:	460b      	mov	r3, r1
 8008998:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800899a:	2300      	movs	r3, #0
 800899c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800899e:	2300      	movs	r3, #0
 80089a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80089a8:	78fa      	ldrb	r2, [r7, #3]
 80089aa:	4611      	mov	r1, r2
 80089ac:	4618      	mov	r0, r3
 80089ae:	f7f9 f823 	bl	80019f8 <HAL_PCD_EP_ClrStall>
 80089b2:	4603      	mov	r3, r0
 80089b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089b6:	7bfb      	ldrb	r3, [r7, #15]
 80089b8:	4618      	mov	r0, r3
 80089ba:	f000 f8cb 	bl	8008b54 <USBD_Get_USB_Status>
 80089be:	4603      	mov	r3, r0
 80089c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	3710      	adds	r7, #16
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}

080089cc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80089cc:	b480      	push	{r7}
 80089ce:	b085      	sub	sp, #20
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
 80089d4:	460b      	mov	r3, r1
 80089d6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80089de:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80089e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	da0c      	bge.n	8008a02 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80089e8:	78fb      	ldrb	r3, [r7, #3]
 80089ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089ee:	68f9      	ldr	r1, [r7, #12]
 80089f0:	1c5a      	adds	r2, r3, #1
 80089f2:	4613      	mov	r3, r2
 80089f4:	009b      	lsls	r3, r3, #2
 80089f6:	4413      	add	r3, r2
 80089f8:	00db      	lsls	r3, r3, #3
 80089fa:	440b      	add	r3, r1
 80089fc:	3302      	adds	r3, #2
 80089fe:	781b      	ldrb	r3, [r3, #0]
 8008a00:	e00b      	b.n	8008a1a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008a02:	78fb      	ldrb	r3, [r7, #3]
 8008a04:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a08:	68f9      	ldr	r1, [r7, #12]
 8008a0a:	4613      	mov	r3, r2
 8008a0c:	009b      	lsls	r3, r3, #2
 8008a0e:	4413      	add	r3, r2
 8008a10:	00db      	lsls	r3, r3, #3
 8008a12:	440b      	add	r3, r1
 8008a14:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008a18:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3714      	adds	r7, #20
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bc80      	pop	{r7}
 8008a22:	4770      	bx	lr

08008a24 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b084      	sub	sp, #16
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
 8008a2c:	460b      	mov	r3, r1
 8008a2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a30:	2300      	movs	r3, #0
 8008a32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a34:	2300      	movs	r3, #0
 8008a36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a3e:	78fa      	ldrb	r2, [r7, #3]
 8008a40:	4611      	mov	r1, r2
 8008a42:	4618      	mov	r0, r3
 8008a44:	f7f8 fe2f 	bl	80016a6 <HAL_PCD_SetAddress>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a4c:	7bfb      	ldrb	r3, [r7, #15]
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f000 f880 	bl	8008b54 <USBD_Get_USB_Status>
 8008a54:	4603      	mov	r3, r0
 8008a56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a58:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3710      	adds	r7, #16
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}

08008a62 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008a62:	b580      	push	{r7, lr}
 8008a64:	b086      	sub	sp, #24
 8008a66:	af00      	add	r7, sp, #0
 8008a68:	60f8      	str	r0, [r7, #12]
 8008a6a:	607a      	str	r2, [r7, #4]
 8008a6c:	461a      	mov	r2, r3
 8008a6e:	460b      	mov	r3, r1
 8008a70:	72fb      	strb	r3, [r7, #11]
 8008a72:	4613      	mov	r3, r2
 8008a74:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a76:	2300      	movs	r3, #0
 8008a78:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008a84:	893b      	ldrh	r3, [r7, #8]
 8008a86:	7af9      	ldrb	r1, [r7, #11]
 8008a88:	687a      	ldr	r2, [r7, #4]
 8008a8a:	f7f8 ff1e 	bl	80018ca <HAL_PCD_EP_Transmit>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a92:	7dfb      	ldrb	r3, [r7, #23]
 8008a94:	4618      	mov	r0, r3
 8008a96:	f000 f85d 	bl	8008b54 <USBD_Get_USB_Status>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008a9e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3718      	adds	r7, #24
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}

08008aa8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b086      	sub	sp, #24
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	60f8      	str	r0, [r7, #12]
 8008ab0:	607a      	str	r2, [r7, #4]
 8008ab2:	461a      	mov	r2, r3
 8008ab4:	460b      	mov	r3, r1
 8008ab6:	72fb      	strb	r3, [r7, #11]
 8008ab8:	4613      	mov	r3, r2
 8008aba:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008abc:	2300      	movs	r3, #0
 8008abe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008aca:	893b      	ldrh	r3, [r7, #8]
 8008acc:	7af9      	ldrb	r1, [r7, #11]
 8008ace:	687a      	ldr	r2, [r7, #4]
 8008ad0:	f7f8 feb3 	bl	800183a <HAL_PCD_EP_Receive>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ad8:	7dfb      	ldrb	r3, [r7, #23]
 8008ada:	4618      	mov	r0, r3
 8008adc:	f000 f83a 	bl	8008b54 <USBD_Get_USB_Status>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008ae4:	7dbb      	ldrb	r3, [r7, #22]
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3718      	adds	r7, #24
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}

08008aee <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008aee:	b580      	push	{r7, lr}
 8008af0:	b082      	sub	sp, #8
 8008af2:	af00      	add	r7, sp, #0
 8008af4:	6078      	str	r0, [r7, #4]
 8008af6:	460b      	mov	r3, r1
 8008af8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008b00:	78fa      	ldrb	r2, [r7, #3]
 8008b02:	4611      	mov	r1, r2
 8008b04:	4618      	mov	r0, r3
 8008b06:	f7f8 fec9 	bl	800189c <HAL_PCD_EP_GetRxCount>
 8008b0a:	4603      	mov	r3, r0
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3708      	adds	r7, #8
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}

08008b14 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b083      	sub	sp, #12
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008b1c:	4b02      	ldr	r3, [pc, #8]	; (8008b28 <USBD_static_malloc+0x14>)
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	370c      	adds	r7, #12
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bc80      	pop	{r7}
 8008b26:	4770      	bx	lr
 8008b28:	20001244 	.word	0x20001244

08008b2c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b083      	sub	sp, #12
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]

}
 8008b34:	bf00      	nop
 8008b36:	370c      	adds	r7, #12
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bc80      	pop	{r7}
 8008b3c:	4770      	bx	lr

08008b3e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b3e:	b480      	push	{r7}
 8008b40:	b083      	sub	sp, #12
 8008b42:	af00      	add	r7, sp, #0
 8008b44:	6078      	str	r0, [r7, #4]
 8008b46:	460b      	mov	r3, r1
 8008b48:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008b4a:	bf00      	nop
 8008b4c:	370c      	adds	r7, #12
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bc80      	pop	{r7}
 8008b52:	4770      	bx	lr

08008b54 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008b54:	b480      	push	{r7}
 8008b56:	b085      	sub	sp, #20
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008b62:	79fb      	ldrb	r3, [r7, #7]
 8008b64:	2b03      	cmp	r3, #3
 8008b66:	d817      	bhi.n	8008b98 <USBD_Get_USB_Status+0x44>
 8008b68:	a201      	add	r2, pc, #4	; (adr r2, 8008b70 <USBD_Get_USB_Status+0x1c>)
 8008b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b6e:	bf00      	nop
 8008b70:	08008b81 	.word	0x08008b81
 8008b74:	08008b87 	.word	0x08008b87
 8008b78:	08008b8d 	.word	0x08008b8d
 8008b7c:	08008b93 	.word	0x08008b93
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008b80:	2300      	movs	r3, #0
 8008b82:	73fb      	strb	r3, [r7, #15]
    break;
 8008b84:	e00b      	b.n	8008b9e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008b86:	2302      	movs	r3, #2
 8008b88:	73fb      	strb	r3, [r7, #15]
    break;
 8008b8a:	e008      	b.n	8008b9e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	73fb      	strb	r3, [r7, #15]
    break;
 8008b90:	e005      	b.n	8008b9e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008b92:	2302      	movs	r3, #2
 8008b94:	73fb      	strb	r3, [r7, #15]
    break;
 8008b96:	e002      	b.n	8008b9e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008b98:	2302      	movs	r3, #2
 8008b9a:	73fb      	strb	r3, [r7, #15]
    break;
 8008b9c:	bf00      	nop
  }
  return usb_status;
 8008b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3714      	adds	r7, #20
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bc80      	pop	{r7}
 8008ba8:	4770      	bx	lr
 8008baa:	bf00      	nop

08008bac <__errno>:
 8008bac:	4b01      	ldr	r3, [pc, #4]	; (8008bb4 <__errno+0x8>)
 8008bae:	6818      	ldr	r0, [r3, #0]
 8008bb0:	4770      	bx	lr
 8008bb2:	bf00      	nop
 8008bb4:	20000188 	.word	0x20000188

08008bb8 <__libc_init_array>:
 8008bb8:	b570      	push	{r4, r5, r6, lr}
 8008bba:	2600      	movs	r6, #0
 8008bbc:	4d0c      	ldr	r5, [pc, #48]	; (8008bf0 <__libc_init_array+0x38>)
 8008bbe:	4c0d      	ldr	r4, [pc, #52]	; (8008bf4 <__libc_init_array+0x3c>)
 8008bc0:	1b64      	subs	r4, r4, r5
 8008bc2:	10a4      	asrs	r4, r4, #2
 8008bc4:	42a6      	cmp	r6, r4
 8008bc6:	d109      	bne.n	8008bdc <__libc_init_array+0x24>
 8008bc8:	f000 fcac 	bl	8009524 <_init>
 8008bcc:	2600      	movs	r6, #0
 8008bce:	4d0a      	ldr	r5, [pc, #40]	; (8008bf8 <__libc_init_array+0x40>)
 8008bd0:	4c0a      	ldr	r4, [pc, #40]	; (8008bfc <__libc_init_array+0x44>)
 8008bd2:	1b64      	subs	r4, r4, r5
 8008bd4:	10a4      	asrs	r4, r4, #2
 8008bd6:	42a6      	cmp	r6, r4
 8008bd8:	d105      	bne.n	8008be6 <__libc_init_array+0x2e>
 8008bda:	bd70      	pop	{r4, r5, r6, pc}
 8008bdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008be0:	4798      	blx	r3
 8008be2:	3601      	adds	r6, #1
 8008be4:	e7ee      	b.n	8008bc4 <__libc_init_array+0xc>
 8008be6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bea:	4798      	blx	r3
 8008bec:	3601      	adds	r6, #1
 8008bee:	e7f2      	b.n	8008bd6 <__libc_init_array+0x1e>
 8008bf0:	08009600 	.word	0x08009600
 8008bf4:	08009600 	.word	0x08009600
 8008bf8:	08009600 	.word	0x08009600
 8008bfc:	08009604 	.word	0x08009604

08008c00 <malloc>:
 8008c00:	4b02      	ldr	r3, [pc, #8]	; (8008c0c <malloc+0xc>)
 8008c02:	4601      	mov	r1, r0
 8008c04:	6818      	ldr	r0, [r3, #0]
 8008c06:	f000 b87b 	b.w	8008d00 <_malloc_r>
 8008c0a:	bf00      	nop
 8008c0c:	20000188 	.word	0x20000188

08008c10 <free>:
 8008c10:	4b02      	ldr	r3, [pc, #8]	; (8008c1c <free+0xc>)
 8008c12:	4601      	mov	r1, r0
 8008c14:	6818      	ldr	r0, [r3, #0]
 8008c16:	f000 b80b 	b.w	8008c30 <_free_r>
 8008c1a:	bf00      	nop
 8008c1c:	20000188 	.word	0x20000188

08008c20 <memset>:
 8008c20:	4603      	mov	r3, r0
 8008c22:	4402      	add	r2, r0
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d100      	bne.n	8008c2a <memset+0xa>
 8008c28:	4770      	bx	lr
 8008c2a:	f803 1b01 	strb.w	r1, [r3], #1
 8008c2e:	e7f9      	b.n	8008c24 <memset+0x4>

08008c30 <_free_r>:
 8008c30:	b538      	push	{r3, r4, r5, lr}
 8008c32:	4605      	mov	r5, r0
 8008c34:	2900      	cmp	r1, #0
 8008c36:	d040      	beq.n	8008cba <_free_r+0x8a>
 8008c38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c3c:	1f0c      	subs	r4, r1, #4
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	bfb8      	it	lt
 8008c42:	18e4      	addlt	r4, r4, r3
 8008c44:	f000 f900 	bl	8008e48 <__malloc_lock>
 8008c48:	4a1c      	ldr	r2, [pc, #112]	; (8008cbc <_free_r+0x8c>)
 8008c4a:	6813      	ldr	r3, [r2, #0]
 8008c4c:	b933      	cbnz	r3, 8008c5c <_free_r+0x2c>
 8008c4e:	6063      	str	r3, [r4, #4]
 8008c50:	6014      	str	r4, [r2, #0]
 8008c52:	4628      	mov	r0, r5
 8008c54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c58:	f000 b8fc 	b.w	8008e54 <__malloc_unlock>
 8008c5c:	42a3      	cmp	r3, r4
 8008c5e:	d908      	bls.n	8008c72 <_free_r+0x42>
 8008c60:	6820      	ldr	r0, [r4, #0]
 8008c62:	1821      	adds	r1, r4, r0
 8008c64:	428b      	cmp	r3, r1
 8008c66:	bf01      	itttt	eq
 8008c68:	6819      	ldreq	r1, [r3, #0]
 8008c6a:	685b      	ldreq	r3, [r3, #4]
 8008c6c:	1809      	addeq	r1, r1, r0
 8008c6e:	6021      	streq	r1, [r4, #0]
 8008c70:	e7ed      	b.n	8008c4e <_free_r+0x1e>
 8008c72:	461a      	mov	r2, r3
 8008c74:	685b      	ldr	r3, [r3, #4]
 8008c76:	b10b      	cbz	r3, 8008c7c <_free_r+0x4c>
 8008c78:	42a3      	cmp	r3, r4
 8008c7a:	d9fa      	bls.n	8008c72 <_free_r+0x42>
 8008c7c:	6811      	ldr	r1, [r2, #0]
 8008c7e:	1850      	adds	r0, r2, r1
 8008c80:	42a0      	cmp	r0, r4
 8008c82:	d10b      	bne.n	8008c9c <_free_r+0x6c>
 8008c84:	6820      	ldr	r0, [r4, #0]
 8008c86:	4401      	add	r1, r0
 8008c88:	1850      	adds	r0, r2, r1
 8008c8a:	4283      	cmp	r3, r0
 8008c8c:	6011      	str	r1, [r2, #0]
 8008c8e:	d1e0      	bne.n	8008c52 <_free_r+0x22>
 8008c90:	6818      	ldr	r0, [r3, #0]
 8008c92:	685b      	ldr	r3, [r3, #4]
 8008c94:	4401      	add	r1, r0
 8008c96:	6011      	str	r1, [r2, #0]
 8008c98:	6053      	str	r3, [r2, #4]
 8008c9a:	e7da      	b.n	8008c52 <_free_r+0x22>
 8008c9c:	d902      	bls.n	8008ca4 <_free_r+0x74>
 8008c9e:	230c      	movs	r3, #12
 8008ca0:	602b      	str	r3, [r5, #0]
 8008ca2:	e7d6      	b.n	8008c52 <_free_r+0x22>
 8008ca4:	6820      	ldr	r0, [r4, #0]
 8008ca6:	1821      	adds	r1, r4, r0
 8008ca8:	428b      	cmp	r3, r1
 8008caa:	bf01      	itttt	eq
 8008cac:	6819      	ldreq	r1, [r3, #0]
 8008cae:	685b      	ldreq	r3, [r3, #4]
 8008cb0:	1809      	addeq	r1, r1, r0
 8008cb2:	6021      	streq	r1, [r4, #0]
 8008cb4:	6063      	str	r3, [r4, #4]
 8008cb6:	6054      	str	r4, [r2, #4]
 8008cb8:	e7cb      	b.n	8008c52 <_free_r+0x22>
 8008cba:	bd38      	pop	{r3, r4, r5, pc}
 8008cbc:	20001464 	.word	0x20001464

08008cc0 <sbrk_aligned>:
 8008cc0:	b570      	push	{r4, r5, r6, lr}
 8008cc2:	4e0e      	ldr	r6, [pc, #56]	; (8008cfc <sbrk_aligned+0x3c>)
 8008cc4:	460c      	mov	r4, r1
 8008cc6:	6831      	ldr	r1, [r6, #0]
 8008cc8:	4605      	mov	r5, r0
 8008cca:	b911      	cbnz	r1, 8008cd2 <sbrk_aligned+0x12>
 8008ccc:	f000 f88c 	bl	8008de8 <_sbrk_r>
 8008cd0:	6030      	str	r0, [r6, #0]
 8008cd2:	4621      	mov	r1, r4
 8008cd4:	4628      	mov	r0, r5
 8008cd6:	f000 f887 	bl	8008de8 <_sbrk_r>
 8008cda:	1c43      	adds	r3, r0, #1
 8008cdc:	d00a      	beq.n	8008cf4 <sbrk_aligned+0x34>
 8008cde:	1cc4      	adds	r4, r0, #3
 8008ce0:	f024 0403 	bic.w	r4, r4, #3
 8008ce4:	42a0      	cmp	r0, r4
 8008ce6:	d007      	beq.n	8008cf8 <sbrk_aligned+0x38>
 8008ce8:	1a21      	subs	r1, r4, r0
 8008cea:	4628      	mov	r0, r5
 8008cec:	f000 f87c 	bl	8008de8 <_sbrk_r>
 8008cf0:	3001      	adds	r0, #1
 8008cf2:	d101      	bne.n	8008cf8 <sbrk_aligned+0x38>
 8008cf4:	f04f 34ff 	mov.w	r4, #4294967295
 8008cf8:	4620      	mov	r0, r4
 8008cfa:	bd70      	pop	{r4, r5, r6, pc}
 8008cfc:	20001468 	.word	0x20001468

08008d00 <_malloc_r>:
 8008d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d04:	1ccd      	adds	r5, r1, #3
 8008d06:	f025 0503 	bic.w	r5, r5, #3
 8008d0a:	3508      	adds	r5, #8
 8008d0c:	2d0c      	cmp	r5, #12
 8008d0e:	bf38      	it	cc
 8008d10:	250c      	movcc	r5, #12
 8008d12:	2d00      	cmp	r5, #0
 8008d14:	4607      	mov	r7, r0
 8008d16:	db01      	blt.n	8008d1c <_malloc_r+0x1c>
 8008d18:	42a9      	cmp	r1, r5
 8008d1a:	d905      	bls.n	8008d28 <_malloc_r+0x28>
 8008d1c:	230c      	movs	r3, #12
 8008d1e:	2600      	movs	r6, #0
 8008d20:	603b      	str	r3, [r7, #0]
 8008d22:	4630      	mov	r0, r6
 8008d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d28:	4e2e      	ldr	r6, [pc, #184]	; (8008de4 <_malloc_r+0xe4>)
 8008d2a:	f000 f88d 	bl	8008e48 <__malloc_lock>
 8008d2e:	6833      	ldr	r3, [r6, #0]
 8008d30:	461c      	mov	r4, r3
 8008d32:	bb34      	cbnz	r4, 8008d82 <_malloc_r+0x82>
 8008d34:	4629      	mov	r1, r5
 8008d36:	4638      	mov	r0, r7
 8008d38:	f7ff ffc2 	bl	8008cc0 <sbrk_aligned>
 8008d3c:	1c43      	adds	r3, r0, #1
 8008d3e:	4604      	mov	r4, r0
 8008d40:	d14d      	bne.n	8008dde <_malloc_r+0xde>
 8008d42:	6834      	ldr	r4, [r6, #0]
 8008d44:	4626      	mov	r6, r4
 8008d46:	2e00      	cmp	r6, #0
 8008d48:	d140      	bne.n	8008dcc <_malloc_r+0xcc>
 8008d4a:	6823      	ldr	r3, [r4, #0]
 8008d4c:	4631      	mov	r1, r6
 8008d4e:	4638      	mov	r0, r7
 8008d50:	eb04 0803 	add.w	r8, r4, r3
 8008d54:	f000 f848 	bl	8008de8 <_sbrk_r>
 8008d58:	4580      	cmp	r8, r0
 8008d5a:	d13a      	bne.n	8008dd2 <_malloc_r+0xd2>
 8008d5c:	6821      	ldr	r1, [r4, #0]
 8008d5e:	3503      	adds	r5, #3
 8008d60:	1a6d      	subs	r5, r5, r1
 8008d62:	f025 0503 	bic.w	r5, r5, #3
 8008d66:	3508      	adds	r5, #8
 8008d68:	2d0c      	cmp	r5, #12
 8008d6a:	bf38      	it	cc
 8008d6c:	250c      	movcc	r5, #12
 8008d6e:	4638      	mov	r0, r7
 8008d70:	4629      	mov	r1, r5
 8008d72:	f7ff ffa5 	bl	8008cc0 <sbrk_aligned>
 8008d76:	3001      	adds	r0, #1
 8008d78:	d02b      	beq.n	8008dd2 <_malloc_r+0xd2>
 8008d7a:	6823      	ldr	r3, [r4, #0]
 8008d7c:	442b      	add	r3, r5
 8008d7e:	6023      	str	r3, [r4, #0]
 8008d80:	e00e      	b.n	8008da0 <_malloc_r+0xa0>
 8008d82:	6822      	ldr	r2, [r4, #0]
 8008d84:	1b52      	subs	r2, r2, r5
 8008d86:	d41e      	bmi.n	8008dc6 <_malloc_r+0xc6>
 8008d88:	2a0b      	cmp	r2, #11
 8008d8a:	d916      	bls.n	8008dba <_malloc_r+0xba>
 8008d8c:	1961      	adds	r1, r4, r5
 8008d8e:	42a3      	cmp	r3, r4
 8008d90:	6025      	str	r5, [r4, #0]
 8008d92:	bf18      	it	ne
 8008d94:	6059      	strne	r1, [r3, #4]
 8008d96:	6863      	ldr	r3, [r4, #4]
 8008d98:	bf08      	it	eq
 8008d9a:	6031      	streq	r1, [r6, #0]
 8008d9c:	5162      	str	r2, [r4, r5]
 8008d9e:	604b      	str	r3, [r1, #4]
 8008da0:	4638      	mov	r0, r7
 8008da2:	f104 060b 	add.w	r6, r4, #11
 8008da6:	f000 f855 	bl	8008e54 <__malloc_unlock>
 8008daa:	f026 0607 	bic.w	r6, r6, #7
 8008dae:	1d23      	adds	r3, r4, #4
 8008db0:	1af2      	subs	r2, r6, r3
 8008db2:	d0b6      	beq.n	8008d22 <_malloc_r+0x22>
 8008db4:	1b9b      	subs	r3, r3, r6
 8008db6:	50a3      	str	r3, [r4, r2]
 8008db8:	e7b3      	b.n	8008d22 <_malloc_r+0x22>
 8008dba:	6862      	ldr	r2, [r4, #4]
 8008dbc:	42a3      	cmp	r3, r4
 8008dbe:	bf0c      	ite	eq
 8008dc0:	6032      	streq	r2, [r6, #0]
 8008dc2:	605a      	strne	r2, [r3, #4]
 8008dc4:	e7ec      	b.n	8008da0 <_malloc_r+0xa0>
 8008dc6:	4623      	mov	r3, r4
 8008dc8:	6864      	ldr	r4, [r4, #4]
 8008dca:	e7b2      	b.n	8008d32 <_malloc_r+0x32>
 8008dcc:	4634      	mov	r4, r6
 8008dce:	6876      	ldr	r6, [r6, #4]
 8008dd0:	e7b9      	b.n	8008d46 <_malloc_r+0x46>
 8008dd2:	230c      	movs	r3, #12
 8008dd4:	4638      	mov	r0, r7
 8008dd6:	603b      	str	r3, [r7, #0]
 8008dd8:	f000 f83c 	bl	8008e54 <__malloc_unlock>
 8008ddc:	e7a1      	b.n	8008d22 <_malloc_r+0x22>
 8008dde:	6025      	str	r5, [r4, #0]
 8008de0:	e7de      	b.n	8008da0 <_malloc_r+0xa0>
 8008de2:	bf00      	nop
 8008de4:	20001464 	.word	0x20001464

08008de8 <_sbrk_r>:
 8008de8:	b538      	push	{r3, r4, r5, lr}
 8008dea:	2300      	movs	r3, #0
 8008dec:	4d05      	ldr	r5, [pc, #20]	; (8008e04 <_sbrk_r+0x1c>)
 8008dee:	4604      	mov	r4, r0
 8008df0:	4608      	mov	r0, r1
 8008df2:	602b      	str	r3, [r5, #0]
 8008df4:	f7f7 fcd0 	bl	8000798 <_sbrk>
 8008df8:	1c43      	adds	r3, r0, #1
 8008dfa:	d102      	bne.n	8008e02 <_sbrk_r+0x1a>
 8008dfc:	682b      	ldr	r3, [r5, #0]
 8008dfe:	b103      	cbz	r3, 8008e02 <_sbrk_r+0x1a>
 8008e00:	6023      	str	r3, [r4, #0]
 8008e02:	bd38      	pop	{r3, r4, r5, pc}
 8008e04:	2000146c 	.word	0x2000146c

08008e08 <siprintf>:
 8008e08:	b40e      	push	{r1, r2, r3}
 8008e0a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008e0e:	b500      	push	{lr}
 8008e10:	b09c      	sub	sp, #112	; 0x70
 8008e12:	ab1d      	add	r3, sp, #116	; 0x74
 8008e14:	9002      	str	r0, [sp, #8]
 8008e16:	9006      	str	r0, [sp, #24]
 8008e18:	9107      	str	r1, [sp, #28]
 8008e1a:	9104      	str	r1, [sp, #16]
 8008e1c:	4808      	ldr	r0, [pc, #32]	; (8008e40 <siprintf+0x38>)
 8008e1e:	4909      	ldr	r1, [pc, #36]	; (8008e44 <siprintf+0x3c>)
 8008e20:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e24:	9105      	str	r1, [sp, #20]
 8008e26:	6800      	ldr	r0, [r0, #0]
 8008e28:	a902      	add	r1, sp, #8
 8008e2a:	9301      	str	r3, [sp, #4]
 8008e2c:	f000 f874 	bl	8008f18 <_svfiprintf_r>
 8008e30:	2200      	movs	r2, #0
 8008e32:	9b02      	ldr	r3, [sp, #8]
 8008e34:	701a      	strb	r2, [r3, #0]
 8008e36:	b01c      	add	sp, #112	; 0x70
 8008e38:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e3c:	b003      	add	sp, #12
 8008e3e:	4770      	bx	lr
 8008e40:	20000188 	.word	0x20000188
 8008e44:	ffff0208 	.word	0xffff0208

08008e48 <__malloc_lock>:
 8008e48:	4801      	ldr	r0, [pc, #4]	; (8008e50 <__malloc_lock+0x8>)
 8008e4a:	f000 bafb 	b.w	8009444 <__retarget_lock_acquire_recursive>
 8008e4e:	bf00      	nop
 8008e50:	20001470 	.word	0x20001470

08008e54 <__malloc_unlock>:
 8008e54:	4801      	ldr	r0, [pc, #4]	; (8008e5c <__malloc_unlock+0x8>)
 8008e56:	f000 baf6 	b.w	8009446 <__retarget_lock_release_recursive>
 8008e5a:	bf00      	nop
 8008e5c:	20001470 	.word	0x20001470

08008e60 <__ssputs_r>:
 8008e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e64:	688e      	ldr	r6, [r1, #8]
 8008e66:	4682      	mov	sl, r0
 8008e68:	429e      	cmp	r6, r3
 8008e6a:	460c      	mov	r4, r1
 8008e6c:	4690      	mov	r8, r2
 8008e6e:	461f      	mov	r7, r3
 8008e70:	d838      	bhi.n	8008ee4 <__ssputs_r+0x84>
 8008e72:	898a      	ldrh	r2, [r1, #12]
 8008e74:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008e78:	d032      	beq.n	8008ee0 <__ssputs_r+0x80>
 8008e7a:	6825      	ldr	r5, [r4, #0]
 8008e7c:	6909      	ldr	r1, [r1, #16]
 8008e7e:	3301      	adds	r3, #1
 8008e80:	eba5 0901 	sub.w	r9, r5, r1
 8008e84:	6965      	ldr	r5, [r4, #20]
 8008e86:	444b      	add	r3, r9
 8008e88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008e8c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008e90:	106d      	asrs	r5, r5, #1
 8008e92:	429d      	cmp	r5, r3
 8008e94:	bf38      	it	cc
 8008e96:	461d      	movcc	r5, r3
 8008e98:	0553      	lsls	r3, r2, #21
 8008e9a:	d531      	bpl.n	8008f00 <__ssputs_r+0xa0>
 8008e9c:	4629      	mov	r1, r5
 8008e9e:	f7ff ff2f 	bl	8008d00 <_malloc_r>
 8008ea2:	4606      	mov	r6, r0
 8008ea4:	b950      	cbnz	r0, 8008ebc <__ssputs_r+0x5c>
 8008ea6:	230c      	movs	r3, #12
 8008ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8008eac:	f8ca 3000 	str.w	r3, [sl]
 8008eb0:	89a3      	ldrh	r3, [r4, #12]
 8008eb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008eb6:	81a3      	strh	r3, [r4, #12]
 8008eb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ebc:	464a      	mov	r2, r9
 8008ebe:	6921      	ldr	r1, [r4, #16]
 8008ec0:	f000 fad0 	bl	8009464 <memcpy>
 8008ec4:	89a3      	ldrh	r3, [r4, #12]
 8008ec6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008eca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ece:	81a3      	strh	r3, [r4, #12]
 8008ed0:	6126      	str	r6, [r4, #16]
 8008ed2:	444e      	add	r6, r9
 8008ed4:	6026      	str	r6, [r4, #0]
 8008ed6:	463e      	mov	r6, r7
 8008ed8:	6165      	str	r5, [r4, #20]
 8008eda:	eba5 0509 	sub.w	r5, r5, r9
 8008ede:	60a5      	str	r5, [r4, #8]
 8008ee0:	42be      	cmp	r6, r7
 8008ee2:	d900      	bls.n	8008ee6 <__ssputs_r+0x86>
 8008ee4:	463e      	mov	r6, r7
 8008ee6:	4632      	mov	r2, r6
 8008ee8:	4641      	mov	r1, r8
 8008eea:	6820      	ldr	r0, [r4, #0]
 8008eec:	f000 fac8 	bl	8009480 <memmove>
 8008ef0:	68a3      	ldr	r3, [r4, #8]
 8008ef2:	2000      	movs	r0, #0
 8008ef4:	1b9b      	subs	r3, r3, r6
 8008ef6:	60a3      	str	r3, [r4, #8]
 8008ef8:	6823      	ldr	r3, [r4, #0]
 8008efa:	4433      	add	r3, r6
 8008efc:	6023      	str	r3, [r4, #0]
 8008efe:	e7db      	b.n	8008eb8 <__ssputs_r+0x58>
 8008f00:	462a      	mov	r2, r5
 8008f02:	f000 fad7 	bl	80094b4 <_realloc_r>
 8008f06:	4606      	mov	r6, r0
 8008f08:	2800      	cmp	r0, #0
 8008f0a:	d1e1      	bne.n	8008ed0 <__ssputs_r+0x70>
 8008f0c:	4650      	mov	r0, sl
 8008f0e:	6921      	ldr	r1, [r4, #16]
 8008f10:	f7ff fe8e 	bl	8008c30 <_free_r>
 8008f14:	e7c7      	b.n	8008ea6 <__ssputs_r+0x46>
	...

08008f18 <_svfiprintf_r>:
 8008f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f1c:	4698      	mov	r8, r3
 8008f1e:	898b      	ldrh	r3, [r1, #12]
 8008f20:	4607      	mov	r7, r0
 8008f22:	061b      	lsls	r3, r3, #24
 8008f24:	460d      	mov	r5, r1
 8008f26:	4614      	mov	r4, r2
 8008f28:	b09d      	sub	sp, #116	; 0x74
 8008f2a:	d50e      	bpl.n	8008f4a <_svfiprintf_r+0x32>
 8008f2c:	690b      	ldr	r3, [r1, #16]
 8008f2e:	b963      	cbnz	r3, 8008f4a <_svfiprintf_r+0x32>
 8008f30:	2140      	movs	r1, #64	; 0x40
 8008f32:	f7ff fee5 	bl	8008d00 <_malloc_r>
 8008f36:	6028      	str	r0, [r5, #0]
 8008f38:	6128      	str	r0, [r5, #16]
 8008f3a:	b920      	cbnz	r0, 8008f46 <_svfiprintf_r+0x2e>
 8008f3c:	230c      	movs	r3, #12
 8008f3e:	603b      	str	r3, [r7, #0]
 8008f40:	f04f 30ff 	mov.w	r0, #4294967295
 8008f44:	e0d1      	b.n	80090ea <_svfiprintf_r+0x1d2>
 8008f46:	2340      	movs	r3, #64	; 0x40
 8008f48:	616b      	str	r3, [r5, #20]
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	9309      	str	r3, [sp, #36]	; 0x24
 8008f4e:	2320      	movs	r3, #32
 8008f50:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f54:	2330      	movs	r3, #48	; 0x30
 8008f56:	f04f 0901 	mov.w	r9, #1
 8008f5a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f5e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009104 <_svfiprintf_r+0x1ec>
 8008f62:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f66:	4623      	mov	r3, r4
 8008f68:	469a      	mov	sl, r3
 8008f6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f6e:	b10a      	cbz	r2, 8008f74 <_svfiprintf_r+0x5c>
 8008f70:	2a25      	cmp	r2, #37	; 0x25
 8008f72:	d1f9      	bne.n	8008f68 <_svfiprintf_r+0x50>
 8008f74:	ebba 0b04 	subs.w	fp, sl, r4
 8008f78:	d00b      	beq.n	8008f92 <_svfiprintf_r+0x7a>
 8008f7a:	465b      	mov	r3, fp
 8008f7c:	4622      	mov	r2, r4
 8008f7e:	4629      	mov	r1, r5
 8008f80:	4638      	mov	r0, r7
 8008f82:	f7ff ff6d 	bl	8008e60 <__ssputs_r>
 8008f86:	3001      	adds	r0, #1
 8008f88:	f000 80aa 	beq.w	80090e0 <_svfiprintf_r+0x1c8>
 8008f8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f8e:	445a      	add	r2, fp
 8008f90:	9209      	str	r2, [sp, #36]	; 0x24
 8008f92:	f89a 3000 	ldrb.w	r3, [sl]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	f000 80a2 	beq.w	80090e0 <_svfiprintf_r+0x1c8>
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	f04f 32ff 	mov.w	r2, #4294967295
 8008fa2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008fa6:	f10a 0a01 	add.w	sl, sl, #1
 8008faa:	9304      	str	r3, [sp, #16]
 8008fac:	9307      	str	r3, [sp, #28]
 8008fae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008fb2:	931a      	str	r3, [sp, #104]	; 0x68
 8008fb4:	4654      	mov	r4, sl
 8008fb6:	2205      	movs	r2, #5
 8008fb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fbc:	4851      	ldr	r0, [pc, #324]	; (8009104 <_svfiprintf_r+0x1ec>)
 8008fbe:	f000 fa43 	bl	8009448 <memchr>
 8008fc2:	9a04      	ldr	r2, [sp, #16]
 8008fc4:	b9d8      	cbnz	r0, 8008ffe <_svfiprintf_r+0xe6>
 8008fc6:	06d0      	lsls	r0, r2, #27
 8008fc8:	bf44      	itt	mi
 8008fca:	2320      	movmi	r3, #32
 8008fcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fd0:	0711      	lsls	r1, r2, #28
 8008fd2:	bf44      	itt	mi
 8008fd4:	232b      	movmi	r3, #43	; 0x2b
 8008fd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fda:	f89a 3000 	ldrb.w	r3, [sl]
 8008fde:	2b2a      	cmp	r3, #42	; 0x2a
 8008fe0:	d015      	beq.n	800900e <_svfiprintf_r+0xf6>
 8008fe2:	4654      	mov	r4, sl
 8008fe4:	2000      	movs	r0, #0
 8008fe6:	f04f 0c0a 	mov.w	ip, #10
 8008fea:	9a07      	ldr	r2, [sp, #28]
 8008fec:	4621      	mov	r1, r4
 8008fee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ff2:	3b30      	subs	r3, #48	; 0x30
 8008ff4:	2b09      	cmp	r3, #9
 8008ff6:	d94e      	bls.n	8009096 <_svfiprintf_r+0x17e>
 8008ff8:	b1b0      	cbz	r0, 8009028 <_svfiprintf_r+0x110>
 8008ffa:	9207      	str	r2, [sp, #28]
 8008ffc:	e014      	b.n	8009028 <_svfiprintf_r+0x110>
 8008ffe:	eba0 0308 	sub.w	r3, r0, r8
 8009002:	fa09 f303 	lsl.w	r3, r9, r3
 8009006:	4313      	orrs	r3, r2
 8009008:	46a2      	mov	sl, r4
 800900a:	9304      	str	r3, [sp, #16]
 800900c:	e7d2      	b.n	8008fb4 <_svfiprintf_r+0x9c>
 800900e:	9b03      	ldr	r3, [sp, #12]
 8009010:	1d19      	adds	r1, r3, #4
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	9103      	str	r1, [sp, #12]
 8009016:	2b00      	cmp	r3, #0
 8009018:	bfbb      	ittet	lt
 800901a:	425b      	neglt	r3, r3
 800901c:	f042 0202 	orrlt.w	r2, r2, #2
 8009020:	9307      	strge	r3, [sp, #28]
 8009022:	9307      	strlt	r3, [sp, #28]
 8009024:	bfb8      	it	lt
 8009026:	9204      	strlt	r2, [sp, #16]
 8009028:	7823      	ldrb	r3, [r4, #0]
 800902a:	2b2e      	cmp	r3, #46	; 0x2e
 800902c:	d10c      	bne.n	8009048 <_svfiprintf_r+0x130>
 800902e:	7863      	ldrb	r3, [r4, #1]
 8009030:	2b2a      	cmp	r3, #42	; 0x2a
 8009032:	d135      	bne.n	80090a0 <_svfiprintf_r+0x188>
 8009034:	9b03      	ldr	r3, [sp, #12]
 8009036:	3402      	adds	r4, #2
 8009038:	1d1a      	adds	r2, r3, #4
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	9203      	str	r2, [sp, #12]
 800903e:	2b00      	cmp	r3, #0
 8009040:	bfb8      	it	lt
 8009042:	f04f 33ff 	movlt.w	r3, #4294967295
 8009046:	9305      	str	r3, [sp, #20]
 8009048:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8009108 <_svfiprintf_r+0x1f0>
 800904c:	2203      	movs	r2, #3
 800904e:	4650      	mov	r0, sl
 8009050:	7821      	ldrb	r1, [r4, #0]
 8009052:	f000 f9f9 	bl	8009448 <memchr>
 8009056:	b140      	cbz	r0, 800906a <_svfiprintf_r+0x152>
 8009058:	2340      	movs	r3, #64	; 0x40
 800905a:	eba0 000a 	sub.w	r0, r0, sl
 800905e:	fa03 f000 	lsl.w	r0, r3, r0
 8009062:	9b04      	ldr	r3, [sp, #16]
 8009064:	3401      	adds	r4, #1
 8009066:	4303      	orrs	r3, r0
 8009068:	9304      	str	r3, [sp, #16]
 800906a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800906e:	2206      	movs	r2, #6
 8009070:	4826      	ldr	r0, [pc, #152]	; (800910c <_svfiprintf_r+0x1f4>)
 8009072:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009076:	f000 f9e7 	bl	8009448 <memchr>
 800907a:	2800      	cmp	r0, #0
 800907c:	d038      	beq.n	80090f0 <_svfiprintf_r+0x1d8>
 800907e:	4b24      	ldr	r3, [pc, #144]	; (8009110 <_svfiprintf_r+0x1f8>)
 8009080:	bb1b      	cbnz	r3, 80090ca <_svfiprintf_r+0x1b2>
 8009082:	9b03      	ldr	r3, [sp, #12]
 8009084:	3307      	adds	r3, #7
 8009086:	f023 0307 	bic.w	r3, r3, #7
 800908a:	3308      	adds	r3, #8
 800908c:	9303      	str	r3, [sp, #12]
 800908e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009090:	4433      	add	r3, r6
 8009092:	9309      	str	r3, [sp, #36]	; 0x24
 8009094:	e767      	b.n	8008f66 <_svfiprintf_r+0x4e>
 8009096:	460c      	mov	r4, r1
 8009098:	2001      	movs	r0, #1
 800909a:	fb0c 3202 	mla	r2, ip, r2, r3
 800909e:	e7a5      	b.n	8008fec <_svfiprintf_r+0xd4>
 80090a0:	2300      	movs	r3, #0
 80090a2:	f04f 0c0a 	mov.w	ip, #10
 80090a6:	4619      	mov	r1, r3
 80090a8:	3401      	adds	r4, #1
 80090aa:	9305      	str	r3, [sp, #20]
 80090ac:	4620      	mov	r0, r4
 80090ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090b2:	3a30      	subs	r2, #48	; 0x30
 80090b4:	2a09      	cmp	r2, #9
 80090b6:	d903      	bls.n	80090c0 <_svfiprintf_r+0x1a8>
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d0c5      	beq.n	8009048 <_svfiprintf_r+0x130>
 80090bc:	9105      	str	r1, [sp, #20]
 80090be:	e7c3      	b.n	8009048 <_svfiprintf_r+0x130>
 80090c0:	4604      	mov	r4, r0
 80090c2:	2301      	movs	r3, #1
 80090c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80090c8:	e7f0      	b.n	80090ac <_svfiprintf_r+0x194>
 80090ca:	ab03      	add	r3, sp, #12
 80090cc:	9300      	str	r3, [sp, #0]
 80090ce:	462a      	mov	r2, r5
 80090d0:	4638      	mov	r0, r7
 80090d2:	4b10      	ldr	r3, [pc, #64]	; (8009114 <_svfiprintf_r+0x1fc>)
 80090d4:	a904      	add	r1, sp, #16
 80090d6:	f3af 8000 	nop.w
 80090da:	1c42      	adds	r2, r0, #1
 80090dc:	4606      	mov	r6, r0
 80090de:	d1d6      	bne.n	800908e <_svfiprintf_r+0x176>
 80090e0:	89ab      	ldrh	r3, [r5, #12]
 80090e2:	065b      	lsls	r3, r3, #25
 80090e4:	f53f af2c 	bmi.w	8008f40 <_svfiprintf_r+0x28>
 80090e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090ea:	b01d      	add	sp, #116	; 0x74
 80090ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090f0:	ab03      	add	r3, sp, #12
 80090f2:	9300      	str	r3, [sp, #0]
 80090f4:	462a      	mov	r2, r5
 80090f6:	4638      	mov	r0, r7
 80090f8:	4b06      	ldr	r3, [pc, #24]	; (8009114 <_svfiprintf_r+0x1fc>)
 80090fa:	a904      	add	r1, sp, #16
 80090fc:	f000 f87c 	bl	80091f8 <_printf_i>
 8009100:	e7eb      	b.n	80090da <_svfiprintf_r+0x1c2>
 8009102:	bf00      	nop
 8009104:	080095ca 	.word	0x080095ca
 8009108:	080095d0 	.word	0x080095d0
 800910c:	080095d4 	.word	0x080095d4
 8009110:	00000000 	.word	0x00000000
 8009114:	08008e61 	.word	0x08008e61

08009118 <_printf_common>:
 8009118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800911c:	4616      	mov	r6, r2
 800911e:	4699      	mov	r9, r3
 8009120:	688a      	ldr	r2, [r1, #8]
 8009122:	690b      	ldr	r3, [r1, #16]
 8009124:	4607      	mov	r7, r0
 8009126:	4293      	cmp	r3, r2
 8009128:	bfb8      	it	lt
 800912a:	4613      	movlt	r3, r2
 800912c:	6033      	str	r3, [r6, #0]
 800912e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009132:	460c      	mov	r4, r1
 8009134:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009138:	b10a      	cbz	r2, 800913e <_printf_common+0x26>
 800913a:	3301      	adds	r3, #1
 800913c:	6033      	str	r3, [r6, #0]
 800913e:	6823      	ldr	r3, [r4, #0]
 8009140:	0699      	lsls	r1, r3, #26
 8009142:	bf42      	ittt	mi
 8009144:	6833      	ldrmi	r3, [r6, #0]
 8009146:	3302      	addmi	r3, #2
 8009148:	6033      	strmi	r3, [r6, #0]
 800914a:	6825      	ldr	r5, [r4, #0]
 800914c:	f015 0506 	ands.w	r5, r5, #6
 8009150:	d106      	bne.n	8009160 <_printf_common+0x48>
 8009152:	f104 0a19 	add.w	sl, r4, #25
 8009156:	68e3      	ldr	r3, [r4, #12]
 8009158:	6832      	ldr	r2, [r6, #0]
 800915a:	1a9b      	subs	r3, r3, r2
 800915c:	42ab      	cmp	r3, r5
 800915e:	dc28      	bgt.n	80091b2 <_printf_common+0x9a>
 8009160:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009164:	1e13      	subs	r3, r2, #0
 8009166:	6822      	ldr	r2, [r4, #0]
 8009168:	bf18      	it	ne
 800916a:	2301      	movne	r3, #1
 800916c:	0692      	lsls	r2, r2, #26
 800916e:	d42d      	bmi.n	80091cc <_printf_common+0xb4>
 8009170:	4649      	mov	r1, r9
 8009172:	4638      	mov	r0, r7
 8009174:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009178:	47c0      	blx	r8
 800917a:	3001      	adds	r0, #1
 800917c:	d020      	beq.n	80091c0 <_printf_common+0xa8>
 800917e:	6823      	ldr	r3, [r4, #0]
 8009180:	68e5      	ldr	r5, [r4, #12]
 8009182:	f003 0306 	and.w	r3, r3, #6
 8009186:	2b04      	cmp	r3, #4
 8009188:	bf18      	it	ne
 800918a:	2500      	movne	r5, #0
 800918c:	6832      	ldr	r2, [r6, #0]
 800918e:	f04f 0600 	mov.w	r6, #0
 8009192:	68a3      	ldr	r3, [r4, #8]
 8009194:	bf08      	it	eq
 8009196:	1aad      	subeq	r5, r5, r2
 8009198:	6922      	ldr	r2, [r4, #16]
 800919a:	bf08      	it	eq
 800919c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80091a0:	4293      	cmp	r3, r2
 80091a2:	bfc4      	itt	gt
 80091a4:	1a9b      	subgt	r3, r3, r2
 80091a6:	18ed      	addgt	r5, r5, r3
 80091a8:	341a      	adds	r4, #26
 80091aa:	42b5      	cmp	r5, r6
 80091ac:	d11a      	bne.n	80091e4 <_printf_common+0xcc>
 80091ae:	2000      	movs	r0, #0
 80091b0:	e008      	b.n	80091c4 <_printf_common+0xac>
 80091b2:	2301      	movs	r3, #1
 80091b4:	4652      	mov	r2, sl
 80091b6:	4649      	mov	r1, r9
 80091b8:	4638      	mov	r0, r7
 80091ba:	47c0      	blx	r8
 80091bc:	3001      	adds	r0, #1
 80091be:	d103      	bne.n	80091c8 <_printf_common+0xb0>
 80091c0:	f04f 30ff 	mov.w	r0, #4294967295
 80091c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091c8:	3501      	adds	r5, #1
 80091ca:	e7c4      	b.n	8009156 <_printf_common+0x3e>
 80091cc:	2030      	movs	r0, #48	; 0x30
 80091ce:	18e1      	adds	r1, r4, r3
 80091d0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80091d4:	1c5a      	adds	r2, r3, #1
 80091d6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80091da:	4422      	add	r2, r4
 80091dc:	3302      	adds	r3, #2
 80091de:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80091e2:	e7c5      	b.n	8009170 <_printf_common+0x58>
 80091e4:	2301      	movs	r3, #1
 80091e6:	4622      	mov	r2, r4
 80091e8:	4649      	mov	r1, r9
 80091ea:	4638      	mov	r0, r7
 80091ec:	47c0      	blx	r8
 80091ee:	3001      	adds	r0, #1
 80091f0:	d0e6      	beq.n	80091c0 <_printf_common+0xa8>
 80091f2:	3601      	adds	r6, #1
 80091f4:	e7d9      	b.n	80091aa <_printf_common+0x92>
	...

080091f8 <_printf_i>:
 80091f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80091fc:	7e0f      	ldrb	r7, [r1, #24]
 80091fe:	4691      	mov	r9, r2
 8009200:	2f78      	cmp	r7, #120	; 0x78
 8009202:	4680      	mov	r8, r0
 8009204:	460c      	mov	r4, r1
 8009206:	469a      	mov	sl, r3
 8009208:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800920a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800920e:	d807      	bhi.n	8009220 <_printf_i+0x28>
 8009210:	2f62      	cmp	r7, #98	; 0x62
 8009212:	d80a      	bhi.n	800922a <_printf_i+0x32>
 8009214:	2f00      	cmp	r7, #0
 8009216:	f000 80d9 	beq.w	80093cc <_printf_i+0x1d4>
 800921a:	2f58      	cmp	r7, #88	; 0x58
 800921c:	f000 80a4 	beq.w	8009368 <_printf_i+0x170>
 8009220:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009224:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009228:	e03a      	b.n	80092a0 <_printf_i+0xa8>
 800922a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800922e:	2b15      	cmp	r3, #21
 8009230:	d8f6      	bhi.n	8009220 <_printf_i+0x28>
 8009232:	a101      	add	r1, pc, #4	; (adr r1, 8009238 <_printf_i+0x40>)
 8009234:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009238:	08009291 	.word	0x08009291
 800923c:	080092a5 	.word	0x080092a5
 8009240:	08009221 	.word	0x08009221
 8009244:	08009221 	.word	0x08009221
 8009248:	08009221 	.word	0x08009221
 800924c:	08009221 	.word	0x08009221
 8009250:	080092a5 	.word	0x080092a5
 8009254:	08009221 	.word	0x08009221
 8009258:	08009221 	.word	0x08009221
 800925c:	08009221 	.word	0x08009221
 8009260:	08009221 	.word	0x08009221
 8009264:	080093b3 	.word	0x080093b3
 8009268:	080092d5 	.word	0x080092d5
 800926c:	08009395 	.word	0x08009395
 8009270:	08009221 	.word	0x08009221
 8009274:	08009221 	.word	0x08009221
 8009278:	080093d5 	.word	0x080093d5
 800927c:	08009221 	.word	0x08009221
 8009280:	080092d5 	.word	0x080092d5
 8009284:	08009221 	.word	0x08009221
 8009288:	08009221 	.word	0x08009221
 800928c:	0800939d 	.word	0x0800939d
 8009290:	682b      	ldr	r3, [r5, #0]
 8009292:	1d1a      	adds	r2, r3, #4
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	602a      	str	r2, [r5, #0]
 8009298:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800929c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80092a0:	2301      	movs	r3, #1
 80092a2:	e0a4      	b.n	80093ee <_printf_i+0x1f6>
 80092a4:	6820      	ldr	r0, [r4, #0]
 80092a6:	6829      	ldr	r1, [r5, #0]
 80092a8:	0606      	lsls	r6, r0, #24
 80092aa:	f101 0304 	add.w	r3, r1, #4
 80092ae:	d50a      	bpl.n	80092c6 <_printf_i+0xce>
 80092b0:	680e      	ldr	r6, [r1, #0]
 80092b2:	602b      	str	r3, [r5, #0]
 80092b4:	2e00      	cmp	r6, #0
 80092b6:	da03      	bge.n	80092c0 <_printf_i+0xc8>
 80092b8:	232d      	movs	r3, #45	; 0x2d
 80092ba:	4276      	negs	r6, r6
 80092bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092c0:	230a      	movs	r3, #10
 80092c2:	485e      	ldr	r0, [pc, #376]	; (800943c <_printf_i+0x244>)
 80092c4:	e019      	b.n	80092fa <_printf_i+0x102>
 80092c6:	680e      	ldr	r6, [r1, #0]
 80092c8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80092cc:	602b      	str	r3, [r5, #0]
 80092ce:	bf18      	it	ne
 80092d0:	b236      	sxthne	r6, r6
 80092d2:	e7ef      	b.n	80092b4 <_printf_i+0xbc>
 80092d4:	682b      	ldr	r3, [r5, #0]
 80092d6:	6820      	ldr	r0, [r4, #0]
 80092d8:	1d19      	adds	r1, r3, #4
 80092da:	6029      	str	r1, [r5, #0]
 80092dc:	0601      	lsls	r1, r0, #24
 80092de:	d501      	bpl.n	80092e4 <_printf_i+0xec>
 80092e0:	681e      	ldr	r6, [r3, #0]
 80092e2:	e002      	b.n	80092ea <_printf_i+0xf2>
 80092e4:	0646      	lsls	r6, r0, #25
 80092e6:	d5fb      	bpl.n	80092e0 <_printf_i+0xe8>
 80092e8:	881e      	ldrh	r6, [r3, #0]
 80092ea:	2f6f      	cmp	r7, #111	; 0x6f
 80092ec:	bf0c      	ite	eq
 80092ee:	2308      	moveq	r3, #8
 80092f0:	230a      	movne	r3, #10
 80092f2:	4852      	ldr	r0, [pc, #328]	; (800943c <_printf_i+0x244>)
 80092f4:	2100      	movs	r1, #0
 80092f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80092fa:	6865      	ldr	r5, [r4, #4]
 80092fc:	2d00      	cmp	r5, #0
 80092fe:	bfa8      	it	ge
 8009300:	6821      	ldrge	r1, [r4, #0]
 8009302:	60a5      	str	r5, [r4, #8]
 8009304:	bfa4      	itt	ge
 8009306:	f021 0104 	bicge.w	r1, r1, #4
 800930a:	6021      	strge	r1, [r4, #0]
 800930c:	b90e      	cbnz	r6, 8009312 <_printf_i+0x11a>
 800930e:	2d00      	cmp	r5, #0
 8009310:	d04d      	beq.n	80093ae <_printf_i+0x1b6>
 8009312:	4615      	mov	r5, r2
 8009314:	fbb6 f1f3 	udiv	r1, r6, r3
 8009318:	fb03 6711 	mls	r7, r3, r1, r6
 800931c:	5dc7      	ldrb	r7, [r0, r7]
 800931e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009322:	4637      	mov	r7, r6
 8009324:	42bb      	cmp	r3, r7
 8009326:	460e      	mov	r6, r1
 8009328:	d9f4      	bls.n	8009314 <_printf_i+0x11c>
 800932a:	2b08      	cmp	r3, #8
 800932c:	d10b      	bne.n	8009346 <_printf_i+0x14e>
 800932e:	6823      	ldr	r3, [r4, #0]
 8009330:	07de      	lsls	r6, r3, #31
 8009332:	d508      	bpl.n	8009346 <_printf_i+0x14e>
 8009334:	6923      	ldr	r3, [r4, #16]
 8009336:	6861      	ldr	r1, [r4, #4]
 8009338:	4299      	cmp	r1, r3
 800933a:	bfde      	ittt	le
 800933c:	2330      	movle	r3, #48	; 0x30
 800933e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009342:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009346:	1b52      	subs	r2, r2, r5
 8009348:	6122      	str	r2, [r4, #16]
 800934a:	464b      	mov	r3, r9
 800934c:	4621      	mov	r1, r4
 800934e:	4640      	mov	r0, r8
 8009350:	f8cd a000 	str.w	sl, [sp]
 8009354:	aa03      	add	r2, sp, #12
 8009356:	f7ff fedf 	bl	8009118 <_printf_common>
 800935a:	3001      	adds	r0, #1
 800935c:	d14c      	bne.n	80093f8 <_printf_i+0x200>
 800935e:	f04f 30ff 	mov.w	r0, #4294967295
 8009362:	b004      	add	sp, #16
 8009364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009368:	4834      	ldr	r0, [pc, #208]	; (800943c <_printf_i+0x244>)
 800936a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800936e:	6829      	ldr	r1, [r5, #0]
 8009370:	6823      	ldr	r3, [r4, #0]
 8009372:	f851 6b04 	ldr.w	r6, [r1], #4
 8009376:	6029      	str	r1, [r5, #0]
 8009378:	061d      	lsls	r5, r3, #24
 800937a:	d514      	bpl.n	80093a6 <_printf_i+0x1ae>
 800937c:	07df      	lsls	r7, r3, #31
 800937e:	bf44      	itt	mi
 8009380:	f043 0320 	orrmi.w	r3, r3, #32
 8009384:	6023      	strmi	r3, [r4, #0]
 8009386:	b91e      	cbnz	r6, 8009390 <_printf_i+0x198>
 8009388:	6823      	ldr	r3, [r4, #0]
 800938a:	f023 0320 	bic.w	r3, r3, #32
 800938e:	6023      	str	r3, [r4, #0]
 8009390:	2310      	movs	r3, #16
 8009392:	e7af      	b.n	80092f4 <_printf_i+0xfc>
 8009394:	6823      	ldr	r3, [r4, #0]
 8009396:	f043 0320 	orr.w	r3, r3, #32
 800939a:	6023      	str	r3, [r4, #0]
 800939c:	2378      	movs	r3, #120	; 0x78
 800939e:	4828      	ldr	r0, [pc, #160]	; (8009440 <_printf_i+0x248>)
 80093a0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80093a4:	e7e3      	b.n	800936e <_printf_i+0x176>
 80093a6:	0659      	lsls	r1, r3, #25
 80093a8:	bf48      	it	mi
 80093aa:	b2b6      	uxthmi	r6, r6
 80093ac:	e7e6      	b.n	800937c <_printf_i+0x184>
 80093ae:	4615      	mov	r5, r2
 80093b0:	e7bb      	b.n	800932a <_printf_i+0x132>
 80093b2:	682b      	ldr	r3, [r5, #0]
 80093b4:	6826      	ldr	r6, [r4, #0]
 80093b6:	1d18      	adds	r0, r3, #4
 80093b8:	6961      	ldr	r1, [r4, #20]
 80093ba:	6028      	str	r0, [r5, #0]
 80093bc:	0635      	lsls	r5, r6, #24
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	d501      	bpl.n	80093c6 <_printf_i+0x1ce>
 80093c2:	6019      	str	r1, [r3, #0]
 80093c4:	e002      	b.n	80093cc <_printf_i+0x1d4>
 80093c6:	0670      	lsls	r0, r6, #25
 80093c8:	d5fb      	bpl.n	80093c2 <_printf_i+0x1ca>
 80093ca:	8019      	strh	r1, [r3, #0]
 80093cc:	2300      	movs	r3, #0
 80093ce:	4615      	mov	r5, r2
 80093d0:	6123      	str	r3, [r4, #16]
 80093d2:	e7ba      	b.n	800934a <_printf_i+0x152>
 80093d4:	682b      	ldr	r3, [r5, #0]
 80093d6:	2100      	movs	r1, #0
 80093d8:	1d1a      	adds	r2, r3, #4
 80093da:	602a      	str	r2, [r5, #0]
 80093dc:	681d      	ldr	r5, [r3, #0]
 80093de:	6862      	ldr	r2, [r4, #4]
 80093e0:	4628      	mov	r0, r5
 80093e2:	f000 f831 	bl	8009448 <memchr>
 80093e6:	b108      	cbz	r0, 80093ec <_printf_i+0x1f4>
 80093e8:	1b40      	subs	r0, r0, r5
 80093ea:	6060      	str	r0, [r4, #4]
 80093ec:	6863      	ldr	r3, [r4, #4]
 80093ee:	6123      	str	r3, [r4, #16]
 80093f0:	2300      	movs	r3, #0
 80093f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093f6:	e7a8      	b.n	800934a <_printf_i+0x152>
 80093f8:	462a      	mov	r2, r5
 80093fa:	4649      	mov	r1, r9
 80093fc:	4640      	mov	r0, r8
 80093fe:	6923      	ldr	r3, [r4, #16]
 8009400:	47d0      	blx	sl
 8009402:	3001      	adds	r0, #1
 8009404:	d0ab      	beq.n	800935e <_printf_i+0x166>
 8009406:	6823      	ldr	r3, [r4, #0]
 8009408:	079b      	lsls	r3, r3, #30
 800940a:	d413      	bmi.n	8009434 <_printf_i+0x23c>
 800940c:	68e0      	ldr	r0, [r4, #12]
 800940e:	9b03      	ldr	r3, [sp, #12]
 8009410:	4298      	cmp	r0, r3
 8009412:	bfb8      	it	lt
 8009414:	4618      	movlt	r0, r3
 8009416:	e7a4      	b.n	8009362 <_printf_i+0x16a>
 8009418:	2301      	movs	r3, #1
 800941a:	4632      	mov	r2, r6
 800941c:	4649      	mov	r1, r9
 800941e:	4640      	mov	r0, r8
 8009420:	47d0      	blx	sl
 8009422:	3001      	adds	r0, #1
 8009424:	d09b      	beq.n	800935e <_printf_i+0x166>
 8009426:	3501      	adds	r5, #1
 8009428:	68e3      	ldr	r3, [r4, #12]
 800942a:	9903      	ldr	r1, [sp, #12]
 800942c:	1a5b      	subs	r3, r3, r1
 800942e:	42ab      	cmp	r3, r5
 8009430:	dcf2      	bgt.n	8009418 <_printf_i+0x220>
 8009432:	e7eb      	b.n	800940c <_printf_i+0x214>
 8009434:	2500      	movs	r5, #0
 8009436:	f104 0619 	add.w	r6, r4, #25
 800943a:	e7f5      	b.n	8009428 <_printf_i+0x230>
 800943c:	080095db 	.word	0x080095db
 8009440:	080095ec 	.word	0x080095ec

08009444 <__retarget_lock_acquire_recursive>:
 8009444:	4770      	bx	lr

08009446 <__retarget_lock_release_recursive>:
 8009446:	4770      	bx	lr

08009448 <memchr>:
 8009448:	4603      	mov	r3, r0
 800944a:	b510      	push	{r4, lr}
 800944c:	b2c9      	uxtb	r1, r1
 800944e:	4402      	add	r2, r0
 8009450:	4293      	cmp	r3, r2
 8009452:	4618      	mov	r0, r3
 8009454:	d101      	bne.n	800945a <memchr+0x12>
 8009456:	2000      	movs	r0, #0
 8009458:	e003      	b.n	8009462 <memchr+0x1a>
 800945a:	7804      	ldrb	r4, [r0, #0]
 800945c:	3301      	adds	r3, #1
 800945e:	428c      	cmp	r4, r1
 8009460:	d1f6      	bne.n	8009450 <memchr+0x8>
 8009462:	bd10      	pop	{r4, pc}

08009464 <memcpy>:
 8009464:	440a      	add	r2, r1
 8009466:	4291      	cmp	r1, r2
 8009468:	f100 33ff 	add.w	r3, r0, #4294967295
 800946c:	d100      	bne.n	8009470 <memcpy+0xc>
 800946e:	4770      	bx	lr
 8009470:	b510      	push	{r4, lr}
 8009472:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009476:	4291      	cmp	r1, r2
 8009478:	f803 4f01 	strb.w	r4, [r3, #1]!
 800947c:	d1f9      	bne.n	8009472 <memcpy+0xe>
 800947e:	bd10      	pop	{r4, pc}

08009480 <memmove>:
 8009480:	4288      	cmp	r0, r1
 8009482:	b510      	push	{r4, lr}
 8009484:	eb01 0402 	add.w	r4, r1, r2
 8009488:	d902      	bls.n	8009490 <memmove+0x10>
 800948a:	4284      	cmp	r4, r0
 800948c:	4623      	mov	r3, r4
 800948e:	d807      	bhi.n	80094a0 <memmove+0x20>
 8009490:	1e43      	subs	r3, r0, #1
 8009492:	42a1      	cmp	r1, r4
 8009494:	d008      	beq.n	80094a8 <memmove+0x28>
 8009496:	f811 2b01 	ldrb.w	r2, [r1], #1
 800949a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800949e:	e7f8      	b.n	8009492 <memmove+0x12>
 80094a0:	4601      	mov	r1, r0
 80094a2:	4402      	add	r2, r0
 80094a4:	428a      	cmp	r2, r1
 80094a6:	d100      	bne.n	80094aa <memmove+0x2a>
 80094a8:	bd10      	pop	{r4, pc}
 80094aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80094ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80094b2:	e7f7      	b.n	80094a4 <memmove+0x24>

080094b4 <_realloc_r>:
 80094b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094b8:	4680      	mov	r8, r0
 80094ba:	4614      	mov	r4, r2
 80094bc:	460e      	mov	r6, r1
 80094be:	b921      	cbnz	r1, 80094ca <_realloc_r+0x16>
 80094c0:	4611      	mov	r1, r2
 80094c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80094c6:	f7ff bc1b 	b.w	8008d00 <_malloc_r>
 80094ca:	b92a      	cbnz	r2, 80094d8 <_realloc_r+0x24>
 80094cc:	f7ff fbb0 	bl	8008c30 <_free_r>
 80094d0:	4625      	mov	r5, r4
 80094d2:	4628      	mov	r0, r5
 80094d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094d8:	f000 f81b 	bl	8009512 <_malloc_usable_size_r>
 80094dc:	4284      	cmp	r4, r0
 80094de:	4607      	mov	r7, r0
 80094e0:	d802      	bhi.n	80094e8 <_realloc_r+0x34>
 80094e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80094e6:	d812      	bhi.n	800950e <_realloc_r+0x5a>
 80094e8:	4621      	mov	r1, r4
 80094ea:	4640      	mov	r0, r8
 80094ec:	f7ff fc08 	bl	8008d00 <_malloc_r>
 80094f0:	4605      	mov	r5, r0
 80094f2:	2800      	cmp	r0, #0
 80094f4:	d0ed      	beq.n	80094d2 <_realloc_r+0x1e>
 80094f6:	42bc      	cmp	r4, r7
 80094f8:	4622      	mov	r2, r4
 80094fa:	4631      	mov	r1, r6
 80094fc:	bf28      	it	cs
 80094fe:	463a      	movcs	r2, r7
 8009500:	f7ff ffb0 	bl	8009464 <memcpy>
 8009504:	4631      	mov	r1, r6
 8009506:	4640      	mov	r0, r8
 8009508:	f7ff fb92 	bl	8008c30 <_free_r>
 800950c:	e7e1      	b.n	80094d2 <_realloc_r+0x1e>
 800950e:	4635      	mov	r5, r6
 8009510:	e7df      	b.n	80094d2 <_realloc_r+0x1e>

08009512 <_malloc_usable_size_r>:
 8009512:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009516:	1f18      	subs	r0, r3, #4
 8009518:	2b00      	cmp	r3, #0
 800951a:	bfbc      	itt	lt
 800951c:	580b      	ldrlt	r3, [r1, r0]
 800951e:	18c0      	addlt	r0, r0, r3
 8009520:	4770      	bx	lr
	...

08009524 <_init>:
 8009524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009526:	bf00      	nop
 8009528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800952a:	bc08      	pop	{r3}
 800952c:	469e      	mov	lr, r3
 800952e:	4770      	bx	lr

08009530 <_fini>:
 8009530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009532:	bf00      	nop
 8009534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009536:	bc08      	pop	{r3}
 8009538:	469e      	mov	lr, r3
 800953a:	4770      	bx	lr
